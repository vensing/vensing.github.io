<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>芝士部落格</title>
  
  <subtitle>有思想，也有忧伤和理想，芝士就是力量</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chee5e.space/"/>
  <updated>2021-03-12T15:54:45.000Z</updated>
  <id>https://chee5e.space/</id>
  
  <author>
    <name>Cheese</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>近期的一些想法</title>
    <link href="https://chee5e.space/recent-insights/"/>
    <id>https://chee5e.space/recent-insights/</id>
    <published>2021-03-07T14:59:44.000Z</published>
    <updated>2021-03-12T15:54:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要用来记录下最近的一些摘录、内心感受与想法，如果你不同意见或者想法，那么以你为准。</p><a id="more"></a><blockquote><p>我喜欢我的懦弱，痛苦和难堪也喜欢。喜欢夏天的光照，风的气息，蝉的鸣叫，喜欢这些，喜欢得不得了。还有和你喝的啤酒，我说不清啊。</p></blockquote><hr><blockquote><p>心态和心理承受能力都急剧下滑，然后伴随而来的就是焦虑了。我自省和好好调整学东西。</p></blockquote><hr><blockquote><p>重要的事情必须要未雨绸缪、做好足够的积累与准备；运气这种概率事件是非常少的，不要抱有任何侥幸心理，要对事情本身有敬畏之心。<br>不要觉得自己很差劲，每个人在挣扎、努力、付出过后都会有收获；如果没有的话，最好认真审视一下自己的所作所为。没有目标和没有时间观念都会让人得过且过的过日子。</p></blockquote><hr><blockquote><p>心酸、有点生气、又很无可奈何，年龄越大代沟越宽；<br>去做一些填补空虚的事情来告诉自己还有可以信仰的事物并从中得到慰藉，比如阅读、写随笔、追番；<br>偶尔无所事事、打游戏、刷视频也很重要，毕竟太过于认真的生活是很沉重的一件事情。</p></blockquote><hr><blockquote><p>我最近最开心的一件事大概是：某天晚上和亲戚一起从下午开始打麻将，然后晚上吃家庭火锅，吃完再接着打麻将。我大概是没有输钱也没有赢钱，唯一一个输了一千多的人可能比较难过些，但也是照样快乐的。<br>我其实特羡慕他们的生活，小地方的小人物生活，我大概能够理解那些没事打打麻将的老人了。</p></blockquote><hr><blockquote><p>我过年之前在家待了一两个月，也基本不出门，在家就玩电脑也不说话，安静的可怕都不知道怎么过来的。过完年之后，见到了许久不见的亲戚朋友，感觉聊聊各自的生活也挺开心的。重要的是我对一些事情改变了自己的看法与偏见，很多事情还是得设身处地的去亲身体会才知道原来是这样。我还是不想一个人。</p></blockquote><hr><blockquote><p>入殓师貌似今年会引进，到时候一定得去电影院Cinema看一次。<br>「我打算迎来人生最大的转折点，但卖掉大提琴时，很不可思议，觉得很轻松。觉得被一直以来的束缚解放了。自己以前坚信不移的梦想，可能根本不是梦想。」</p></blockquote><hr><blockquote><p>从小玩到大的朋友，当然也是个学霸，医学硕博连读的那种。今天来问我编程相关的东西(当然我完全不会)，因为发论文要读数据出图，所以想用 R 或者 python 来弄。<br>聊了一个多小时，好久没有这么和人聊过天了，把最近的不愉快都抛诸脑后了，虽然现实中大家都挺不容易的。期待更多交流啦。</p></blockquote><hr><blockquote><p>三联生活周刊开设的「电影时光」栏目挺不错的，比如最近推送的这篇『人可以选择躺平不工作吗？』就深入到了我内心中的感受。<br>生命逐渐变成一场竞赛，所有人都是假想敌。这句话映射到了太多现实情况。也让我想起了刺猬的优雅中的一句话：『鱼缸中红金鱼理论的典型，一心想避免像她母亲那么神经质，并变得比她父亲更加优秀的年轻女孩，生命对她来说是一场永远的战争，必须要摧毁别人来达到胜利。』<br>一个人的命运啊，当然要靠自我奋斗，但也要考虑到历史的进程。『所谓的天赋或者才华只不过是恰好出生在一个接受并且认可你这种才华的社会和时代而已』。当然有些人可能过了很久才被社会和时代所认可比如梵高。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/WeChat%20Image_20210312234834.jpg" width="70%;" alt="▲ 人可以选择躺平不工作吗？"></img></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要用来记录下最近的一些摘录、内心感受与想法，如果你不同意见或者想法，那么以你为准。&lt;/p&gt;
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://chee5e.space/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="随笔" scheme="https://chee5e.space/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Switch 海外购日志</title>
    <link href="https://chee5e.space/switch-pickup-log/"/>
    <id>https://chee5e.space/switch-pickup-log/</id>
    <published>2021-01-23T02:05:54.000Z</published>
    <updated>2021-01-23T07:55:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>先说好，我不是在给 Switch 或者其他的外设之类写软文打广告噢(永远没人找我打广告)，这是一篇单纯的揽件开箱文。</p><a id="more"></a><h3 id="寻找童年的记忆"><a href="#寻找童年的记忆" class="headerlink" title="寻找童年的记忆"></a>寻找童年的记忆</h3><p>说起 Switch 可能第一印象就是一台游戏机，而大多数人接触游戏估计都是从很小的时候就开始了。我那一代小时候最开始接触到的游戏大概是「俄罗斯方块」，为什么是俄罗斯方块呢？</p><p>因为这个游戏是真的经典，你如果这么想就错了。事实上是那个时候接触的游戏机里就只有带俄罗斯方块这一个游戏，但也足够好玩了对那个时候的小孩子来说，而且还是朋友之间轮流交换着玩的，那时候几块钱的游戏机搁今天来说也是有点贵的。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/21931279694250_303.jpg" width="50%;" alt="▲ 俄罗斯方块游戏机"></img></p><p>看到上面这个图，是不是也想起些什么了呢？后面家里换电视了，就继续在电视上玩俄罗斯方块，是的我的朋友，那个时候电视上也有这个游戏。</p><h3 id="时代的眼泪"><a href="#时代的眼泪" class="headerlink" title="时代的眼泪"></a>时代的眼泪</h3><p>再后来，表哥家里买了“小霸王学习机”，当时是可以用来练习「五笔打字」之类的，美名其曰学习机实际上是一台伪装的货真价实的游戏机。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Rbfdbfb24d73bdf5ed93cb5eff57f297d.jpeg" alt="▲ 时代的眼泪——小霸王学习机"></p><p>这个学习机也是可以插卡带的，也有卖卡带的店当然都是卖的游戏啦哈哈哈。坦克大战、钻火圈、打雪球、摩托赛车…， 当时的游戏就算是放今天玩也绝对不会无聊的。</p><p>那个时候其实还有游戏厅，摇杆游戏机之类的，时过境迁现在已经渐渐没落了，大城市里现在都不叫游戏厅了叫游戏城但也基本没去过了。</p><h3 id="亚马逊海外购"><a href="#亚马逊海外购" class="headerlink" title="亚马逊海外购"></a>亚马逊海外购</h3><p>说起来，本来也没想过入 Switch 的，但是同学手头有个国行 Switch 就便宜转给我了。我这个同学也很有意思，19 年那会入了日版 Switch，然后又出了日版的，等到腾讯引入国行 Switch 之后就去做国行勇士了。再后来又转给我，转手又入了动森限定版主机。</p><p>而我收到国行版 Switch 之后，玩了几回就放着吃了几天灰，谁让国行与世隔绝呢。eShop 商店游戏少得可怜，好友还只能添加国行的或者也用微信绑定了的好友。也不是说国行就不行了，国行价格便宜、卡带和游戏相对来说比其他区是更实惠的，而且没有 online 联机服务订阅，因为都是走腾讯架在国内的服务器，所以下载游戏和联机什么的是很方便的。但很抱歉，做了几天勇士之后，我就在朋友的怂恿下可耻地叛变了。</p><hr><p>所以，我就把国行 Switch 和马里奥赛车国行卡带转手给咸鱼出掉了，总得来说低价输入再转手竟然还赚了一波。说到这就再扯一句，马里奥赛车是转给了一个大哥，给他孩子买的怕孩子疫情待在家里无聊。看来现今的家长对于游戏机和游戏还是更加理性和认可的。</p><p>然后我就去同学推荐的亚马逊海外购入了<a href="https://www.amazon.cn/gp/product/B08Q8P8QM6/ref=ya_st_dp_summary?ie=UTF8&psc=1">红蓝主机 + 动森卡带捆绑套餐</a>，当然也对比了下京东国际和天猫国际，京东和天猫只提供主机就 2.5K 左右了，而亚马逊海外购主机加动森卡带还包含关税也才 2.5K 左右，还是亚马逊这个比较实惠些。</p><p>虽说亚马逊海外购是亚马逊日本官方直营的比较靠谱，但是物流还是比较慢，如果你不介意的话还是选择亚马逊海外购吧。我当然是不介意的，所以果断的付了钱，11 号下午付完钱，13 号就从日本千叶县市川市发货了；然后 15 号送到 NRT(不是NTR，你想什么呢？什么不知道 NTR，罚你赶紧搜一下) 成田国际空港转国内 CAN 广州白云国际机场，18 号到达广州，一个多小时就清关放行了还是很快的，所以大概是走的海运。日本到国内走的 APEX(不是游戏啦) 易客满快递，到国内之后就走顺丰快递，20 号上午就收件了。竟然莫名觉得有点快，要知道亚马逊预计的是 28 号…</p><hr><h3 id="Switch-日版体验"><a href="#Switch-日版体验" class="headerlink" title="Switch 日版体验"></a>Switch 日版体验</h3><p>收件之后当然是到了开箱环节啦(多图预警⚠)，当然第一件事是喷酒精消毒咯安全第一，来看一下包装纸箱：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/WeChat%20Image_20210123095206.jpg" width="70%;" alt="▲ amazon.co.jp 包装纸箱"></img></p><p>亚马逊有点不够意思啊，就塞了几张纸没塞泡沫或者空气袋，动森卡带和 Logo 纤维布就压在 Switch 包装箱下面，不过 Switch 的包装还是很靠谱的。</p><hr><p>接着来看 Switch 纸箱：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/WeChat%20Image_20210123095212.jpg" width="70%;" alt="▲ Switch 包装纸箱"></img></p><p>拆开后，上面是 Joy-Con 红蓝手柄和主机；下面是电源适配器和 HDMI 连接线缆，手柄握把和 Joy-Con 腕带x2，特别大的底座其实本质就是一个大号 type-c 扩展坞(带有 PD 充电接口、HDMI 接口、USB 接口)</p><hr><div class="panel panel-info">    <div class="panel-title">产品清单</div>    <div class="panel-body">        <ul><li>主机本体*1</li><li>Joy-Con手柄*2</li><li>Joy-Con腕带*2</li><li>Joy-Con普通握把*1</li><li>电源适配器*1</li><li>HDMI线*1</li><li>基座*1</li></ul>    </div>    </div><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/0a0e20612e2529f6.jpg" alt="▲ 产品清单"></p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/WeChat%20Image_20210123095419.jpg" width="50%;" alt="▲ Switch 上手图"></img><br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/WeChat%20Image_20210123095424.jpg" width="50%;" alt="▲ Switch 上手图"></img></p><h4 id="账号和游戏"><a href="#账号和游戏" class="headerlink" title="账号和游戏"></a>账号和游戏</h4><p>由于是日版的，所以可以选择地区注册多个外区账号和访问外区 eShop 游戏商店。港区 eShop 在线商店是支持信用卡和预付卡的，但是网页版商店提供了多种支付方式，还支持支付宝噢；另外港区游戏也是非常多的，港区真国服！</p><div class="alert alert-success">关于更多港区 eShop 使用指南参考：港服 eShop 使用指南：每一个中文 Switch 玩家的「必需品」https://sspai.com/post/58543</div><p>进入 eShop 商店时可以选择不同的账号，之后会进入刚账号绑定的地区商店；进入游戏时也可以选择不同的账号游玩，而不用管游戏本体是在哪个区下载的，这个时候的账号只是存储游戏数据的不同。</p><hr><p>游戏的话，分为数字版软体游戏和实体卡带版游戏；对于我来说，卡带版游戏更加灵活方便，而且游戏本体不占用机器存储空间，还可以转手出去，就是切换游戏得弹出卡带。而数字版的话，就跟随账号走了，占用机器存储容量还需要下载游戏本体，好在 Switch 提供了 microSD 卡插槽可以扩充存储容量。另外，一些游戏本身没有提供卡带版本，就只有去 eShop 商店购买下载游玩了。免费游戏的话还是有挺多的，进入商店点击搜索，以其他条件搜寻：价格范围选择免费下载，商品种类选择软体；或者直接输入 <code>free</code> 搜索出来的就是免费的游戏了。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/WeChat%20Image_20210123095136.jpg" width="70%;" alt="▲ 动物森友会"></img></p><hr><h4 id="网络和下载"><a href="#网络和下载" class="headerlink" title="网络和下载"></a>网络和下载</h4><p>有了游戏之后当然是下载了，这个时候你会发现 Switch 下载和更新游戏数据是多么痛苦的一件事情。好在也是有一些方法可改善下的，我的话就是更改网络设置开代理啦，方法也很简单：去设置里找到互联网更改网络，代理服务器选择启用，并输入你电脑上机器的 ip 地址以及端口，注意将你的代理软件启用 Allow LAN 以允许来自局域网的连接。之后保存重新连接到网络，下载速度是有一定的提升的 (下载就走电脑代理软件了，我这下载速度能到 2M/s)。当然如果不差钱的话，买个 UU 加速器启用 Switch 加速服务，网络设置也是更改网络连接中的代理服务器设置。如果你的路由器已经装了代理插件的话，可以选择一个 NAT 为 A 的网络进行游戏下载。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/WeChat%20Image_20210123095941.jpg" alt="▲ 代理服务器设置"></p><h4 id="相册图片分享"><a href="#相册图片分享" class="headerlink" title="相册图片分享"></a>相册图片分享</h4><p>最近的系统更新里，任天堂加入了将图片分享到智慧型手机上的功能，需要扫码二次。第一次扫码是开启 Switch 热点服务，让手机连接上 Switch 的网络，之后再次扫码浏览器打开 Switch 网页保存图片。</p><p>另一种方式就是绑定 SNS 社交网络账号，这里需要网络能够科学上网；可以是路由器装了科学上网的插件或者是电脑代理软件开启 Allow LAN，Switch 网络配置代理服务器(如果你用过Line、Telegram 的代理服务器设置，其实都是一样的配置只不过 ip 绑定的是 127)。第一次科学上网绑定好了 twitter 账号之后，后续就可以不用科学上网也能分享相册图片发推了。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/WeChat%20Image_20210123095948.jpg" width="70%;" alt="▲ 相册图片共享"></img></p><h3 id="Switch-外设"><a href="#Switch-外设" class="headerlink" title="Switch 外设"></a>Switch 外设</h3><p>Switch 支持 USB 有线网卡、USB 蓝牙接收器、Type-C 转接底座、HDMI 采集卡直播（没有买外设，以下都是只能云一下）</p><p>是的，你没看错，Switch 还有一些奇奇怪怪的折腾方式。</p><h4 id="有线网络"><a href="#有线网络" class="headerlink" title="有线网络"></a>有线网络</h4><p>首先，Switch 是支持有线网络的，可以购买转接器进行转接，USB-A 口的可以在底座模式下接入，type-c 接口的可以直接插入掌机的 type-c 口。</p><p>我手头正好有一个 type-c 扩展坞，接上网线连接 Switch type-c 口即可切换为有线网络连接，接上键盘也可以输入文字。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/WeChat%20Image_20210123095411.jpg" width="50%;" alt="▲ Switch 连接有线网络"></img></p><p>但是并不能连接此扩展坞的 HDMI 口输出视频流至显示器上，即使我使用扩展坞的 C 口供电。</p><hr><h4 id="蓝牙接收器"><a href="#蓝牙接收器" class="headerlink" title="蓝牙接收器"></a>蓝牙接收器</h4><p>Switch 是没有蓝牙功能的，所以无线耳机是派不上用场了，但可以用蓝牙接收器来实现这个功能。然后你就可以使用你的无线耳机来接收声音了。<br>链接：<a href="https://item.jd.com/53137598767.html">https://item.jd.com/53137598767.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/d996eb53977f11ba.jpg" width="50%;"></img></p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/848392c3f67fe7ba.jpg" width="50%;" alt="▲ Switch 蓝牙接收器"></img></p><hr><h4 id="便携底座"><a href="#便携底座" class="headerlink" title="便携底座"></a>便携底座</h4><p>如果你嫌 Switch 的基座又大又不方便携带的话，你可以冒着风险试试便携底座，第三方的基座是有使用风险的。其实说到底这东西本质上就是一个带 PD 充电和 HDMI 的 type-c 扩展坞。<br>链接：<a href="https://item.jd.com/56165690789.html">https://item.jd.com/56165690789.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/6d02806362612ac3.jpg" width="50%;" alt="▲ Switch 便携底座"></img></p><hr><h4 id="视频采集卡"><a href="#视频采集卡" class="headerlink" title="视频采集卡"></a>视频采集卡</h4><p>有没有想过直播 Switch 游戏？如果你有这个需求的话，你可以试试视频采集卡这个玩意。<br>链接：<a href="https://item.jd.com/10022245136939.html">https://item.jd.com/10022245136939.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/adc152c8c240737c.jpg" width="70%;"></img><br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/4834102c20bbf4ea.jpg" width="70%;"></img></p><p>其实说到底，这些都是 type-c 接口提供的无限可能性，希望 type-c 早日统一各种接口。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>最后贴一下国行与海外版机器对比图：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/f6d8ee99f0adeb39.jpg" alt="▲ 国行与海外版对比"></img></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先说好，我不是在给 Switch 或者其他的外设之类写软文打广告噢(永远没人找我打广告)，这是一篇单纯的揽件开箱文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="揽件日志" scheme="https://chee5e.space/categories/%E6%8F%BD%E4%BB%B6%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="switch" scheme="https://chee5e.space/tags/switch/"/>
    
  </entry>
  
  <entry>
    <title>我的小鱼你醒了</title>
    <link href="https://chee5e.space/my-little-fish-wake-up/"/>
    <id>https://chee5e.space/my-little-fish-wake-up/</id>
    <published>2021-01-18T09:35:24.000Z</published>
    <updated>2021-01-18T10:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我的小鱼你醒了，</br><br>还认识早晨吗；</br><br>昨夜你曾经说，</br><br>愿夜幕永不开启；</br><br>你的香腮边轻轻滑落的，</br><br>是你的泪还是我的泪；</br><br>初吻吻别的那个季节，</br><br>不是已经哭过了吗？</br> <a id="more"></a><br>我的指尖还记忆着，</br><br>你慌乱的心跳；</br><br>温润的体香里，</br><br>那一缕长发飘飘。</br></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我的小鱼你醒了，&lt;/br&gt;&lt;br&gt;还认识早晨吗；&lt;/br&gt;&lt;br&gt;昨夜你曾经说，&lt;/br&gt;&lt;br&gt;愿夜幕永不开启；&lt;/br&gt;&lt;br&gt;你的香腮边轻轻滑落的，&lt;/br&gt;&lt;br&gt;是你的泪还是我的泪；&lt;/br&gt;&lt;br&gt;初吻吻别的那个季节，&lt;/br&gt;&lt;br&gt;不是已经哭过了吗？&lt;/br&gt;
    
    </summary>
    
    
      <category term="万叶集" scheme="https://chee5e.space/categories/%E4%B8%87%E5%8F%B6%E9%9B%86/"/>
    
    
      <category term="我的小鱼" scheme="https://chee5e.space/tags/%E6%88%91%E7%9A%84%E5%B0%8F%E9%B1%BC/"/>
    
  </entry>
  
  <entry>
    <title>安達としまむら</title>
    <link href="https://chee5e.space/adachi-and-shimamura/"/>
    <id>https://chee5e.space/adachi-and-shimamura/</id>
    <published>2021-01-07T14:44:57.000Z</published>
    <updated>2021-01-07T15:12:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日野和永藤似乎是从小一起长大的，我是进了高中才认识的；<br>就算是朋友，和她们之间的距离感也很不一样；<br>不过，所谓人之间的距离呢，也不是越近越好；<br>太接近的话就会有排斥，也可能会错过。</p></blockquote><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/AnimeImage_20210107230035.jpg"></p><blockquote><p>与人相处都会伴随着些许痛苦；<br>无法理解的事情，麻烦的事情；<br>以及关系不和时，修复和维持关系需要做出很多的努力；<br>不过，在那样的负面间隙中，藏着幸福。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/AnimeImage_20210107230042.jpg"></p><blockquote><p>这么一想，我对待友情，还真是持续不下去；<br>我就是一个不去延续人际关系的冷酷家伙；<br>不过，我是这么想的：<br>强大到可以一直陪伴着你的关系，稀少到屈指可数；<br>要是在命运的长河里陷得太久的话，再深的羁绊也会分崩离析。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/AnimeImage_20201225175524.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;日野和永藤似乎是从小一起长大的，我是进了高中才认识的；&lt;br&gt;就算是朋友，和她们之间的距离感也很不一样；&lt;br&gt;不过，所谓人之间的距离呢，也不是越近越好；&lt;br&gt;太接近的话就会有排斥，也可能会错过。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="动漫迷" scheme="https://chee5e.space/categories/%E5%8A%A8%E6%BC%AB%E8%BF%B7/"/>
    
    
      <category term="安达与岛村" scheme="https://chee5e.space/tags/%E5%AE%89%E8%BE%BE%E4%B8%8E%E5%B2%9B%E6%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>使用 Github Actions 部署 HEXO 博客</title>
    <link href="https://chee5e.space/hexo-deploy-github-actions/"/>
    <id>https://chee5e.space/hexo-deploy-github-actions/</id>
    <published>2020-12-09T02:05:30.000Z</published>
    <updated>2020-12-09T06:33:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>促成我从 Travis CI 换成 Github Action 的原因找到了：Travis CI 任务排队足足快半小时才启动虚机跑任务。我想慢的原因大概是我没花钱白嫖了这么久😅</p><a id="more"></a><p>所以这篇文章主要来讲一下如何使用 Github Actions 部署 HEXO 博客，好吧虽然是被别人写烂了的文章，但自己上手操作起来还是有些收获的。但凡有想法的事情，以最快的速度行动起来总是没错的，状态也可能是最好的。</p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>为了和触发 Travis CI 任务的 <code>source</code> 分支独立区分开，我创建了一个新的 <code>source-action</code> 分支用来触发 Github Actions 的工作流。目标是将 hexo 博客源码 push 到 Github 仓库的 <code>source-action</code> 分支后触发 Github Actions 的工作流，启动 OS 实例执行任务，安装 node 环境构建 hexo 网页，然后推送到仓库的 <code>master</code> 分支作为博客备份，同时再推送一份到 VPS 上部署。其实这和 Travis CI 的流程也是一样的，只是涉及到 SSH key、环境变量、配置文件的修改。</p><h3 id="生成部署密钥"><a href="#生成部署密钥" class="headerlink" title="生成部署密钥"></a>生成部署密钥</h3><p>我们需要在指定的目录下生成 ssh key, 打开终端，进入 blog-action-sshkey 目录，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure><p>然后一路按几次回车就完成生成工作了，最后在目录下会生成 <code>github-deploy-key</code> 私钥 和 <code>github-deploy-key.pub</code> 公钥两个文件。</p><h3 id="配置部署密钥"><a href="#配置部署密钥" class="headerlink" title="配置部署密钥"></a>配置部署密钥</h3><h4 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h4><p>复制 github-deploy-key.pub 文件里的内容，在博客仓库 <code>Settings</code> -&gt; <code>Deploy keys</code> -&gt; <code>Add deploy key</code> 页面上添加 SSH 公钥：</p><ul><li>Title 填写 HEXO_DEPLOY_PUB。</li><li>Key 填写 github-deploy-key.pub 文件内容。</li><li>勾选 Allow write access 选项。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201209-105708.jpg" alt="填写部署公钥"></p><h4 id="配置私钥"><a href="#配置私钥" class="headerlink" title="配置私钥"></a>配置私钥</h4><p>复制 github-deploy-key 文件里的内容，在博客仓库 <code>Settings</code> -&gt; <code>Secrets</code> -&gt; <code>Add a new secret</code> 页面上添加 SSH 私钥：</p><ul><li>Name 填写 HEXO_DEPLOY_PRI。</li><li>Value 填写 github-deploy-key 文件内容。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201209-105110.jpg" alt="填写部署私钥"></p><h3 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h3><p>拉取远程的 <code>source-action</code> 分支并检出到本地，在 blog 仓库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，最后的目录结构应该是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blog (repository)</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure><h4 id="编写-deploy-yml"><a href="#编写-deploy-yml" class="headerlink" title="编写 deploy.yml"></a>编写 deploy.yml</h4><p>又到了编写配置文件的环节了，嘛反正 CI 最后落地下来都是在配置文件的各个步骤中，也有使用界面的 CI 服务，比如 Buddy CI 但是我并没有用过。</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>点击查看完整deploy.yml</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">source-action</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">vensing</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">vensing@foxmail.com</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">vensing/Kratos-Rebirth</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">hexo5-custom</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">vensing/vensing.github.io</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">14.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/Kratos-Rebirth</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">timedatectl</span> <span class="string">set-timezone</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$HEXO_DEPLOY_PRI&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">vensing.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">$GIT_USER</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SSH</span> <span class="string">VPS</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">webfactory/ssh-agent@v0.4.1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ssh-private-key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">VPS</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">rsync</span> <span class="string">-av</span> <span class="string">--delete</span> <span class="string">public/</span> <span class="string">root@vensing.com:/hexo</span></span><br></pre></td></tr></table></figure>     </div></div>    </div><p>以下是对配置文件中的各个部分做简单解释：</p><h4 id="设置触发条件和环境变量"><a href="#设置触发条件和环境变量" class="headerlink" title="设置触发条件和环境变量"></a>设置触发条件和环境变量</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">source-action</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">vensing</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">vensing@foxmail.com</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">vensing/Kratos-Rebirth</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">hexo5-custom</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">vensing/vensing.github.io</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><ul><li><code>name</code> 是当前 Action 的名字，最后你可以在仓库的 <code>Actions</code> 菜单项中看到它。</li><li><code>on</code> 是此 Action 触发条件，当满足条件时会触发此任务，上面的 <code>on.push.branches.source-action</code> 是指当 <code>source-action</code> 分支收到 push 后会触发 Action 执行任务。</li><li><code>env</code> 为环境变量对象<ul><li>env.GIT_USER 为 Hexo 编译后使用此 git 用户部署到仓库</li><li>env.GIT_EMAIL 为 Hexo 编译后使用此 git 邮箱部署到仓库</li><li>env.THEME_REPO 为 Hexo 所使用的主题的仓库，这里为 vensing/Kratos-Rebirth</li><li>env.THEME_BRANCH 为 Hexo 所使用的主题仓库的版本，可以是：branch、tag 或者 SHA</li><li>env.DEPLOY_REPO 为 Hexo 编译后要部署的仓库，例如：vensing/vensing.github.io</li><li>env.DEPLOY_BRANCH 为 Hexo 编译后要部署到的分支，例如：master</li></ul></li></ul><h4 id="指定任务及执行步骤"><a href="#指定任务及执行步骤" class="headerlink" title="指定任务及执行步骤"></a>指定任务及执行步骤</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">14.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/Kratos-Rebirth</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>jobs 为此 Action 下的任务列表<ul><li>jobs.{job}.name 任务名称</li><li>jobs.{job}.runs-on 任务所需容器，可选值：ubuntu-latest、windows-latest、macos-latest。</li><li>jobs.{job}.strategy 策略下可以写 array 格式，此 job 会遍历此数组执行。</li><li>jobs.{job}.steps 一个步骤数组，可以把所要干的事分步骤放到这里。<ul><li>jobs.{job}.steps.$.name 步骤名，编译时会会以 LOG 形式输出。</li><li>jobs.{job}.steps.$.uses 所要调用的 Action，可以到 <a href="https://github.com/actions">https://github.com/actions</a> 查看更多。</li><li>jobs.{job}.steps.$.with 一个对象，调用 Action 传的参数，具体可以查看所使用 Action 的说明。</li></ul></li></ul></li></ul><p>在上面配置文件中的代码段，指定了 Action 依赖的 OS 实例为 ubuntu-latest，以及 node 运行环境版本为 14.x，任务 steps 中引用了一个 版本为 v2 的 Action <code>checkout</code> ，<code>actions/checkout@v2</code> 的作用是 Checkout 一个 git 仓库到当前 ubuntu 容器。</p><ul><li><p><code>Checkout theme repo</code> step 中从环境变量中拿出 $ 指定本站使用的博客仓库名及分支 <strong>hexo5-custom</strong>，检出到 <strong>themes/Kratos-Rebirth</strong> 目录下。</p></li><li><p><code>Checkout deploy repo</code> step 中从环境变量中拿出 $ 指定部署备份的博客仓库，及要部署备份生成的静态网页的分支 <strong>master</strong>，检出到 <strong>.deploy_git</strong> 目录下。</p></li><li><p><code>Use Node.js</code> step 中使用了 <code>actions/setup-node@v1</code> action 指定了 node 的版本。</p></li></ul><h4 id="配置环境即部署到-Github-Pages"><a href="#配置环境即部署到-Github-Pages" class="headerlink" title="配置环境即部署到 Github Pages"></a>配置环境即部署到 Github Pages</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">sudo</span> <span class="string">timedatectl</span> <span class="string">set-timezone</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;$HEXO_DEPLOY_PRI&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">    <span class="string">ssh-keyscan</span> <span class="string">vensing.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">    <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">$GIT_USER</span></span><br><span class="line">    <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p>检出主题分支和 Github Pages 部署分支之后，接着配置执行环境：</p><ul><li>设置容器的时区；</li><li>将在 <code>Settings -&gt; Secrets</code> 中的 SSH 私钥写入到 ~/.ssh/id_rsa 文件中；</li><li>设置 id_rsa 的文件权限及 know_hosts、git 全局用户信息</li></ul><p>接着执行 npm install 安装依赖和 npm run deploy 部署到 Github Pages 进行备份。<code>run: |</code> 可分行连续执行多条命令，需要注意的是使用 hexo 的 deploy 命令需要我们安装 <code>hexo-deployer-git</code> 依赖，所以需要先在本地安装下依赖写入 package.json 中。</p><h3 id="Github-Actions-部署-hexo-到-VPS"><a href="#Github-Actions-部署-hexo-到-VPS" class="headerlink" title="Github Actions 部署 hexo 到 VPS"></a>Github Actions 部署 hexo 到 VPS</h3><p>在使用 Travis CI 时，如果想要把 Hexo 部署到 VPS 服务器上，需要做的东西就比较多了。先是得对私钥进行加密处理(Windows 下会出现问题，*nix 才正常)，为此我们得在 *nix 环境下安装 ruby、travis ci 等等一系列的东西，然后还得把加密后的私钥上传到仓库，接着写解密脚本最后才能放入容器的 .ssh/id_rsa 文件中。总之一大堆套餐下来，很麻烦，而 Github 直接可以设置私钥至 <code>Secrets</code> 中且无需将加密后的私钥放到仓库里，最后直接可以在容易中拿到。更加简单和安全，大概？</p><p>要将构建好的静态网页推送到 VPS，需要将 SSH 公钥复制到 VPS 的 ~/.ssh/authorized_keys 文件中，如果有多个 SSH 公钥，换行后追加即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SSH</span> <span class="string">VPS</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">webfactory/ssh-agent@v0.4.1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">ssh-private-key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">VPS</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">rsync</span> <span class="string">-av</span> <span class="string">--delete</span> <span class="string">public/</span> <span class="string">root@vensing.com:/hexo</span></span><br></pre></td></tr></table></figure><p>在 Action 中要想部署到 VPS 上，需要安装一个第三方的 action: <code>webfactory/ssh-agent@v0.4.1</code>，在执行完 <code>npm run build</code>（hexo clean &amp;&amp; hexo g）之后会在 public 目录下生成构建好的静态网页，以便后面推送到 VPS。这里不用 .deploy_git 目录是因为，这是一个 Git 仓库，里面有 .git 目录，时间一久文件会变得很多，况且构建的静态网页目录根本不需要这些文件。</p><p><code>SSH VPS step</code> 中我们从环境变量中拿到 SSH 私钥，并将其指定为 ssh-private-key 的值，最后使用 rsync 命令推送到 VPS 即可。</p><p>最后来看一眼，Githun Actions 执行的效果图：<br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201209-105948.jpg" alt="Githun Actions"></p><p>切换到 Github Actions 后，体验很好，速度很快，繁忙的时候也只花两分钟排队。</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">利用 Github Actions 自动部署 Hexo 博客</a></li><li><a href="https://yestyle.medium.com/%E5%88%A9%E7%94%A8-github-actions-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-hugo-%E5%8D%9A%E5%AE%A2%E5%88%B0%E8%87%AA%E5%BB%BA-vps-fa3ed89c8573">利用 GitHub Actions 自动部署 Hugo 博客到自建 VPS</a></li><li><a href="https://github.com/actions">Github Actions</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;促成我从 Travis CI 换成 Github Action 的原因找到了：Travis CI 任务排队足足快半小时才启动虚机跑任务。我想慢的原因大概是我没花钱白嫖了这么久😅&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客开发" scheme="https://chee5e.space/categories/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CI" scheme="https://chee5e.space/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>Hackintosh 尝鲜</title>
    <link href="https://chee5e.space/dell-hackintosh/"/>
    <id>https://chee5e.space/dell-hackintosh/</id>
    <published>2020-12-08T12:14:10.000Z</published>
    <updated>2020-12-14T14:07:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>话说，最近苹果推出了基于 M1 芯片的 MacBook Air 和 MacBook Pro，以及新的 macOS Big Sur。本文将写写戴尔 G7 如何黑苹果尝鲜 <del>Big Sur</del> Catalina，如果您是忠实的 Windows 粉和 Linux 粉，在看的过程中感觉到任何不适的话，可以随时右上角关闭网页。至于各操作系统之间的圣战，我们就安安静静地吃瓜就好了。</p><a id="more"></a><p>心血来潮突然折腾装黑苹果的契机，大概是因为前几天调试 iOS 浏览器网页时，在 Windows 下实在是无能为力? 然后就突发奇想地折腾安装黑苹果，反正这个世界上最好找的就是借口了。</p><p>说回黑苹果，其实早在一两年前看过一些黑苹果教程网页，但在看到无线网卡不能驱动无法上网、死机、卡屏以及其他各种问题时，把我这个小白给吓到劝退了。但谁又能阻挡住一颗脱缰的好奇心呢，说干就干。在拜读了「黑果小兵」博客的安装教程后，我就开始准备备份硬盘、格盘，做 U 盘安装镜像了。</p><p><span style="color:red;"> Note: 本文仅供参考，因操作不当造成的后果概不负责。</span></p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li>电脑型号 DELL-G7-7588</li><li>操作系统 macOS Catalina 10.15.7</li><li>处理器 Intel Core i5-8300H @ 2.30GHz 四核</li><li>内存 16GB 2667 MHz DDR4</li><li>硬盘 HP SSD 1TGB PCIE NVME + HP SSD 500G SATA</li><li>显卡 Intel UHD Graphics 630 </li><li>网卡 Intel AC9560</li><li>声卡 ALC256 </li><li>SMBIOS MacBookPro15,2 (13-inch, 2019</li></ul><h4 id="准备安装盘"><a href="#准备安装盘" class="headerlink" title="准备安装盘"></a>准备安装盘</h4><p>首先，我的机器是戴尔 G7 7588，戴尔的机器很多都可以黑苹果，人傻钱多戴的好处瞬间体现出来了。硬盘我有两块，一块是 m.2 接口 NVME 的 HP 1T SSD，另一块是 SATA 接口的 HP 500G SSD。至于为什么选惠普的盘，因为性价比高啊(虽然它好像是贴牌的)，800 多 1T 的 NVME SSD 已经挺实惠了，隔壁三星能卖到 1000+ (听说三星的盘对黑苹果不友好，但好像修复了)。我的想法是，Windows 就让它待在原来的 NVME SSD 上，500 G 的 SATA SSD 就用来装 macOS，这样总不至于把 Windows 搞崩吧？什么？都上黑苹果了还要 Windows 干啥？小孩子才做选择，大人还要打游戏呢。</p><p>由于我压根没考虑在一块硬盘上分出一个区来安装 macOS，所以本文就此略过。</p><h4 id="准备-U-盘安装镜像"><a href="#准备-U-盘安装镜像" class="headerlink" title="准备 U 盘安装镜像"></a>准备 U 盘安装镜像</h4><p>在备份完 SATA SSD 之后，就可以把它格式化了，如果你安装盘的格式是 MBR，请将其改成 GPT 格式，MBR 在最近的 macOS 上并不被支持(后面抹盘的时候也会选择 GUID 分区)。接着从黑果小兵那下载了 macOS 10.15.7 Catalina 的 dmg 镜像，这个镜像包含 macOS、Clover EFI、OC EFI、WEPE EFI 全家桶，总之用它就对了。接下来呢，还得做一个 U 盘安装镜像，我用的是 balenaEtcher 这个工具。具体的操作步骤：</p><ul><li>选择 dmg 镜像</li><li>选择要烧制的 U 盘</li><li>开始制作</li></ul><p>当 balenaEtcher 出现绿色的 Complete 字样之后就说明烧制成功了，然后 Windows 会弹窗提示格式化 U 盘，无须理会它直接右上角关闭。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/27CD5841-A62B-4CB1-8BAD-BBBE8D852301.png" alt="准备 U 盘安装镜像"></p><h4 id="准备机器机型-EFI"><a href="#准备机器机型-EFI" class="headerlink" title="准备机器机型 EFI"></a>准备机器机型 EFI</h4><p>由于不同的机器硬件差别太大，所以必须要符合机型的 EFI 才能顺利的引导黑苹果，所以还需要去下载对应机型的 EFI。我选择的是最近比较流行的 OpenCore（OC）引导工具，那么去哪里找对应机型的 OC EFI 呢? 答案当然是万能的 Github 了，你也可以去「黑果小兵」博客查找符合你机器机型的 EFI 信息，最后基本都是要去 Github 下载的。</p><p>Dell G7 7588 的 EFI 有三个项目在维护，我使用的是 <a href="https://github.com/flyfeng2002/FYQ-Hackintosh">FYQ-Hackintosh</a> 提供的 OC EFI。直接 Clone 仓库或者下载 zip 包，不要下载 Release 页面下的旧包。此仓库包含了 OC EFI 以及声卡修复脚本、雷电3补丁。使用分区工具删除 U 盘中 OC 分区里的文件，将下载的对应机器 OC EFI 复制到 U 盘 OC 分区下。 </p><h4 id="BIOS设置"><a href="#BIOS设置" class="headerlink" title="BIOS设置"></a>BIOS设置</h4><ul><li>UEFI Boot Path Security: Never</li><li>SATA Operation: AHCI</li><li>Enabled USB Boot Support: Enabled</li><li>Enable External USB Port: Enabled</li><li>Thunderbolt Security: No Security</li><li>PTT Security: Disabled</li><li>Secure Boot Enable: Disabled</li><li>Intel SGX: Disabled</li><li>VT for Direct I/O: Disabled</li><li>Auto OS Recovery Threshold: Disabled</li><li>SupportAssist OS Recovery: Disabled</li></ul><h3 id="安装-macOS"><a href="#安装-macOS" class="headerlink" title="安装 macOS"></a>安装 macOS</h3><p>以下安装步骤参考自 <a href="https://mp.weixin.qq.com/s/9AfyueVyOX_SVHEUwihoaA">黑果小兵</a>，图片引用的是 Big Sur 的安装过程，但和 Catalina 的安装步骤基本一致。</p><p>开机，按 F12 选择 U盘 引导，光标移动到 EFI USB Device Parttion2 选择 OpenCore 分区启动：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/C0CF33FA-AC4D-4301-90EB-C214349420DA.png" alt="OpenCore 引导界面安装 Catalina"></p><p>进入 OpenCore 主引导界面，选择 Install macOS Catalina，直接回车进入 OpenCore 引导。</p><p>出现安装界面，选择磁盘工具，点击继续：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/4F95D2BE-0D13-4ABE-8EE2-1DF1691D31B0.png" alt="安装界面-磁盘工具"></p><p>进入磁盘工具，点击下图所示，选择显示所有设备：<br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/DC50DF98-FF96-4452-ACC8-00783B6B0022.png" alt="显示磁盘"></p><p>选择 HP 500G SSD SATA 这块需要安装 macOS 的磁盘，点击抹掉，在弹出的窗口中输入：名称：Macintosh HD；格式：APFS；方案：GUID分区图。<br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/889A7BAF-85B6-4E53-AE9C-315D361A0C9A.png" alt="抹掉磁盘"></p><p>点击抹除，然后等待操作结束，点击完成，通过菜单选择退出磁盘工具或者按窗口左上角红色按钮离开磁盘工具，返回到安装界面，选择安装 macOS，点击继续：<br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/8DCEE97F-3AD4-4243-9E53-A1007772FB34.png" alt="安装 macOS"></p><p>然后点击同意安装协议，选择将要安装的磁盘卷标 Macintosh HD，点击继续：<br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/3C17C17C-F285-4B07-81B9-EA48F5A4CCC3.png" alt="选择安装盘 Macintosh HD"></p><p>它会把USB安装盘上的安装文件预复制到要安装的系统分区里，这个过程通常会持续1-2分钟，之后系统会自动重启，进入第二阶段的安装：<br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/1DB683B1-F640-40A4-8F26-A8D49F3E6C91.png" alt="安装 macOS 中"></p><p>重启后继续安装，在安装期间，通常会自动重启 2-3 遍。最好是把 OC EFI 启动项设置为第一项最先启动，否则重启时可能进入其他引导项，或者重启后手动选择 OC EFI。</p><p>之后就是进入设置向导界面了，后面的操作就不细说。</p><p>最后，来一张 macOS catalina 截图：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/IMG_3658.png"></p><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><h4 id="Hackintool-和-OCC"><a href="#Hackintool-和-OCC" class="headerlink" title="Hackintool 和 OCC"></a>Hackintool 和 OCC</h4><p>下载 Hackintool 和 OpenCore Configuration 软件</p><h4 id="挂载-EFI"><a href="#挂载-EFI" class="headerlink" title="挂载 EFI"></a>挂载 EFI</h4><p>安装完成之后，macOS 安装盘中还需要将 U 盘中 OC 分区的 EFI 复制到安装盘 EFI 分区中。先挂载安装盘 EFI，再将 U 盘 OC EFI 替换过去。</p><p>打开 OCC 软件，选择<code>工具</code>菜单项，点击<code>挂载 EFI</code>，选择 macOS 安装盘的 EFI 分区挂载:<br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201208-224137.jpg"><br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201208-224424.jpg"></p><p>也可以使用命令行挂载 EFI 分区：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有磁盘分区</span></span><br><span class="line">diskutil list</span><br><span class="line"><span class="comment"># 注意将 disk1s1 换成对应的 EFI 分区, 挂载需要 sudo 权限</span></span><br><span class="line">sudo diskutil mount disk1s1</span><br></pre></td></tr></table></figure><h4 id="休眠"><a href="#休眠" class="headerlink" title="休眠"></a>休眠</h4><p>在 Hackintool 电源项里点击刷新按钮左侧图标，将红色的项修改，之后变成绿色即可。休眠我这里是休眠即醒，貌似要设置 CFG 这些东西，嫌太复杂就直接设置桌面屏幕保护程序，开启后再进入系统需要解锁，感觉和休眠功能差不多。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201208-224024.jpg"></p><h4 id="亮度调节"><a href="#亮度调节" class="headerlink" title="亮度调节"></a>亮度调节</h4><p>系统偏好设置里的默认亮度调节快捷键是 F14、F15，但我最多只有 F11、F12 是亮度调节，在系统设置快捷键里重新映射为 F11、F12 即可，亮度调节正常。<br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201208-225539.jpg"></p><h4 id="三码"><a href="#三码" class="headerlink" title="三码"></a>三码</h4><p><code>iMessages</code> 和 <code>FaceTime</code> 需要三码才能登录。</p><p>打开 OCC 软件，选择<code>工具</code>菜单项，点击<code>挂载 EFI</code>，选择 macOS 安装盘的 EFI 分区挂载，进入 EFI/OC 目录下，右键 config.plist 选择使用 OCC 打开：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201208-224521.jpg"></p><p>进入 OCC 选择机型平台设置，切换到 DataHub-Generic-PlatformNVRAM， 查询序列号有效性右侧下拉框选择机型，最好是选择 CPU 型号接近的机型。此时 SSN、SUUID 码已经生成好，点击 ROM 项右侧<code>来自系统</code>，从 <code>Hack</code> 切换到 <code>Mac</code>，点击生成。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201208-224749.jpg"></p><p>最好在 OCC 菜单栏上选择 <code>文件</code>-&gt; <code>保持</code>，重启系统，三码生成就完成啦，可以在 Hackintool 系统菜单项中查看三码。对 Config.plist 修改之后要保存文件，建议对 EFI 分区进行备份。</p><h4 id="黑苹果开启原生HiDPI"><a href="#黑苹果开启原生HiDPI" class="headerlink" title="黑苹果开启原生HiDPI"></a>黑苹果开启原生HiDPI</h4><p>一条命令可开启接近原生的 HIDPI 设置，脚本的 Github 项目地址: GitHub - xzhih/one-key-hidpi: Enable macOS HiDPI。</p><p>终端下执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bash</span><br><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;xzhih&#x2F;one-key-hidpi&#x2F;master&#x2F;hidpi.sh)&quot;</span><br></pre></td></tr></table></figure><p>如果访问Github出现网络超时的情况，可以使用下面国内的脚本命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bash</span><br><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;html.sqlsec.com&#x2F;hidpi.sh)&quot;</span><br></pre></td></tr></table></figure><p>开启后重启生效！</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201208-225812.jpg"></p><h4 id="无线"><a href="#无线" class="headerlink" title="无线"></a>无线</h4><p>下载对应系统版本的 <code>AirportItlwm.kext</code> ：</p><p>Supported Intel WI-FI Cards By itlwm:</p><ul><li>3xxx: 3160, 3165, 3168</li><li>7xxx: 7260, 7265</li><li>9xxx：9260,9461, 9462, 9560</li><li>22000：ax200</li></ul><p>Supported Devices List<br>AirportItlwm.kext download from <a href="https://github.com/1hbb/OpenIntelWireless-Factory/releases">https://github.com/1hbb/OpenIntelWireless-Factory/releases</a>, support OS:</p><ul><li>AirportItlwm-BigSur</li><li>AirportItlwm-Catalina</li><li>AirportItlwm-HighSierra</li><li>AirportItlwm-Mojave</li></ul><p>替换掉 <code>EFI/OC/Kexts</code> 中的 <code>AirportItlwm.kext</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201208-225336.jpg"></p><p>重启电脑，即可看到 wifi 功能已可以使用，接力功能可使用；隔空投送和随航等其它功能无法使用；实际测试下来网速和在 Windows 下的速度基本一致。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/2020-12-06.5.57.56.png"></p><p>如果想要体验隔空投送和随航等功能，那么你可能需要更换博通网卡，但是已经被无良商家炒到两三百的价格…</p><h4 id="雷电3补丁"><a href="#雷电3补丁" class="headerlink" title="雷电3补丁"></a>雷电3补丁</h4><p>我的电脑是旧款 G7，将下载好的雷电3补丁目录打开，复制 <code>SSDT-THUNDERBOLT.aml</code> 到 <code>EFI/OC/ACPI</code> 目录下， 复制 <code>IOElectrify.kext</code> 到 <code>EFI/OC/Kexts</code> 目录下，用 OCC 打开 config.plist 文件，将复制好的 <code>SSDT-THUNDERBOLT.aml</code> 拖动到 <code>ACPI设置</code> 添加项中并启用；将复制好的 <code>IOElectrify.kext</code> 拖动到 <code>Kernel-内核</code> 设置添加项中并启用。重启电脑。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201208-225020.jpg"><br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201208-225155.jpg"><br><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201208-225934.jpg"></p><p>经测试，雷电3接口外接 Type-C 扩展坞可以连接 USB LAN 千兆以太网、USB-C PD 快充、HDMI 连接显示器正常输出视频、USB3.0 正常；支持设备热插拔。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Jietu20201208-225850.jpg"></p><p>可以看到 wi-fi 功能已开启，并且雷电3外接 Type-C 扩展坞可以连接 USB LAN 千兆以太网，USB LAN 的网速测试和在机器自带 RJ45 网络速度基本一致。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>休眠功能可能无法使用</li><li>自带 HDMI 接口不能输出视频至外接显示器</li><li>Intel 网卡驱动下的 2.4G WiFi 若有蓝牙设备(小米小爱音箱)连接，会严重干扰网速</li><li>Intel WiFi 隔空投送和随航等功能无效(需更换博通网卡)</li><li>关机不断电(具体原因还在找，可能是刷了内核补丁引起的)</li></ul><p>关于 1080P 下的 HiDPI ，如果设置成 1920*1080 分辨率，字体和应用就会有点小和糊，启用更低分辨率的 HiDPI 之后，字体和应用 UI 变得硕大但是比较清晰，截图的分辨率会扩大一倍非常清晰。所以，我一般是 1920*1080 这样能看到的东西更多，截图可以调低分辨率这样出来的图分辨率扩大一倍非常清晰。</p><p>从最近这些天的体验来说，macOS 已经能够胜任很多日常任务了，无论是浏览网页、看视频还是开发编程体验都比 Windows 要来得更好，且从未有过系统崩溃。如果你能忽略屏幕质量和黑苹果不完美下的各种小问题，且能有足够的时间去折腾，那么黑苹果体验可能会比 Windows 好很多。想要完美体验 macOS 还是得上 MacBook 和 4K 屏，更多关于 HiDPI 的内容请查看：<a href="https://zhuanlan.zhihu.com/p/20684620">有关 retina 和 HiDPI 那点事</a>。</p><h3 id="OTA-Big-Sur"><a href="#OTA-Big-Sur" class="headerlink" title="OTA Big Sur"></a>OTA Big Sur</h3><p>最近试了下从 Catalina 10.15.7 OTA 在线系统更新升级到 Big Sur 11.0.1，用移动固态硬盘和时间机器软件备份了一下 Catalina 系统，方便出问题回滚。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/IMG_3736.JPG"></p><p>第一次下载完系统升级安装包之后安装时提示软件包缺失损坏，重启再下载就可以直接更新到 Big Sur。使用下来，基本没有任何问题，安装的软件也没有兼容性问题；Safari 14 终于可以加载 webp 格式的图片了。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/IMG_3738.JPG"></p><p>换成圆角矩形应用图标风格后：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/jietu2020-12-14.5.57.26.png"></p><h3 id="macOS-软件"><a href="#macOS-软件" class="headerlink" title="macOS 软件"></a>macOS 软件</h3><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/2020-12-05.8.09.56.png"></p><ul><li><a href="https://www.macwk.com/">https://www.macwk.com</a></li><li><a href="https://lemon.qq.com/lab/">https://lemon.qq.com/lab/</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://mp.weixin.qq.com/s/9AfyueVyOX_SVHEUwihoaA">黑果小兵 - Big Sur 安装教程</a></li><li><a href="https://github.com/flyfeng2002/FYQ-Hackintosh">Dell G7 7588 OC EFI</a></li><li><a href="https://github.com/1hbb/OpenIntelWireless-Factory">OpenIntelWireless-Factory</a></li><li><a href="https://zhuanlan.zhihu.com/p/20684620">有关 retina 和 HiDPI 那点事</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话说，最近苹果推出了基于 M1 芯片的 MacBook Air 和 MacBook Pro，以及新的 macOS Big Sur。本文将写写戴尔 G7 如何黑苹果尝鲜 &lt;del&gt;Big Sur&lt;/del&gt; Catalina，如果您是忠实的 Windows 粉和 Linux 粉，在看的过程中感觉到任何不适的话，可以随时右上角关闭网页。至于各操作系统之间的圣战，我们就安安静静地吃瓜就好了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://chee5e.space/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="黑苹果" scheme="https://chee5e.space/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>记一次手术</title>
    <link href="https://chee5e.space/an-operation/"/>
    <id>https://chee5e.space/an-operation/</id>
    <published>2020-11-27T01:23:44.000Z</published>
    <updated>2020-11-27T06:29:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次做手术是怎样一种体验呢？也许这篇文章会让你更多地了解「做手术」是怎么一回事。</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在码字之前，我其实还在纠结在博客中写这样一篇文章，到底有没有值得被看的意义。想了想还是写出来，一方面是我老是想写一些东西，等到想写的时候已经忘记了很多细节，然后就理直气壮地鸽了；另一方面是想分享下做手术是怎么一回事，也许能让大家更多地关注自身的身体健康(希望大家都健健康康~，An apple a day keeps the doctor away)。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在八九年之前，那会我大概就左耳听力下降了，具体原因是慢性分泌性中耳炎导致中耳里有积液，阻碍了声音的传播。这里简单说一下<span>慢性分泌性中耳炎</span>：因中耳腔内的负压力引致中耳发炎，使液体(血清)由发炎的黏膜表层流进中耳空间形成积水<a href="http://entific.com.hk/cn/middle-ear-effusion.html"><sup>[1]</sup></a>。</p><p>慢性分泌性中耳炎其实挺常见的，前期处理好基本就没问题，而我的情况是拖了很久，觉得也没影响生活就没在意了。18 年国庆那会我姐带我去她工作的医院做了一次 CT 和纯音域测试，然后做了一个鼓膜穿刺和咽鼓管吹张。虽然在耳朵和鼻子里打了局麻，但还是疼得眼泪流出来了，积液用针吸出来之后左耳突然就听到了，而且觉得非常吵(医院人多)。后面过了一周又听力下降了，就不了了之。</p><p>直到最近有时间才去医院看一看，两周前又做了一次鼓膜穿刺，好家伙，疼、是真的疼，但真的没啥用🤣。前几天去复查，拍 CT 主要是检查下有没有其他并发症(比如说感染到颅内就很不好了)，医生看了 CT 说住院吧，打全麻做个置管小手术能轻松好几年，今天住院、明天做手术、后天出院。想了会还是做个手术，自己也能舒服些耳鸣会消停些，最重要的当然是听力恢复。</p><hr><h3 id="术前"><a href="#术前" class="headerlink" title="术前"></a>术前</h3><p>可能大多数人都没做过手术，毕竟大家都健健康康的嘛。术前是有很多事情需要做的，先是去<span style="color:red;">办理住院手续</span>，预缴了3000 块。然后问了下能不能同省异地医保；办理住院的工作人员说没激活，得绑定下医院。打电话问家里医保局开通绑定，这医保还是我老妈给我缴的(估计北京那边工作缴的医保也不能在这边用，反正就是坑)。接着护士那边打电话说要去做个<span style="color:red;">核酸检测</span>，住院必须得有核酸检测(也要有陪同的家属)，又跑去门诊那边做核酸。大概 5 分钟就搞定了取号、缴费、咽拭子，花了 68 元算是很便宜了。然后回去护士站那边<span style="color:red;">测血压、打皮下药物过敏针、做心电图、胸片</span>。办理住院签了很多字，以及护士和医生问了两次过往病史、有无药物过敏等等，一阵折腾下来算是办好了入院，但没有床位… 然后又让我十点之后别吃东西，十二点之后别喝水，第二天不能吃东西也不能喝水(这对我这种周末不吃早餐的选手来说不算什么)。</p><h3 id="术中"><a href="#术中" class="headerlink" title="术中"></a>术中</h3><p>第二天一早过去，测血压、抽血，换病号服；过了一会有了床位，护士换好被套之类的就躺着等手术了。看病大概是很多时间都在等，那个主任医生也很累，坐门诊、回来给病人换药、下午和晚上都在做手术，记得有一次等到晚上九点多。等到下午两点多才叫我，于是跟着下去手术楼那层。先是问了些问题，然后给我戴手术帽和鞋套(手术室需维持无菌环境)，上吊针坐着等进手术室。没一会，就来了很多做手术的人，有手术做完推出来的，有推进去手术的。只有我望着角落里一排排的手术车，还在等待着全麻手术的到来。</p><p>过了一阵子，我被一个护士扶着进入手术室。手术室里面大概有五六个医生，然后让我自己爬上手术车，医生给我胸口、心脏周围贴了很多东西测心跳以及在手臂上装测血压的。然后把我全身用个毯子似的东西包起来，给我一个呼吸面罩叫我深呼吸，吸了几口人就慢慢睡过去，隐约觉得左手的静脉凉飕飕的进来了麻药，之后就睡着了和这个世界断开了连接。</p><p>手术半个小时就结束了。手术中发生的一切我都不知道。全麻苏醒有点痛苦，大概一个小时后五点多，听得见护士医生的对话。<span style="color:orange;">然后叫我睁开眼，脑子里有意识的想睁开眼就是睁不开，也说不出话，手脚动不了，什么也做不了</span>。这时候我的意识开始逐渐苏醒但打的肌松剂效果还在，所以怎么也睁不开眼睛、手脚想动也无法动弹、口腔里插着呼吸管也咽不下气，就像濒临死亡的感觉。</p><h3 id="术后"><a href="#术后" class="headerlink" title="术后"></a>术后</h3><p>过了一会手脚也能动，呼吸管也被抽出来了，和这个世界重新连接。护士轻声地说，送你回病房了哈。随后我姐就来接我回病房了，回去就躺着反正那感觉不好受，打着镇痛吊针和吸氧管。术后六小时，每两个小时帮我翻次身，前两个小时每隔半小时叫醒我，虽然想睡但是眯一下又睁开眼了。医生过来看了下说感觉怎么样，我说挺好的。随着时间过去，麻药也在新陈代谢过去。晚上十一点才喝了点粥、吃了几片馒头，但是不怎么饿。一直到第二天，头还有点恍惚，全麻好像会对神经系统有点损坏……但愿没啥事。<span style="color:#32f132;">我之前只以为麻醉医生打麻药就好了，后面自己看了下麻醉医生的东西，全程负责打麻药、监督病人心跳、血压、呼吸这些生理活动，手术完还得叫醒病人，手术多可能得到十一点，真的是很不容易。</span></p><p>术后第二天，医生说打个吊针就可以出院了，之后护士拿着输液袋这些东西给我，让我去输液室打消炎的吊针。吊针滴得很快，40~60 滴每分钟，就很快打完了，然后下午还得打一次吊针。我姐帮完办完出院手续和缴费，总共花了 8000 多，异地医保报了 2900, 社保真的社保啊！虽然鼓膜置管是个小手术，但还是上全麻了，主要是因为接近脑部。之前我还担心，手术中我侧翻身了会不会有危险，直到我体验了全麻苏醒才知道手术中我根本动不了因为打了肌松剂，是我想太多了。由于是微创手术，基本上只有鼓膜被切开、放置了一根管子减轻中耳负压<a href="http://www.dryahoo.org.tw/%E6%AC%A1%E7%B6%B2%E9%A0%81/%E8%A1%9B%E6%95%99%E8%B5%B0%E5%BB%8A/%E8%80%B3%E9%BC%BB%E5%96%89%E7%A7%91/%E4%B8%AD%E8%80%B3%E7%A9%8D%E6%B0%B4.htm"><sup>[2]</sup></a>，没有任何其他的创口。当然全麻还是少打，反正这几天脑袋都有点恍惚，全麻也有非常小概率的麻醉觉醒的可能性即「术中知晓」，这是很可怕的会给病人留下很深的阴影。</p><hr><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>出院后，左耳听力也恢复了很多，非常感谢我姐陪我走完手术全程(家人永远是支持你的)。写这么一篇文章主要是：</p><ul><li>想让大家了解手术到底是怎么一回事，一般手术不那么可怕，积极治疗配合医生；</li><li>麻醉科和麻醉医生也很重要和很辛苦(有些医院麻醉科是管 ICU 的)；</li><li>以及医保相关的一定要用上，能省好多钱。</li></ul><p>游泳一定要戴好耳罩等设备；洗澡洗头时别把水灌进耳朵里去；感冒和鼻炎也要警惕引起耳朵感染。当然不舒服得去看医生，配合医生检查，避免久病不医成疾。</p><p>希望大家都能身体健康、家人平安~ </p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>[1] : <a href="http://entific.com.hk/cn/middle-ear-effusion.html">http://entific.com.hk/cn/middle-ear-effusion.html</a></li><li>[2] : <a href="http://www.dryahoo.org.tw/%E6%AC%A1%E7%B6%B2%E9%A0%81/%E8%A1%9B%E6%95%99%E8%B5%B0%E5%BB%8A/%E8%80%B3%E9%BC%BB%E5%96%89%E7%A7%91/%E4%B8%AD%E8%80%B3%E7%A9%8D%E6%B0%B4.htm">耳鼻喉科 -&gt; 中耳積液</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次做手术是怎样一种体验呢？也许这篇文章会让你更多地了解「做手术」是怎么一回事。&lt;/p&gt;
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://chee5e.space/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="生活" scheme="https://chee5e.space/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>WSL 发行版迁移记录</title>
    <link href="https://chee5e.space/WSL-transfer/"/>
    <id>https://chee5e.space/WSL-transfer/</id>
    <published>2020-10-09T08:58:47.000Z</published>
    <updated>2020-12-05T08:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 WSL2 也有一段时间了，基本上可以告别占用大量资源和操作不便的虚拟机，但是 WSL 发行版和 Docker backend 默认的存储路径在 C 盘就很操蛋，一不小心就给你塞满了，对我这种强迫症患者来说非常难受。</p><a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>C 盘塞满和手机电量不足这事很相似，就像看着手机电量不足就想充满电不然没安全感，所以捣鼓了下 WSL 发行版从 C 盘迁移到其他盘上。 我用 WSL 发行版是 Ubuntu 18.04，另外 Docker Desktop For Windows 的 backend 后端守护进程也是跑在 WSL 上，光这两个就占用十几个 G 的空间了(C 盘危。使用 <code>wsl --list</code> 查看已安装的 WSL 发行版：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\vensi&gt;wsl --list</span><br><span class="line">适用于 Linux 的 Windows 子系统分发版:</span><br><span class="line">Ubuntu-18.04 (默认)</span><br><span class="line">docker-desktop-data</span><br><span class="line">docker-desktop</span><br></pre></td></tr></table></figure><p>可以看到机器上安装的 Ubuntu 发行版和 Docker 的 backend 后端守护进程，目标就是将它们迁移到其他盘。查看 <code>wsl --help</code> 可以看到 wsl 提供了 <code>--export</code> 和 <code>--import</code> 发行版的导入导出功能，更为方便的是 Github 上有一个项目管理 WSL 的全功能实用程序 <a href="https://github.com/DDoSolitary/LxRunOffline">LxRunOffline</a> ，我选择使用这个更为强大的工具来管理 WSL。</p><h3 id="安装-LxRunOffline"><a href="#安装-LxRunOffline" class="headerlink" title="安装 LxRunOffline"></a>安装 LxRunOffline</h3><p>你可以去 <a href="https://github.com/DDoSolitary/LxRunOffline/releases">LxRunOffline releases</a> 页面下载软件包安装，也可以使用 Windows 下的包管理器安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; scoop bucket add extras</span><br><span class="line"></span><br><span class="line">&gt; scoop install lxrunoffline</span><br></pre></td></tr></table></figure><p>这里我使用 scoop 安装，使用 <code>scoop list</code> 查看已安装的包：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/qZNLIMQdRPc4TBt.png"></p><h3 id="迁移-WSL-发行版"><a href="#迁移-WSL-发行版" class="headerlink" title="迁移 WSL 发行版"></a>迁移 WSL 发行版</h3><p>迁移之前，先执行下 <code>wsl --shutdown</code> 立即终止所有正在运行的分发和 WSL 2 轻型工具虚拟机，退出 Docker Desktop。查看已安装的 WSL 发行版：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; wsl --list </span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">&gt; LxRunOffline l</span><br></pre></td></tr></table></figure><p>接着将 Ubuntu 和 Docker backend 迁移到指定盘的目录下，开始迁移：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 迁移 Ubuntu</span></span><br><span class="line">&gt; LxRunOffline m -n Ubuntu-18.04 -d D:\WSL\Ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看迁移之后的位置</span></span><br><span class="line">&gt; LxRunOffline di -n Ubuntu-18.04</span><br><span class="line">D:\WSL\Ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迁移 Docker backend</span></span><br><span class="line">&gt; LxRunOffline m -n docker-desktop-data -d D:\WSL\docker-desktop-data</span><br><span class="line">&gt; LxRunOffline m -n docker-desktop -d D:\WSL\docker-desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看迁移之后的位置</span></span><br><span class="line">&gt; LxRunOffline di -n docker-desktop-data</span><br><span class="line">&gt; LxRunOffline di -n docker-desktop</span><br></pre></td></tr></table></figure><p>打开 Windows Terminal 进入 WSL Ubuntu-18.04，成功进入终端。打开 Docker Desktop，执行 Docker 相关的命令查看是否能正常运行：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/KEosPLMJRIiYglc.png"></p><p>浏览器访问 localhost 即可看到 Nginx 默认页面，迁移完毕，功能正常！</p><p>使用 LxRunOffline 还可以安装自定义发行版，以及备份/恢复、运行 WSL 发行版等功能，具体请自行探索吧 ~</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://sspai.com/post/61634">想安装更多 Linux 发行版？LxRunOffline 让 WSL 更好用</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 WSL2 也有一段时间了，基本上可以告别占用大量资源和操作不便的虚拟机，但是 WSL 发行版和 Docker backend 默认的存储路径在 C 盘就很操蛋，一不小心就给你塞满了，对我这种强迫症患者来说非常难受。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://chee5e.space/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="WSL" scheme="https://chee5e.space/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://chee5e.space/prejudice/"/>
    <id>https://chee5e.space/prejudice/</id>
    <published>2020-09-10T01:17:46.000Z</published>
    <updated>2020-09-13T13:35:04.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一个人讨厌你，会找无数理由来讨厌你</li><li>一个人喜欢你，也会找无数理由来喜欢你</li></ul><p>人痛苦的根源在于，轻易认同他人对自己的偏见。</p><p>永远不要因为别人只看到你的一面，就觉得自己不够好。也不要只看到别人的一面，就急于给别人贴标签。</p><p>赫拉利在《今日简史》里说，所有人都该负起责任，花些时间和精力找出自己的偏见所在。</p><p>沉下心来认识和理解一个人或一件事，谨慎的选择每一段关系。</p><p>我们才会在这浮躁得要死的世界里，活得更加平静、幸福、真实。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;一个人讨厌你，会找无数理由来讨厌你&lt;/li&gt;
&lt;li&gt;一个人喜欢你，也会找无数理由来喜欢你&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人痛苦的根源在于，轻易认同他人对自己的偏见。&lt;/p&gt;
&lt;p&gt;永远不要因为别人只看到你的一面，就觉得自己不够好。也不要只看到别人的一面，就急于给
      
    
    </summary>
    
    
    
      <category term="一言" scheme="https://chee5e.space/tags/%E4%B8%80%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>second anniversary</title>
    <link href="https://chee5e.space/second-anniversary/"/>
    <id>https://chee5e.space/second-anniversary/</id>
    <published>2020-09-07T01:25:08.000Z</published>
    <updated>2020-10-26T06:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客也搭建两年了，回过头看，真的是一件很有意义的事情：既能够记录一点东西，又能交到一些朋友。发的文章很少，内容质量也堪忧，也还是有人愿意与我交换友链。非常的幸运，也很感激能与大家相遇和相互关注。</p><a id="more"></a><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>要谈博客对于我的意义，那还得从以前的事情讲起。这也算是认真审视一下自己的过去吧，虽然有点难为情。</p><p>在我还在念高中的时候，也就是 11 年那会，那时候我沉迷于各种短篇文章，也看《读者》、《青年文摘》一类的杂志，里面有各种光怪陆离的故事吸引着我。学校也会订一些期刊，当我在《读写月报》上看到<a href="/griscent-backward/">「灰度倒走」</a>(⬅点击查看)这篇写高三日记的时候，立刻就记住了它的作者。说不上感同身受毕竟我那会离高考还有一两年的时间，有点儿远，但里面的一些话在当时及以后都让我体会到了一些东西。</p><hr><p>『深夜，看书累了，正要爬上床去，好久没见的冬留发来一条的信息：“我不知道你现在过着怎样的生活，我只觉得我现在的日子都过得没有盼头了。每天都是题题题，铺天盖地的卷子无尽无休。我无比想逃脱这样的日子，可又觉得或许这种时日还算是好的，我更害怕的是137天之后的日子，我憎恶事态的结局。或许是我信不过自己吧，眼看着别人一天到晚地念书，我却在这里患得患失，不想学又不能不学，不敢不学，因为每个人都在往前走，一个个忙碌地从我身边超过去，我该怎么办？该如何面对冷冷的学校，可怕的高考！我像是一只禁锢在围城里的鸟，飞出不去了，四周高高的全是城墙。我现在连吃个饭都不敢浪费太多的时间，也许就是一个中午的差距却有可能一个星期也补不回来。这日子真不是人过的！我现在唯一的快乐就只剩下看看SJ(手机)了……”<br>她的话让我有种“哐”的一记打到头的感觉，把我从终日无忧的状态拉回到现实中来。』</p><p>后来，我真的体会到了每天都是题题题，铺天盖地的卷子无尽无休的日子，每天都在质疑自己患得患失，看似忙忙碌碌实则碌碌无为。</p><hr><p>『前几天学校要求家长给孩子写一封信，封好交给班主任，这会儿典礼上发到我们各人手里。元瞳嘤嘤地哭着，不知是对我还是自言自语地说：“真不想成人呀！”我还笑她感情优裕，然而轮到自己读父母的信时，不禁也进入境况眼泪汪汪了。<br>妈妈说：“或许你的一生都很平淡，不断地摸索，不断地盲目，惘然于内心的途径该通往何处。但一定不要没有梦想，不要甘于平庸！梦想拥有巨大的能量，它会使你感觉到自身的愉悦和健康，使你在孤立的处境中，赢得更多的信任和融合。要快乐。要勇敢。要有爱。做自己喜欢的事，善待自己喜欢的人。』</p><p>我也体会到了迷惘，不知道内心那些情绪该怎么排解，以及逐渐认识到自己的生活一直都很平淡，但却怎么也不愿甘于平庸。大概每个人在小的时候都会认为自己是特别的那一个人，随着时间的推移慢慢发现其实自己也不过是芸芸众生中的一员(啊，要是真有凉宫春日在就不会那么无趣了吧)。</p><hr><p>之后，我找到了这篇文章作者的新浪博客(是的，那时候很多人还在新浪写博客)，以及看了很多其他人的博客，这种细腻的记录生活的方式算是日记的另一种体现吧。那时候的我，唯一的心灵寄托、排解情绪的方式大概是看博客和一些其他的琐碎文章。因为高中那会，身边没有父母，我也不爱社交，没有多少能交流的朋友；后面也开始在 QQ 空间写日志，从 12 年到 17 年，而后阵营也转移到了博客这种基本很少人关注的地方。</p><p>时间回到现在，以前看过的博客文章也大都被作者删除掉或者隐藏起来了，而新浪博客也半死不活着；取而代之的是新浪微博这种 140 字的微博客，信息流的输出也比传统的博客丰富不少，而那种长篇累牍的文章也几乎没多少人愿意写。微信公众号订阅推送机制，倒让我觉得只是单方面的被动接收信息流，无法更多的去了解推送信息的人。也有把公众号当博客平台用来记录生活的人，只是极少而已。</p><p>博客也搭建两年了，换了好几个主题，也加入了留言评论，写了两年的年终总结及一些很水的文章等等；加了很多友链，认识了不同的朋友，都是很棒的人。在收到留言评论的时候真的非常开心，因为我是在被关注着。我也会在空闲时间摸摸鱼，看看友链里的站点，了解下大家最近发生的事情和记录下的东西。就像是找回了以前刷新浪博客的那种感觉，我是在真正的认真去了解这个人，以及希望交流。当然，在如今的这个时代，博客已经日渐式微了，微博、短视频等占据了大多数人的大部分时间。互联网越是大众化，信息就越是繁杂，产生的电子垃圾就越多，而且社交环境也是泥沙俱下 ———— 好坏、性质不同的人或者事物混杂在一起。所以那些自建站点、坚持写博客的人就显得更难能可贵了(我当然不是在说自己啦（；´д｀）ゞ)，因为他们是真的在输出自己的看法和理解而且不嫌麻烦。</p><h3 id="近况"><a href="#近况" class="headerlink" title="近况"></a>近况</h3><p>今年，因为新冠病毒，外出得一直戴着口罩，也不知道自己是怎么熬过来的。现在地铁的人流量又恢复到之前的程度，好像给人一种事情就快要完结的感觉，看着每个人都戴着口罩又将我拉回了现实。上周六和朋友约着去电影院看了电影《信条》，放映室里座位分配成一个人隔着一个位置坐着，戴着口罩看电影还是有些不自在，真正放映了一会后就丝毫没有不自在了，电影还是得去电影院刷才能找到那种沉浸其中感觉的吧。看完电影之后就跑到对面的购物中心大楼里去吃羊蝎子了，大口吃肉、大口喝可乐的生活真是太棒了。</p><p>回家刷B站，首页推荐《bilibili 星访问》栏目采访《信条》剧组的视频，栏目组提问：如果你能时间逆流，你最想做什么事情呢？在电影里饰演男主的「约翰·大卫·华盛顿」带着坚定的眼神回答：阻止新冠病毒。我多么希望有一个人能够时间逆流回到过去做这件事，不管是谁都行。</p><hr><p>再过两个星期，我就要一个人住了，室友都准备离职另谋出路了，而我却没有好好想一想，做任何打算。最近工作很不在状态，工作上的事情也不好细说就此打住。不过工作之余做的一些气象可视化的东西呢倒是全都放 Github 仓库里公开了。有人给我发邮件了解更多的东西我也友好的回复了呢，也有人给项目打星和 fork ，总之能够尽绵薄之力帮助到别人就是很有意义的事情，但也仅限于此我并不打算在气象这方面花时间了，算是脱坑立了一个 flag 吧。</p><p>十一假期，会去上海见见同学，然后在那边玩一圈。明年的话，大概也会去上海工作，不过现在还说不准。</p><h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><p>博客也建站两年了，由于是基于 hexo 也渐渐摸到了前端和 Node 的一些东西，这让我对 Node 也有了一定的兴趣。博客的后续计划是有时间有想法就继续更着，不想写就鸽着，完全看心情。博客托管的阿里云服务器 ECS 明年二月份到期，续期也只有半年优惠，所以后面大概会放到 Github Pages 然后映射到一个新域名上。博客不止会写一些技术上的问题或者分享，也会记录一下平时发生的事情，因为生活也同样值得记录，更新的内容会基于下面四个方面：</p><ul><li>日常</li><li>阅读</li><li>编程</li><li>动漫</li></ul><p>日常会写一下去过的地方，发生的一些有趣的事情；阅读会写一些看过的书籍，最近在读一些不着边际的书；编程这个看情况更新(我实在太菜了ヽ(*。&gt;Д&lt;)o゜&gt;))，准备看一下 Node、libuv 学一下 C/C++ 了解更多关于操作系统和网络的东西，以及多了解 Java 工程化、微服务那一块；动漫就看下有没有发现有趣的番剧啦。当然，可能会鸽鸽鸽。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>希望大家都能身体健康、生活开心，欢迎来访 (๑•̀ㅂ•́)و✧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客也搭建两年了，回过头看，真的是一件很有意义的事情：既能够记录一点东西，又能交到一些朋友。发的文章很少，内容质量也堪忧，也还是有人愿意与我交换友链。非常的幸运，也很感激能与大家相遇和相互关注。&lt;/p&gt;
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://chee5e.space/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="两周年" scheme="https://chee5e.space/tags/%E4%B8%A4%E5%91%A8%E5%B9%B4/"/>
    
  </entry>
  
  <entry>
    <title>地球ぎ</title>
    <link href="https://chee5e.space/assugi/"/>
    <id>https://chee5e.space/assugi/</id>
    <published>2020-08-15T03:28:49.000Z</published>
    <updated>2020-10-26T06:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=614150&auto=1&height=66"></iframe><p>涙(なみだ)よりも 優(やさ)しい歌(うた)を<br>与其流泪，不如听优美的歌声</p><p>かなしみより そのぬくもりを<br>与其悲伤，不如拥抱那份温暖</p><a id="more"></a><p>世界(せかい)がそんなにも<br>虽然明白这个世界</p><p>簡単(かんたん)に変(か)わるとは思(おも)わないけど<br>不是那么简单就能改变的</p><p>静(しず)かに 闇(やみ)を 溶(と)かして<br>但还是想着去净化黑暗</p><p>歩(ある)いて 歩(ある)いてみようと思(おも)う<br>一步，一步地走下去</p><p>ゆっくりでも 近(ちか)づけるかな<br>就算缓慢，也能慢慢靠近</p><p>夢(ゆめ)のカケラ 大好(だいす)きな人(ひと)<br>梦镜的碎片和最喜欢的人</p><p>思(おも)い描(えが)いた 愛(あい)のカタチは<br>在脑海中描绘出爱的样子</p><p>ずっとずっと 探(さが)しつづけて<br>一直在不停地寻找着</p><p>あきらめる理由(わけ)を話(はな)すよりも<br>与其诉说放弃的理由</p><p>出来(でき)ることを数(かぞ)えるほうがいいよね<br>不如细数能做到的事</p><p>つまづくことがあって<br>有过许多挫折</p><p>振(ふ)り返(かえ)りそうになって<br>甚至想过回头</p><p>それでも それでも もう決(き)めたんだ<br>即便如此，即便如此，我还是决定了</p><p>あなたのために 出来(でき)ることなんて<br>为了你，我能做的事</p><p>たいしたことないかもしれない<br>或许不值一提</p><p>でもそれでも 触(ふ)れていたいよ<br>但是，但是，我还是想去触碰</p><p>かなしみより そのぬくもりを<br>与其悲伤，不如拥抱那份温暖</p><p>ゆっくりでも 近(ちか)づけるかな<br>就算缓慢，也能慢慢靠近</p><p>夢(ゆめ)のカケラ 大好(だいす)きな人(ひと)<br>梦镜的碎片和最喜欢的人</p><p>思(おも)い描(えが)いた 愛(あい)のカタチは<br>在脑海中描绘出爱的样子</p><p>ずっとずっと 探(さが)しつづけて<br>一直在不停地寻找着</p><p>グルグル廻(まわ)る 地球(ちきゅう)ぎ<br>咕噜咕噜旋转的地球仪</p><p>クルクル変(か)わる 時間(じかん)<br>咕噜咕噜流动的时间</p><p>世界(せかい)の果(は)てに<br>在世界的尽头</p><p>愛(あい)を喜(よろこ)びの先(さき)に<br>遇见爱情，在欢乐的地方</p><p>夢(ゆめ)を<br>实现梦想</p><p>ゆっくりでも 近(ちか)づけるかな<br>就算缓慢，也能慢慢靠近</p><p>夢(ゆめ)のカケラ 大好(だいす)きな人(ひと)<br>梦镜的碎片和最喜欢的人</p><p>思(おも)い描(えが)いた 愛(あい)のカタチは<br>在脑海中描绘出爱的样子</p><p>ずっとずっと 探(さが)しつづけて<br>一直在不停地寻找着</p><p>ららら…<br>啦啦啦…</p><p>涙(なみだ)よりも 優(やさ)しい歌(うた)を<br>与其流泪，不如听优美的歌声</p><p>かなしみより そのぬくもりを<br>与其悲伤，不如拥抱那份温暖</p>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=614150&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;涙(なみだ)よりも 優(やさ)しい歌(うた)を&lt;br&gt;与其流泪，不如听优美的歌声&lt;/p&gt;
&lt;p&gt;かなしみより そのぬくもりを&lt;br&gt;与其悲伤，不如拥抱那份温暖&lt;/p&gt;
    
    </summary>
    
    
      <category term="动漫迷" scheme="https://chee5e.space/categories/%E5%8A%A8%E6%BC%AB%E8%BF%B7/"/>
    
    
      <category term="saint seiya" scheme="https://chee5e.space/tags/saint-seiya/"/>
    
  </entry>
  
  <entry>
    <title>ツキアカリのミチシルベ</title>
    <link href="https://chee5e.space/tsukiakari/"/>
    <id>https://chee5e.space/tsukiakari/</id>
    <published>2020-08-10T14:09:17.000Z</published>
    <updated>2020-10-26T06:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=818316&auto=1&height=66"></iframe><p>答えのない毎日が ただ過ぎていく時間が<br>得不到答案的日子里 时间依然流逝如斯</p><p>これから先どうなるのだろう? わからない<br>此后应当何去何从? 我无从知晓</p><a id="more"></a><p>闇よりも深い夜の孤独に 惑わされてた<br>深邃幽暗的孤独之夜 迷惑不已</p><p>だれかに今気づいてほしい<br>此刻希望谁能注意得到</p><p>ここから逃げ出したいから<br>想从这里脱逃</p><p>窓から見える朝焼け 部屋に鳴り響く音<br>阳光照进窗口 屋内声响回荡</p><p>アラームに起こされて 薄暗い中 家飛び出すよ<br>无视黑暗中的危险 冲出这里</p><p>カバンの中には 何も変わらない平凡詰め込んで<br>无论如何改变 也不会有变化</p><p>そしていつもの場所へ<br>只有去向那地方</p><p>だれかが言った言葉が 気になって 惑わされて<br>在意他人言语的话 只会让自己更加迷惑</p><p>争いたくなんてないから 何も言えない<br>因为不想争论 所以相对无言</p><p>夢や理想はあるけれど 気持ちばかり先に行って<br>虽有梦和理想 却无力实现</p><p>現実がずっと後ろから ボクを見てる<br>只剩冰冷的现实</p><p>ねぇだれか教えて みんなそうなのかな?<br>谁能告诉我 大家都是这样吗？</p><p>今日が幸せなら それでいいと思えるって<br>今天的幸福 若能维持多好</p><p>幼いころには 確かにあったよ<br>童年之时 确实曾经拥有</p><p>夢を追いかけてた でもそれも遠い記憶<br>不断追寻梦想 即使那是遥远记忆</p><p>答えのない毎日が ただ過ぎていく時間が<br>得不到答案的日子里 时间依然流逝如斯</p><p>これから先どうなるのだろう? わからない<br>此后应当何去何从? 我无从知晓</p><p>ツキアカリのミチシルベ 雲を越えボクに届け<br>月光的指引 越过云端传达给我</p><p>進むべき道を照らしてよ 今日がどんなに壊れそうでも<br>照亮前进的道路 就算今天依然悲伤</p><p>何があっても 何があっても 信じてたいから<br>不论发生什么 也想去相信</p><p>あの日の遠い記憶 呼び覚ますから<br>那时遥远的记忆 渐渐被唤醒</p><p>忘れないでね 胸に刻みつけ<br>不要忘记 铭记心中</p><p>答えは自分の中に 必ずあるものだから<br>因为答案必定就在自己心中</p><p>あきらめないで 強く生きることをやめないで<br>不能死心 不要放弃生存的信念</p><p>悲しすぎて 前に進めない時でも<br>即便是在悲伤的难以前进之时</p><p>共に悩み歩んだぼくらに<br>我们共同迎接困苦 携手前行</p><p>風は吹く どこまででも<br>无论何时何地 微风无处不在</p>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=818316&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;答えのない毎日が ただ過ぎていく時間が&lt;br&gt;得不到答案的日子里 时间依然流逝如斯&lt;/p&gt;
&lt;p&gt;これから先どうなるのだろう? わからない&lt;br&gt;此后应当何去何从? 我无从知晓&lt;/p&gt;
    
    </summary>
    
    
      <category term="动漫迷" scheme="https://chee5e.space/categories/%E5%8A%A8%E6%BC%AB%E8%BF%B7/"/>
    
    
      <category term="黑之契约者" scheme="https://chee5e.space/tags/%E9%BB%91%E4%B9%8B%E5%A5%91%E7%BA%A6%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>Win10 Hyper-V 端口保留问题</title>
    <link href="https://chee5e.space/win10-hyperv-dynamicport/"/>
    <id>https://chee5e.space/win10-hyperv-dynamicport/</id>
    <published>2020-07-25T02:28:35.000Z</published>
    <updated>2020-12-05T12:07:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>WSL2 真香，但是由于 WSL2 需要开启 Hyper-V 功能，最近遇到了运行一些软件时，提示端口已被使用或者端口拒绝连接的错误。导致 1024 ~ 13977 间的一部分端口被 Hyper-V 保留，tomcat、IDEA 等程序跑不起来。</p><a id="more"></a><h3 id="端口无法使用"><a href="#端口无法使用" class="headerlink" title="端口无法使用"></a>端口无法使用</h3><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/2EIgscP6wJiz1Ya.png" alt="端口拒绝访问"></p><p>如上图所述，使用 hexo 预览博客网页时指定了 8080 端口，但是被拒绝访问端口了。不止 8080 端口，8005、8009 也都直接挂了，导致 tomcat 默认端口配置启动时，提示这些端口早已被使用，无法启动服务。于是，就去查看 8080 端口占用情况：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Irenj9CcJoR6D2s.png" alt="8080 端口占用情况"></p><p>可以看到内部地址没有查到 8080 端口的进程，图中显示的 8080 端口是外部地址的端口，并不是本地进程使用的端口。所以情况就是：某些程序提示端口拒绝访问或者端口早已被占用，但是使用命令查询端口占用情况时，却发现端口根本没有程序占用过。</p><p>迷茫ヽ(*。&gt;Д&lt;)o゜&gt;</p><p>搜索了半天「端口未占用 却无法使用」，返回的结果都是：如何查询端口占用，关闭占用端口的进程。我可去特么的吧。偶然间，看到了一条说 Hyper-V 保留端口的回答，而WSL2 又是基于 Hyper-V ，我意识到了事情并没有这么简单 —— 我特么搜索的关键字不对。于是，使用 「Hyper-V 端口占用」搜索，终于看到了一点曙光。</p><p>原来是开启 Hyper-V 后，系统会保留一部分端口给 Hyper-V 使用，而 Windows 默认的动态端口的范围是：[1024 ~ 13977]，所以很有可能 8080 等端口被 Hyper-V 保留了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 查看 Windows tcp 默认动态端口范围</span></span><br><span class="line">netsh int ipv4 show dynamicport tcp</span><br><span class="line"></span><br><span class="line">协议 tcp 动态端口范围</span><br><span class="line">---------------------------------</span><br><span class="line">启动端口        : 1024</span><br><span class="line">端口数          : 13977</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Hyper-V 保留的端口</span></span><br><span class="line">netsh interface ipv4 show excludedportrange protocol=tcp</span><br><span class="line"></span><br><span class="line">协议 tcp 端口排除范围</span><br><span class="line">开始端口    结束端口</span><br><span class="line">----------    --------</span><br><span class="line">  1026        1125</span><br><span class="line">  1226        1325</span><br><span class="line">  1326        1425</span><br><span class="line">  1426        1525</span><br><span class="line">  1526        1625</span><br><span class="line">  ....        8080</span><br><span class="line">  8081        ....</span><br><span class="line"></span><br><span class="line">  ....</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到 8080 确实被 Hyper-V 保留了…</p><h4 id="关于动态端口"><a href="#关于动态端口" class="headerlink" title="关于动态端口"></a>关于动态端口</h4><p>动态端口的范围从 1024 到 65535，这些端口号一般不固定分配给某个服务，也就是说许多服务都可以使用这些端口。只要运行的程序向系统提出访问网络的申请，那么系统就可以从这些端口号中分配一个供该程序使用。比如 1024 端口就是分配给第一个向系统发出申请的程序。在关闭程序进程后，就会释放所占用的端口号。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="重启或者重置端口"><a href="#重启或者重置端口" class="headerlink" title="重启或者重置端口"></a>重启或者重置端口</h4><p>都说重启能解决 99% 的问题，但是在 Hyper-V 保留端口这种情况下，还是得看人品和运气的；重启会重置端口保留范围，像我就重启了几次都还是端口被保留了(悲 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置端口</span></span><br><span class="line">netsh winsock reset</span><br></pre></td></tr></table></figure><p>使用命令重置端口的情况和重启差不多，都是看人品和运气。</p><h4 id="修改动态端口范围"><a href="#修改动态端口范围" class="headerlink" title="修改动态端口范围"></a>修改动态端口范围</h4><ol><li>关闭 Hyper-V<ul><li><code>CMD 管理员</code>下关闭 Hyper-V<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;dism.exe /Online /Disable-Feature:Microsoft-Hyper-V</span><br></pre></td></tr></table></figure></li><li>控制面板 –&gt; 程序和功能 –&gt; 启动或关闭 Windows 功能 –&gt; 取消勾选 Hyper-V </li></ul></li><li>修改动态端口范围<ul><li><code>CMD 管理员</code>下执行如下命令<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;netsh int ipv4 <span class="built_in">set</span> dynamicport tcp start=49152 num=16383 </span><br><span class="line">确定。</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;netsh int ipv4 <span class="built_in">set</span> dynamicport udp start=49152 num=16383 </span><br><span class="line">确定。</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者你也可以排除指定的某个端口，但其他端口可能还是会被保留而无法使用</span></span><br><span class="line">netsh int ipv4 add excludedportrange protocol=tcp startport=8080 numberofports=1</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li>查看端口情况 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\vensi&gt;netsh int ipv4 show dynamicport tcp</span><br><span class="line">协议 tcp 动态端口范围</span><br><span class="line">---------------------------------</span><br><span class="line">启动端口        : 49152</span><br><span class="line">端口数          : 16383</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>开启 Hyper-V <ul><li><code>CMD 管理员</code>下开启 Hyper-V<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All</span><br></pre></td></tr></table></figure></li><li>控制面板 –&gt; 程序和功能 –&gt; 启动或关闭 Windows 功能 –&gt; 勾选 Hyper-V </li></ul></li></ol><p>之后重启电脑就好了，端口又能正常使用了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.cnblogs.com/eelve/p/12679125.html">Hyper-V 和 IDEA 运行端口占用问题</a></li><li><a href="https://github.com/docker/for-win/issues/3171#issuecomment-459205576">Unable to bind ports: Docker-for-Windows &amp; Hyper-V excluding but not using important port ranges #3171</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WSL2 真香，但是由于 WSL2 需要开启 Hyper-V 功能，最近遇到了运行一些软件时，提示端口已被使用或者端口拒绝连接的错误。导致 1024 ~ 13977 间的一部分端口被 Hyper-V 保留，tomcat、IDEA 等程序跑不起来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://chee5e.space/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Win10" scheme="https://chee5e.space/tags/Win10/"/>
    
  </entry>
  
  <entry>
    <title>刺猬的优雅</title>
    <link href="https://chee5e.space/the-hedgehog/"/>
    <id>https://chee5e.space/the-hedgehog/</id>
    <published>2020-07-17T13:58:08.000Z</published>
    <updated>2020-12-05T12:07:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>我的父母很富有，家里很有钱，因此我和我姐姐也算是很富有。尽管如此，尽管我是如此幸运和富有。但长久以来，我知道自己人生的终点，便是金鱼缸，一个大人们把时间花费在像苍蝇往同一面窗户上乱撞的世界。</p><a id="more"></a><p>但是可以肯定的是，我是不会到鱼缸里去的。这是一个深思熟虑之后做出的决定，今年学期末，在我12岁生日的那一天，下一个6月16日，165天之后，我将会了结自己的生命。</p><p>不能因为有想死的心，往后就要像烂菜帮一样地混日子，重要的不是死，也不是在哪个年龄死，而是在死的那一刻，我们正在做什么。在谷口的漫画书中，主人公在攀登珠穆朗玛峰时死去，而我的珠穆朗玛峰是拍一部电影。一部揭示为什么生活是如此荒诞的电影，别人的生活，还有我的生活，若一切皆无意义，那么至少灵魂需要勇敢面对。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/p489353764.webp"></p><p>像鱼缸里的金鱼那样度过一生，并终结于塑料尸袋之中。</p><p>鱼缸中红金鱼理论的典型，一心想避免像她母亲那么神经质，并变得比她父亲更加优秀的年轻女孩，生命对她来说是一场永远的战争，必须要摧毁别人来达到胜利。</p><p>追逐繁星，不像缸中金鱼那样终结一生。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/p2243147106.webp"></p><p>当人们决定放弃生命，那是因为他们觉得，这样做合情合理，就像一次精美的过度，一次向着长眠的轻轻滑动。成年人特别不能接受死亡，然而这却是世间最平常的一件事。当做出的决定几乎不可能被理解时，我们需要做到万无一失。无法想象，某些人可能会用多快的速度，来阻止我们所坚守的计划。</p><p>我相信橡树超然独立之美，所以我也相信猫的超然独立之美。</p><p>米歇尔女士让我想起刺猬，浑身竖满尖刺，像一座真正的堡垒，但我认为，她和这些表面慵懒的小家伙一样，内心深处其实很细腻。性喜孤独，而且异乎寻常的优雅。</p><p>小津阳子，小津格朗的孙女。一个实力雄厚日本家族的唯一继承人，她将会放弃学业，嫁给一个家财万贯的银行家的儿子。进行了3天的戒毒治疗之后，在一成不染的家中，她将把四个孩子抚养成人。小津阳子最终会以离婚收场，变成抑郁成疾饮酒度日的亿万富婆。那我呢，我的命运写在脑门上了吗？我相信命运，所以我才想死去。但如果我们还可能成为我们尚未成为的自己呢？我们能不能无视命运的安排，活出真正的自己呢？</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/p2243145805.webp"></p><p>有人选择从窗户跳下去结束自己的生命，我觉得他们疯了，我讨厌疼痛。如果不能结束痛苦，那死亡又有何用？</p><p>不准猫出去。不准门房进来。</p><p>她没认出我。那是因为她从没见过您。</p><p>就像这样，一切嘎然而止。这就是死吗？再也见不到您爱的人再也见不到爱您的人。如果这就是死亡的话，那真和人们说的一样是个悲剧。</p><p>重要的不是死亡，而是人们死的那一瞬间在做什么。</p><p>我们都是孤独的刺猬，只有频率相同的人，才能看见彼此内心深处不为人知的优雅。我相信这世上一定有一个能感受到自己的人，那人未必是恋人，他可能是任何人，就像电影中的忘年之交：荷妮与芭洛玛。在偌大的世界中，我们会因为这份珍贵的懂得而不再孤独。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/p489351977.webp"></p><p>我们从来都是局限在自己根深蒂固的感知之中，却不能放眼看周遭的世界，而更严重的是，我们放弃认识他人，而认识的仅仅是我们自己，然而却无法在这些永恒的镜子上认清我们自己。如果我们认识到这点，意识到我们在别人眼里只看到了自己，我们是大漠中的孤影，也许我们可能会发疯吧。</p><p>像我这样一个一无是处的女孩，在富人的世界里奋斗，既无美貌也无惹人怜爱之处，既无往日辉煌又无雄心抱负，既非八面玲珑又非才华横溢，还没等尝试就败下阵来。我只是渴望一件事情：那就是希望别人能让我平静地度过此生，不要对我太苛刻，此外，我能每天花点时间，能够尽情满足自己的饥渴，足矣。 是否能把对于自己的希望寄托在别人身上？去期待别人不会太过苛刻地对自己。 或许只有拥有足够的力量，绝对的压倒性的力量，才能更…</p><p>好些人不能从思考中去了解是什么能让事物拥有内在的生命和气息，而是把一生的时间都花在讨论人和物，人就好像是机械的，而物就好像是没有灵魂的，然后凭借主观灵感去信口雌黄一番。 如果生活的脚步不是那么快，如果能有更多的时间思考，思考生命的意义，思考人与自然的关系，思考价值观的出入，人生会更有趣一些。 渐渐地我发现，周围的许多人不会思考，他们只是不断重复他人的观点来显示自己内心的独立。</p><p>人一开始只是求生存，然后又在一天晚上体会到一种享乐的愉悦感，所有因这种欲望而带来的虚荣心随即而至，它使得人类对单纯而高尚的东西不再抱有最初的幻想。</p><p>我们无法停住欲望的脚步，它赞美了我们，也谋杀了我们。欲望!它承载了我们，也折磨了我们。</p><p>人们相信追逐繁星会有回报，最终却像鱼缸里的金鱼一般了结残生。我思忖着如果从孩童时代就开始教育他们生命是荒诞不经的，那大概会容易些吧，虽然这样做可能会夺走孩童时期的美好时光，但是成人后却能获得大把光阴。至少，我们会免去一种创伤，身处鱼缸之中的创伤。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/p2243145475.webp"></p><p>生命或许便是如此吧：有很多绝望，但也有美的时刻。只不过在美的时刻，时间是不同于以前的。就好比是音符在时间之内永远打了一个圆括弧，一个休止符，而在这外面，则是＂曾经＂之中的＂永远＂。</p><p>也许，最令人愤怒和最令人挫败的不是失业，不是贫穷，也不是对未来的不知所措，而是没有文化的感觉，因为当人们加载两种不同的文化，两种不可调和的象征性之间时是多么的无所适从，如果连身处何地都不知晓的话，又如何生存呢？</p><p>聪明头脑能使成功的滋味变得苦涩，而平庸才会让人生充满希望</p><p>有时，成年人似乎会花一些时间坐在椅子上，思考着他们悲惨的一生。他们凭空叹息，就像总往同一个窗户上乱撞的苍蝇，他们摇晃、挣扎、虚弱，最终坠落，他们会扪心自问为何生活会让他们去他们不想去的地方。我讨厌这种虚假的自视清醒的“成熟”。</p><p>我们何必要在虚无飘渺的苍穹之中去寻找永恒呢?</p><p>如果你想拯救自己，还是先拯救别人吧，微笑或哭泣，这是命运180大转变。</p><p>伟大的作品是一种直观的形式，而这种形式在我们心中产生了一种超越时间的恰当感。</p><p>播种欲望的人必会受到压迫。</p><p>面对曾经，该做什么，如果不在隐藏的音符中，追寻永远。</p><p>与我家来往甚密的那些人全部走着同一条路：年轻时尝试使用他们的聪明才智得到回报，像榨取柠檬般获取知识、谋得精英职位，然后倾其一生都在愕然中思忖为什么这般费尽心思到头来却只落得毫无意义的人生。人们相信追逐繁星会有收获，而最终却像鱼缸里的金鱼一样了结终生。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/p2243145772.webp"></p><p>寺院青苔上的山茶花，京都山脉上的紫色青花瓷杯，这转瞬即逝的激情中所绽放的纯洁的美丽，不就是我们所渴望的嘛？属于西方文明的我们永远无法触及的嘛？</p><p>在人生的潮起潮落中仰慕永恒。</p><p>孤独而优雅，克制而情深。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的父母很富有，家里很有钱，因此我和我姐姐也算是很富有。尽管如此，尽管我是如此幸运和富有。但长久以来，我知道自己人生的终点，便是金鱼缸，一个大人们把时间花费在像苍蝇往同一面窗户上乱撞的世界。&lt;/p&gt;
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://chee5e.space/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="杂文" scheme="https://chee5e.space/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个自己的 Gitlab CI Runner</title>
    <link href="https://chee5e.space/gitlab-runner-in-docker/"/>
    <id>https://chee5e.space/gitlab-runner-in-docker/</id>
    <published>2020-07-04T11:53:00.000Z</published>
    <updated>2020-12-05T12:07:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>说起来博客使用 Travis CI 自动持续部署也一年多了，唯一的感受就是 CI 实在太方便了。正好最近工作的项目仓库都转到公司内部的 Gitlab ， 于是就想着能不能利用 CI 跑一些测试。</p><a id="more"></a><h3 id="Gitlab-CI-CD-简介"><a href="#Gitlab-CI-CD-简介" class="headerlink" title="Gitlab CI/CD 简介"></a>Gitlab CI/CD 简介</h3><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/cicd_pipeline_infograph.png" alt="Gitlab CI/CD"></p><p>如上图所示，当我们提交代码到 GitLab 仓库后，满足指定条件后就会触发 Pipeline 进行自动化构建、测试、发布等。</p><p>Pipeline 可以包含一个或多个 Jobs 任务，一个 Job 里面可以包含多个流程，如下载依赖、运行测试、编译、部署。Pipeline 什么时候触发，分为几个流程，每个流程做什么，是在项目的 .gitlab-ci.yml 文件中定义。</p><h4 id="GitLab-CI-CD-整体流程"><a href="#GitLab-CI-CD-整体流程" class="headerlink" title="GitLab CI/CD 整体流程"></a>GitLab CI/CD 整体流程</h4><p>GitLab CI/CD 的 Pipeline 具体流程和操作在 .gitlab-ci.yml 文件中申明，触发 pipeline 后，由 GitLab Runner 根据 .gitlab-ci.yml 文件运行，运行结束后将返回至 GitLab 系统。</p><h4 id="gitlab-ci-yml-文件"><a href="#gitlab-ci-yml-文件" class="headerlink" title=".gitlab-ci.yml 文件"></a>.gitlab-ci.yml 文件</h4><p>.gitlab-ci.yml 文件是一个申明式配置文件，放在项目的根目录下，用 stages 定义 GitLab CI/CD 流程有哪些阶段，每个阶段分别干什么。如果有更复杂的逻辑，还可以编写脚本文件，并在 .gitlab-ci.yml 文件执行它。</p><h4 id="GitLab-Runner"><a href="#GitLab-Runner" class="headerlink" title="GitLab Runner"></a>GitLab Runner</h4><p>GitLab Runner 是 CI 的执行环境，负责执行 gitlab-ci.yml 文件，并将结果返回给 GitLab 系统。Runner 具体可以有多种形式，windows、linux、docker 或 shell等等，在注册 Runner 时需要选定一个具体的   Executor。</p><h3 id="🎯最简单的-Gitlab-CI-Runner"><a href="#🎯最简单的-Gitlab-CI-Runner" class="headerlink" title="🎯最简单的 Gitlab CI Runner"></a>🎯最简单的 Gitlab CI Runner</h3><p>经过几天的摸鱼，已经大概摸清了 Gitlab CI Runner 的用法，期间也遇到了很多的坑，所以这篇文章就用来记录踩的坑吧。</p><p>由于公司内部的 Gitlab 没有提供公有的 Runner，所以想要把 CI 用起来还得自己动手。于是乎，我就去了解了下如何搭建自己的 Specific Runners 。这里在 gitlab.com 新建一个最简单的项目，只有一个 test.py 打印输出 hello world 的项目。</p><p>定位到 Gitlab 项目的 Settings =&gt; CI/CD =&gt; Runners 下，可以看到配置特定的 Runner, 总结下大致有这么几步：</p><ul><li>Install Gitlab Runner</li><li>Register Runner </li><li>Config gitlab-ci.yml</li><li>Start the Runner</li></ul><h4 id="Install-Gitlab-Runner"><a href="#Install-Gitlab-Runner" class="headerlink" title="Install Gitlab Runner"></a>Install Gitlab Runner</h4><p>首先，需要安装 Gitlab Runner，可以选择的平台也有很多：Windows、Linux、macOS、Docker 等等；看了下 Windows 下的安装步骤，我果断选择了 WSL 安装。 WSL 我安装的子系统是 Ubuntu 18.04 LTS，下载 gitlib-runner_amd64.deb 安装包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> For example, <span class="keyword">for</span> Debian or Ubuntu:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ curl -LJO https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_&lt;arch&gt;.deb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> For example, <span class="keyword">for</span> CentOS or Red Hat Enterprise Linux:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ curl -LJO https://gitlab-runner-downloads.s3.amazonaws.com/latest/rpm/gitlab-runner_&lt;arch&gt;.rpm</span></span><br></pre></td></tr></table></figure><p>下载好之后即可执行安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> For example, <span class="keyword">for</span> Debian or Ubuntu:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ dpkg -i gitlab-runner_&lt;arch&gt;.deb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> For example, <span class="keyword">for</span> CentOS or Red Hat Enterprise Linux:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ rpm -i gitlab-runner_&lt;arch&gt;.rpm</span></span><br></pre></td></tr></table></figure><p>See Install GitLab Runner manually on GNU/Linux: <a href="https://docs.gitlab.com/runner/install/linux-manually.html">https://docs.gitlab.com/runner/install/linux-manually.html</a></p><p>你也可以添加 Gitlab 官方仓库源，再通过包管理来安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> For Debian/Ubuntu/Mint</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> For RHEL/CentOS/Fedora</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> For Debian/Ubuntu/Mint</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ sudo apt-get install gitlab-runner</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> For RHEL/CentOS/Fedora</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ sudo yum install gitlab-runner</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>See Install GitLab Runner using the official GitLab repositories: <a href="https://docs.gitlab.com/runner/install/linux-repository.html">https://docs.gitlab.com/runner/install/linux-repository.html</a></p><h4 id="Register-Runner"><a href="#Register-Runner" class="headerlink" title="Register Runner"></a>Register Runner</h4><p>安装好 Gitlab Runner 之后我们就可以注册 Runner 绑定到我们的仓库，到 Gitlab 项目的 Settings =&gt; CI/CD =&gt; Runners，展开可以看到下图所示的内容：</p><ol><li>Install GitLab Runner</li><li>Specify the following URL during the Runner setup: <a href="https://gitlab.com/">https://gitlab.com/</a> </li><li>Use the following registration token during setup: xxxxxx_KVcfgoXH2hAc </li><li>Start the Runner!</li></ol><p>其中，第二三步的 URL 和 token，是在执行 Runner 注册命令中会用到的。执行如下注册命令：</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Linux注册Runner命令</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行注册命令</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ sudo gitlab-runner register</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入上图第二步的 URL </span></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">https://gitlab.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入上图第三步的 Token</span></span><br><span class="line">Please enter the gitlab-ci token for this runner</span><br><span class="line">xxxxxx_KVcfgoXH2hAc </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 runner 描述</span></span><br><span class="line">Please enter the gitlab-ci description for this runner</span><br><span class="line">gitlab runner for ci </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 tag 标签名称</span></span><br><span class="line">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class="line">ci</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择一个执行器，这里我们选择 docker</span></span><br><span class="line">Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:</span><br><span class="line">docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> gitlib-ci.yml 中未指定 images 时，采用的默认镜像</span></span><br><span class="line">Please enter the Docker image (eg. ruby:2.6):</span><br><span class="line">python:alpine</span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><p>相信上面的这些都难不倒你，关于 WSL 上的 Docker ，这里我们需要着重提一下。你只需要下载好 Docker Desktop 并安装好，安装好之后我们进入 settings 设置界面，进入到 General =&gt; Use the WSL2 based engine 开启；然后进入到 Resources =&gt; WSL INTEGRATION ，允许 Docker 访问 WSL2 ，并启用安装的发行版。也就是说，我们不用在 WSL 上再安装 Docker 了，只需要安装 Windows Docker 桌面版程序并让其在后台运行着即可。值得注意的是，如果你退出了 Docker 桌面版，WSL2 里也访问不到 Docker 服务了。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/PByJ72iWXeqnvIx.png" alt="use_the_wsl2_based_engine.png"></p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/FvIZhOPlXTLoQRu.png" alt="use_resources_wsl_integration.png"></p><p>See Docker Desktop WSL 2 backend: <a href="https://docs.docker.com/docker-for-windows/wsl/">https://docs.docker.com/docker-for-windows/wsl/</a></p><p>上面的 python:alpine 镜像是安装 Docker 后就默认存在的镜像，实际上 Gitlab Runner 默认是去拉 Docker Hub 的镜像创建容器来运行任务的，如何拉取本地自定义镜像运行任务在后面我们会提到，这里我们需要做的是把镜像名书写正确。</p><p>注册好了 Runner 之后，我们刷新 Settings 下的 CI/CD 页面，展开 Runners，可以看到我们的 Runner 注册成功了，并且 runner 描述 和 tag 标签也显示出来了：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/T9mOKzlVeBLDIkS.png" alt="Runner 注册成功"></p><p>你可以用 <code>gitlab-runner verify</code> 命令测试注册的 Gitlab-runner 和 gitlab 仓库是否能连通，出现图片上的小绿点就说明连通了。</p><h4 id="Start-the-Runner"><a href="#Start-the-Runner" class="headerlink" title="Start the Runner"></a>Start the Runner</h4><p>⚠ 注册完之后，记得运行 Gitlab-runner ，如果你未禁用 gitlab.com 提供的 Shared Runners ，且未运行注册的 gitlab-runner，则会跑 gitlab.com 提供的 Shared Runners；如果禁用了 Shared Runners，且未运行注册的 gitlab-runner ，CI 会一直处于 Pending 状态。</p><p><strong>注意：</strong>运行注册的 gitlab-runner 后，默认情况下不会运行没有 tag 的 job，也就是没有标记 tag 的代码提交，此时触发 Pipline， CI 会一直处于 Pending 状态，则需要去 Runners 编辑页面将「Run untagged jobs」选项勾选。</p><h4 id="Config-gitlab-ci-yml"><a href="#Config-gitlab-ci-yml" class="headerlink" title="Config gitlab-ci.yml"></a>Config gitlab-ci.yml</h4><p>接下来，我们用 Gitlab 的 WEB-IDE 给项目增加一个 gitlab-ci.yml 配置文件，它是 gitlab 项目用来和 Runner 交互的一个配置文件，我们添加如下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">image:</span> <span class="string">python:alpine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python</span> <span class="string">test.py</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 WEB-IED 页面提交更改，这个时候就会自动触发 CI Pipelines， 并执行相应的 Job，Gitlab Runner 监听到之后就会使用 Docker executor，并拉取指定的镜像 (gitlab-ci.yml 中未配置 images时，会拉取注册Runner 时输入的默认镜像) ，接着从 Gitlab 拉取项目的仓库源码代码检出 master 分支，执行 gitlab-ci.yml 中的 “step_script” 作业脚本。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/dNkmlphFgMREiew.png" alt="CI 执行日志信息"></p><h3 id="🚀Runner-拉取自定义-Docker-镜像"><a href="#🚀Runner-拉取自定义-Docker-镜像" class="headerlink" title="🚀Runner 拉取自定义 Docker 镜像"></a>🚀Runner 拉取自定义 Docker 镜像</h3><p>上面的例子过于简单了些，接下来我们来新建一个更复杂的 python opencv 项目，并且在 Docker 里安装 Gitlab Runner，Gitlab Runner 使用 Docker executor 拉取我们自定义的包含 python 运行环境和 opencv 库 的 Ubuntu 自制镜像。</p><p><a href="https://gitlab.com/vensing/TestCI">python opencv 项目</a>的结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/U6SZRnAQhiFHj2e.png" alt="python opencv 项目结构"></p><h4 id="Docker-安装-Runner"><a href="#Docker-安装-Runner" class="headerlink" title="Docker 安装 Runner"></a>Docker 安装 Runner</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker run -d --name gitlab-runner --restart always \</span></span><br><span class="line">  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure><h4 id="Docker-注册-Runner"><a href="#Docker-注册-Runner" class="headerlink" title="Docker 注册 Runner"></a>Docker 注册 Runner</h4><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Docker注册Runner命令</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 URL </span></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">https://gitlab.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 python opencv 项目的 Token</span></span><br><span class="line">Please enter the gitlab-ci token for this runner</span><br><span class="line">xxxxxx_yyyyyyyyyyy </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 runner 描述</span></span><br><span class="line">Please enter the gitlab-ci description for this runner</span><br><span class="line">gitlab runner for ci </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 tag 标签名称</span></span><br><span class="line">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class="line">ci</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择一个执行器，这里我们选择 docker</span></span><br><span class="line">Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:</span><br><span class="line">docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> gitlib-ci.yml 中未指定 images 时，采用的默认镜像</span></span><br><span class="line">Please enter the Docker image (eg. ruby:2.6):</span><br><span class="line">ubuntu-opencv:latest</span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><h4 id="自定义-Ubuntu-镜像"><a href="#自定义-Ubuntu-镜像" class="headerlink" title="自定义 Ubuntu 镜像"></a>自定义 Ubuntu 镜像</h4><p>从 Docker Hub 拉取 Ubuntu 镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜寻镜像</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker search ubuntu</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker pull ubuntu</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看镜像</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker images</span></span><br><span class="line"></span><br><span class="line">REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu-opencv                 latest              aba324b29fe7        3 hours ago         677MB</span><br><span class="line">gitlab/gitlab-runner          latest              54ba330cd824        3 days ago          373MB</span><br><span class="line">gitlab/gitlab-runner-helper   x86_64-6214287e     3fbba80323bd        4 days ago          57.2MB</span><br><span class="line">&lt;none&gt;                        &lt;none&gt;              bfb66eee5b87        4 days ago          89.5MB</span><br><span class="line">&lt;none&gt;                        &lt;none&gt;              3cb247d9cae4        4 days ago          108MB</span><br><span class="line">node                          12-alpine           06a4a7b5263d        2 weeks ago         89.3MB</span><br><span class="line">ubuntu                        latest              74435f89ab78        2 weeks ago         73.9MB</span><br><span class="line">python                        alpine              8ecf5a48c789        4 weeks ago         78.9MB</span><br><span class="line">alpine                        latest              a24bb4013296        5 weeks ago         5.57MB</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拉取的 ubuntu 是最新的版本，大概 73M ，接着我们使用这个镜像来运行一个容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用最新版本的 ubuntu 镜像运行容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 并进入交互式终端，这里加了 -d 后台运行，不会进入终端</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name 指定容器名称</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker run -itd --name ubuntu_v1 ubuntu:latest /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看正在运行的容器</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker ps </span></span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND               CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">c3715c64c0f3        ubuntu-opencv          &quot;bin/bash&quot;            3 hours ago         Exited (0) 3 hours ago                        ubuntu_v1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定容器名称 ubuntu_v1 进入后台运行中的容器，-i: 交互式操作。-t: 终端。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 未指定容器名称请使用 CONTAINER ID，如 ubuntu_v1 是 c3715c64c0f3 </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker <span class="built_in">exec</span> -it ubuntu_v1 /bin/bash</span></span><br><span class="line">root@c3715c64c0f3:/# </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于拉取的 ubuntu 镜像都是最简单的 BASE 镜像，空空如也 73M ，连 vim 都没有我可去你他么的吧，更别提自带些什么环境了。所以，我们需要先安装下 vim (没有 vim 怎么配置源…)，再去配置下 ubuntu 的源为国内的源，最后安装 python 和 python opencv 库。</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>容器环境安装</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 vim </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ apt-get install -y vim</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器的 linux 版本</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正确的姿势：</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ cat /etc/issue</span></span><br><span class="line">Ubuntu 20.04 LTS</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误的姿势(这样查到的是宿主机的系统，在我这是 WSL2的 linux 版本):</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ cat /proc/version  </span></span><br><span class="line">uname -a </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 ubuntu 源为清华源</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ mv /etc/apt/sources.list /etc/apt/sources.list.bak</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置清华源 see: https://mirrors.tuna.tsinghua.edu.cn/<span class="built_in">help</span>/ubuntu/</span></span><br><span class="line">vim /etc/apt/sources.list</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 python3</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ apt-get install -y python3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 pip3</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ apt-get install python3-pip</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 pip3 源 see: https://mirrors.tuna.tsinghua.edu.cn/<span class="built_in">help</span>/pypi/</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ pip3 config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 opencv 依赖</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ pip3 install wheel</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ pip3 install opencv-contrib-python</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决 opencv import cv2 ImportError: libgthread-2.0.so.0: cannot open shared object file: No such file or directory</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ apt-get install -y libglib2.0-0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决 ImportError: libSM.so.6: cannot open shared object file: No such file or directory</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ apt-get install -y libsm6 libxext6</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决 ImportError: libXrender.so.1: cannot open shared object file: No such file or directory</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ apt-get install -y libxrender-dev</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><p>配置完这些东西你肯定想骂人了，但还是请忍住，要骂看完了文章再骂吧。</p><p>最后我们新建一个 test.py 测试下 opencv 安装情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">print(cv2.__version__)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/iIXRz3bEymlOMD7.png" alt="ubuntu_v1_opencv.png"></p><p>耐心点安装完这些，一个包含 python 运行环境和 opencv 库 的 Ubuntu 容器环境就完成了。接着我们需要停掉容器，导出容器为 ubuntu_v1.tar 文件，再导入 ubuntu_v1.tar 文件为镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker stop ubuntu_v1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker <span class="built_in">export</span> ubuntu_v1 &gt; ubuntu_v1.tar</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker import ubuntu_v1.tar ubuntu-opencv</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker images</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后，我们可以看到 ubuntu-opencv 的镜像了(未指定版本会默认设置为 latest)，这里因为需要测试容器中 opencv 环境是否安装成功，所以干脆把这个测试容器的快照文件中导入为镜像了，这样就能保证不会出现问题。自制镜像推荐使用 Dockerfile 来制作。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/naipXYe9lE2TWt7.png" alt="ubuntu-opencv 镜像"></p><h4 id="gitlab-ci-yml-配置"><a href="#gitlab-ci-yml-配置" class="headerlink" title="gitlab-ci.yml 配置"></a>gitlab-ci.yml 配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定为注册 Runner 时设置的默认镜像，即自定义的 opencv 环境镜像</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">ubuntu-opencv:latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3</span> <span class="string">src/py/test.py</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3</span> <span class="string">src/py/cv.py</span></span><br></pre></td></tr></table></figure><h4 id="Girlab-Runner-拉取本地镜像"><a href="#Girlab-Runner-拉取本地镜像" class="headerlink" title="Girlab Runner 拉取本地镜像"></a>Girlab Runner 拉取本地镜像</h4><p>如果这个时候，我们去跑 CI，会出现如下错误：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/UykKjPw5MON68B3.png" alt="Job 错误"></p><div class="alert alert-danger">ERROR: Job failed: Error response from daemon: pull access denied for ubuntu-ci, repository does not exist or may require 'docker login' (docker.go:119:0s)</div><p>这是因为我们在 Docker 里的 gitlab-runner 未运行，项目会默认去找 Gitlab.com 提供的 Shared Runners，默认会去拉取公网上的镜像，公网上没有我们自制的这个 ubuntu-opencv 镜像就出错了。所以这里我们还是把 Gitlab.com 提供的 Shared Runners 禁用 (要想测试自己指定的 Runner 关掉 Shared Runners 吧)；禁用之后，如果我们的 gitlab-runner 未在运行，则 CI 会一直处于 pending 的状态。</p><p>所以我们需要在 Docker 里运行我们的 gitlab-runner 容器，由于 gitlab-runenr 默认去拉取公网上的镜像，所以还需要配置下 gitlab-runner 的配置文件，Docker 安装的 gitlab-runner 配置文件在 /srv/gitlab-runner/config/config.toml。设置 pull_policy 指定 Runner 拉取镜像的策略，有三种选项：</p><div class="panel panel-info">    <div class="panel-title">pull_policy策略</div>    <div class="panel-body">        <ul><li>pull_policy = “never”</li><li>pull_policy = “if-not-present”</li><li>pull_policy = “always”</li></ul>    </div>    </div><p>never 策略完全禁用镜像拉取。如果您将 Runner 的 pull_policy 参数设置为 never，那么用户将只能使用 Runner 所在的 Docker 主机上提取过的本地镜像。当使用 if-not-present 拉取策略时，Runner 将首先检查映像是否在本地存在。如果是，则使用图像的本地版本。否则，Runner 将尝试拉取镜像。always 是默认拉取策略 (未设置 pull_policy 执行默认拉取策略)，将确保始终拉取镜像。当使用 always 时，即使本地副本可用，Runner 也会尝试提取镜像。如果你希望拉取镜像时可以使用缓存就用 always 吧，它的拉取速度很快，因为所有的镜像层都被缓存了。</p><p>See Using the if-not-present pull policy: <a href="https://docs.gitlab.com/runner/executors/docker.html#using-the-if-not-present-pull-policy">https://docs.gitlab.com/runner/executors/docker.html#using-the-if-not-present-pull-policy</a></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">concurrent</span> = <span class="number">1</span>    </span><br><span class="line"><span class="attr">check_interval</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[session_server]</span></span><br><span class="line">  <span class="attr">session_timeout</span> = <span class="number">1800</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[runners]]</span></span><br><span class="line">  <span class="attr">name</span> = <span class="string">&quot;gitlab runner for ci&quot;</span></span><br><span class="line">  <span class="attr">url</span> = <span class="string">&quot;https://gitlab.com/&quot;</span></span><br><span class="line">  <span class="attr">token</span> = <span class="string">&quot;xxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">  <span class="attr">executor</span> = <span class="string">&quot;docker&quot;</span></span><br><span class="line">  <span class="section">[runners.custom_build_dir]</span></span><br><span class="line">  <span class="section">[runners.cache]</span></span><br><span class="line">    <span class="section">[runners.cache.s3]</span></span><br><span class="line">    <span class="section">[runners.cache.gcs]</span></span><br><span class="line">  <span class="section">[runners.docker]</span></span><br><span class="line">    <span class="attr">tls_verify</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">image</span> = <span class="string">&quot;ubuntu-opencv:latest&quot;</span></span><br><span class="line">    <span class="attr">privileged</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">disable_entrypoint_overwrite</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">oom_kill_disable</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">disable_cache</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">volumes</span> = [<span class="string">&quot;/cache&quot;</span>]</span><br><span class="line">    <span class="attr">shm_size</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">pull_policy</span> = <span class="string">&quot;never&quot;</span></span><br></pre></td></tr></table></figure><p>如果我们对 config.toml 这个配置文件做了修改，则需要重启 Docker 中的 gitlab-runner 来应用修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> ~ $ docker restart gitlab-runner</span></span><br></pre></td></tr></table></figure><p>做完了这些并确保 Docker 中的 gitlab-runner 容器在运行，提交下代码或者手动去触发 Piplines，就可以执行 CI，拉取我们在 Docker 中自制的 python 和 opencv 环境的镜像运行 gitlab-ci.yml 中的脚本任务了。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>最后请享受成功的乐趣吧，看下成功的 CI 任务图：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Ar5aydRb2Zl1kNC.png" alt="CI 任务图"></p><p>注册完 Gitlab-runner 之后，记得运行 Gitlab-runner 。如果你未禁用 gitlab.com 提供的 Shared Runners ，且未运行注册的 gitlab-runner，则会跑 gitlab.com 提供的 Shared Runners；如果禁用了 Shared Runners，且未运行注册的 gitlab-runner ，CI 会一直处于 Pending 状态。如果需要拉取本地自定义镜像，则还需要配置 config.toml 文件中的 <code>pull_policy</code> 规则。</p><p><strong>注意：</strong> Gitlab Runner 默认有效期是 90 天；保证你注册 Runner 的机器的 IP 为一个静态 IP，否则 IP 变了触发 Pipeline 后就找不到 Runner 了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://docs.gitlab.com/runner/install/linux-manually.html">Install GitLab Runner manually on GNU/Linux</a> </li><li><a href="https://docs.gitlab.com/runner/install/linux-repository.html">Install GitLab Runner using the official GitLab repositories</a></li><li><a href="https://docs.docker.com/docker-for-windows/wsl/">Docker Desktop WSL 2 backend</a></li><li><a href="https://docs.gitlab.com/runner/install/docker.html#option-1-use-local-system-volume-mounts-to-start-the-runner-container">local system volume mounts to start the Runner container</a></li><li><a href="https://docs.gitlab.com/runner/register/index.html#docker">To register a Runner using a Docker containe</a></li><li><a href="https://docs.gitlab.com/runner/executors/docker.html#using-the-if-not-present-pull-policy">Using the if-not-present pull policy</a></li><li><a href="https://zhuanlan.zhihu.com/p/69513606">花椒前端基于 GitLab CI/CD 的自动化构建、发布实践</a></li><li>项目地址：<ul><li><a href="https://gitlab.com/vensing/TestPyCI">https://gitlab.com/vensing/TestPyCI</a></li><li><a href="https://gitlab.com/vensing/TestCI">https://gitlab.com/vensing/TestCI</a> </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说起来博客使用 Travis CI 自动持续部署也一年多了，唯一的感受就是 CI 实在太方便了。正好最近工作的项目仓库都转到公司内部的 Gitlab ， 于是就想着能不能利用 CI 跑一些测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://chee5e.space/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="CI" scheme="https://chee5e.space/tags/CI/"/>
    
      <category term="docker" scheme="https://chee5e.space/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>网络抓包那些事</title>
    <link href="https://chee5e.space/network-bag-snatching/"/>
    <id>https://chee5e.space/network-bag-snatching/</id>
    <published>2020-06-21T09:46:00.000Z</published>
    <updated>2020-12-05T12:07:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近摸了几天鱼，给博客加了两个菜单页，ONE 每日一图和电影日历。这篇文章我想讲一下如何快乐的摸鱼🐟~</p><a id="more"></a><h3 id="也曾向往文艺的青年"><a href="#也曾向往文艺的青年" class="headerlink" title="也曾向往文艺的青年"></a>也曾向往文艺的青年</h3><p>摸鱼之前先来回忆下以前的事情。说起来，我在高中的时候就开始在 QQ 空间上写日志，最开始是看别人写日志，后面觉得光看别人写不过瘾，也就开始了自己写。当然，内容完全没有什么立意也没有主题和深度，当初竟然还能不嫌丢脸光明正大的发出来，以至于我现在将这些日志全部设置为仅个人可以查看。</p><p>随着岁月的无情摧残，我也已经从学校里的学生成长为不务正业的社畜摸鱼怪了。写日志的习惯倒是延续到了写博客文章，不过我已经不是那个向往文艺的青年了，我开始变得世俗起来，这又是另一回事了，有时间的话我还真想写写我自己。岁月无情的将一个曾经向往文艺的青年，变成了一个可悲可叹的摸鱼怪。</p><p>好了，回忆就先到这了。既然是向往文艺的青年，那肯定会接触一些文艺生活的信息啦。这里我想介绍下的是「ONE·一个」：</p><blockquote><p>App「一个」<br>每天只为你准备一张图片、一篇文字和一个问答<br>韩寒主编和监制 原《独唱团》主创成员共同制作<br>复杂世界里, 一个就够了. One is all.</p></blockquote><p>这是官网介绍的 slogan，看得出来确实是有文艺的人会下载的 APP。一个 APP 里，每天都会推送一张图片和一段图文的「每日图文」，有点像一言的感觉。我倒是蛮喜欢这种每日图文的方式，有时候这么一张图和一段文字会让我们从浮躁的生活中脱离出来看到生活其实还有诗和远方，然后再重新融入滚滚红尘。所以，我就想把 ONE 每日图文加到博客里，既方便自己阅读也能让更多的人看到。</p><h3 id="ONE-每日图文接口"><a href="#ONE-每日图文接口" class="headerlink" title="ONE 每日图文接口"></a>ONE 每日图文接口</h3><p>理由就是这么个理由，所以如何把每日图文的信息给抓到呢？</p><p>大概有这么几种方式：</p><ul><li>写个爬虫，每天爬  ONE 的每日图文； </li><li>谷歌一下，看看电脑网页端有没有暴露 API；</li><li>抓一下移动 APP 上的包，找出接口。</li></ul><p>由于，我用的是 Hexo 静态博客，没有服务端而我又不愿意花钱买服务器，就为了这么一个小功能就写爬虫太不轻量了，所以爬虫就砍掉吧 (其实是我不会写爬虫ww。</p><h4 id="控制台抓取接口地址"><a href="#控制台抓取接口地址" class="headerlink" title="控制台抓取接口地址"></a>控制台抓取接口地址</h4><p>作为程序员，当然得学会面向搜索引擎编程了，也很快就找到了ONE 网页端暴露的 API 接口。在 ONE 官网移动端就暴露了这么一个每日图文的接口：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/M9pUbR2zVx4q63I.png" alt="每日图文的接口"></p><p>调试当然得打开控制台啦，Chrome 也为我们提供了模拟移动设备的环境，点击控制台左上角的【device toolbar】图标就可以切换模拟移动设备访问网页了。很幸运，我们很快就找到了每日图文的网址 API，这是一个 XHR ajax 请求，带了一个<code>_token</code> 参数。在控制台中，找到该请求的 <code>Initiator</code> 栏查看 Request call stack。最后我们会找到该请求的发起位置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">One.token = <span class="string">&#x27;b15449f4a9c6a23f9e21ac1339c4b8e0b73767be&#x27;</span>;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> page = $(<span class="string">&#x27;#myPage_angOne_index&#x27;</span>);</span><br><span class="line">    One.listPage.init(page, <span class="string">&#x27;http://m.wufazhuce.com/one/ajaxlist/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个 <code>_token</code> 是随着 <a href="http://m.wufazhuce.com/one">http://m.wufazhuce.com/one</a> HTML 页面返回的；在第一次访问这个页面时，有一个 <code>Set-Cookie</code> 返回头，我们的 ajaxlist 请求的请求头需带上 <code>Cookie</code>，值就是刚才的<code>Set-Cookie</code> 返回的值，然后我们还得带上查询参数 <code>_token</code>。</p><p>我们可以在 <code>postman</code> 上测试下设置 <code>_token</code> 和 <code>Cookie</code> 后是否能正确访问到 API：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/2ZWTwJmerUnBkYp.png" alt="one_postman.png"></p><p>可以看到我们已经能通过接口拿到一组数据了，当天的数据 (最新一条数据) 位于数组索引 0 的位置。</p><h4 id="CloudFlare-反向代理接口地址"><a href="#CloudFlare-反向代理接口地址" class="headerlink" title="CloudFlare 反向代理接口地址"></a>CloudFlare 反向代理接口地址</h4><p>但是，我们还不能直接在我们的网站中发起 Ajax 异步请求调用这个 API，因为存在跨域问题。跨域问题我们可以使用 CloudFlare 的免费 Workers 功能反向代理 ONE 的 API 接口，同时设置下跨域请求头。设置反向代理时，需要发起两个请求，第一个请求的地址是 <a href="http://m.wufazhuce.com/one">http://m.wufazhuce.com/one</a> 页面，我们需要拿到第一次访问页面时，响应头的 <code>Set-Cookie</code> 返回值和 HTML 页面脚本中的 <code>_token</code> 值。第二个请求的地址是 <a href="http://m.wufazhuce.com/one/ajaxlist/">http://m.wufazhuce.com/one/ajaxlist/</a> ，设置请求头 <code>Cookie</code> 的值为刚刚拿到的<code>Set-Cookie</code> 返回值，以及带上 <code>_token</code> 查询参数。</p><p>这样的一通操作下来，我们就能在我们的网站中拿到 ONE 每日图文的数据了。具体的代码参见：<a href="https://github.com/vensing/OneToday/blob/master/OneTodayWorker.js">OneTodayWorker.js</a> 借鉴和参考了 disqusjs 官方提供的 CF 反代示例， ONE 每日图文使用方法查看 <a href="https://github.com/vensing/OneToday">OneToday</a> 仓库的 README 文件。</p><p>由于，第二种方式就能实现我所需的功能，所以移动设备抓包获取接口地址就没考虑了ww。</p><h3 id="豆瓣电影日历"><a href="#豆瓣电影日历" class="headerlink" title="豆瓣电影日历"></a>豆瓣电影日历</h3><p>说起来，豆瓣也经历过 14 个年头的站点了，而豆瓣也好像一直没有令人印象深刻的 slogan ，倒是豆瓣电影和书影音档案成为了相关内容的百科全书。豆瓣大约在 2017 年推出了 <a href="https://book.douban.com/subject/34775984/">『豆瓣电影日历』</a> 纸质日历，每天推荐一部高分电影，并且在 IOS 的 Today Widget 上有电子版『豆瓣电影日历』和纸质日历同步，这个功能很多人并不知道。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/GtdAbWJIpnmBlYQ.jpg" alt="豆瓣电影日历"></p><p>豆瓣电影日历和 ONE 每日图文的展示形式类似，以一张图一段文字每天推荐一部高分电影。那么能不能像 ONE 每日图文那样抓取接口地址呢？</p><h4 id="IOS-上使用抓包软件"><a href="#IOS-上使用抓包软件" class="headerlink" title="IOS 上使用抓包软件"></a>IOS 上使用抓包软件</h4><p>经过一番折腾，我排除了网页端暴露 API 接口的方式，爬虫也没有办法，因为只有在 IOS 上才有豆瓣电影日历。所以，问题就来到了如何在 IOS 上抓包的问题。IOS 上有很多款抓包软件，其中比较出名的两款是：</p><ul><li>Stream，免费，功能也完善</li><li>Thor，付费且功能完善</li></ul><p>这两款软件的安装步骤都基本一致：</p><ol><li>安装证书：设置 &gt; 通用 &gt; 描述文件 &gt; 进入描述文件详情 &gt; 安装</li><li>信任证书：设置 &gt; 关于本机 &gt; 证书信任设置</li></ol><p><strong>注意：</strong> 请做好第二步，信任证书，否则使用 Stream 抓取走 https 协议的站点时，会报kCFStreamErrorDomainSSL 错误，Thor 也一样要信任证书。我就是在这边被坑了一阵子 (</p><p>抓包软件的原理如下：</p><blockquote><p><strong>HTTPS 解析原理</strong><br>Thor 实现的 HTTPS 解析方式是 MiTM （中间人欺骗）：需要用 Thor SSL CA 根证书针对特定域名生成叶子证书，用此叶子证书跟客户端（请求发起方）通信，并成功解析流量。<br>客户端（请求发起方）如果做了证书本地验证（即验证跟它通信的叶子证书是否是它原来商定好的证书），那么 Thor 生成的叶子证书跟客户端之间的 SSL 连接将会失败，自然就也解不了这类流量。<br>总之 HTTPS MiTM 不是万能的，望知晓。</p></blockquote><p>所以，Thor 和 Stream 都需要设置开启系统 VPN 代理功能，才能进行抓包，这就意味着你无法在手机上一边开启VPN 科学上网一边使用 Thor 或 Stream  来进行抓包。Thor 并非万能，只工作在系统 HTTP 层: 不支持非 HTTP 流量(TCP, UDP)及不经过系统 HTTP 代理的流量。</p><p><a href="https://github.com/PixelCyber/Thor/blob/master/README-zh-Hans.md">点此查看 Thor 使用帮助</a>，特别感谢 <a href="https://blog.badapple.pro/">东方幻梦</a> 同学给我 Apple ID 白嫖 Thor。</p><h4 id="抓取电影日历接口"><a href="#抓取电影日历接口" class="headerlink" title="抓取电影日历接口"></a>抓取电影日历接口</h4><p>抓包这个操作，其实很简单，先把其他软件从后台切出防止不必要的网络请求。然后，进入软件首页点击按钮开启抓包，iPhone 切到 Today Widget 小组件页面(需先开启豆瓣每日电影 Widget )即可，返回抓包软件，即可看到抓到的请求。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Qfmv3nykSt6xVHs.jpg" alt="抓包结果——请求头"></p><p>最重要的是请求头和请求行，我们可以在 <code>Postman</code> 上，输入上述请求头及请求地址和查询参数：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/dgLZTvyn47QzGCe.png" alt="Postman测试接口成功"></p><p>请求头，按抓取的请求头设置即可，查询参数中我们只需要替换 <code>date</code> 参数即可；<code>_ts</code> 是时间戳和 <code>_sig</code> 签名应该是对应关系所以可以不用管。返回头中 Cookie 的过期时间貌似设置的是不过期，最理想的情况是我们使用抓取到的请求头和查询参数配置我们自己的请求即可，需要替换的只是 <code>date</code> 日期。而 Cookie 和 签名这些是否会随着时间改变这些也无从验证(按道理是不会变的)，没办法别人的接口又没公开，只能这么干啦。</p><h4 id="反向代理电影日历接口"><a href="#反向代理电影日历接口" class="headerlink" title="反向代理电影日历接口"></a>反向代理电影日历接口</h4><p>和 ONE 每日图文一样，我们还不能直接在我们的网站中发起 Ajax 异步请求调用这个 API，因为存在跨域问题。这里同样可以使用 CloudFlare 的免费  Workers 功能反向代理 API 接口，同时设置下跨域请求头和查询参数。</p><p>关于代理的配置，比  ONE 每日图文的配置还要简单，因为电影日历可能会涉及到版权问题，所以这里的反向代理代码就不公开了。因为豆瓣的公共 API 都下线了，所以现在都需要加上 apikey，个人使用应该也没啥大碍。</p><p>还有一个接口返回的图片 url 在博客网站上出现 403 防盗链的问题，这里我使用了 <a href="https://images.weserv.nl/?url=">https://images.weserv.nl/?url=</a> 提供的服务进行反代解决。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>可以在本站导航栏上的 <code>One 图文</code> 和 <code>电影日历</code> 菜单项查看，放下效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/AE1HZaONsXVyrf6.png" alt="ONE 每日图文"></p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/3PXlrJeR7j9oZnd.png" alt="豆瓣电影日历"></p><p>这两个接口都只在个人博客使用，方便查阅每日更新，不用于商业或者其他用途。如有侵权，请联系我删除。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.jianshu.com/p/e9617107b748">图文 - 「ONE · 一个」 官方API分析</a></li><li><a href="https://github.com/idawnlight/disqusjs-proxy-cloudflare-workers/blob/master/worker.js">disqusjs CF Workers  反代示例</a></li></ul><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>感谢 <a href="cloudflare.com">cloudflare.com</a> 提供的免费 Worker 服务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近摸了几天鱼，给博客加了两个菜单页，ONE 每日一图和电影日历。这篇文章我想讲一下如何快乐的摸鱼🐟~&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客开发" scheme="https://chee5e.space/categories/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="抓包" scheme="https://chee5e.space/tags/%E6%8A%93%E5%8C%85/"/>
    
      <category term="接口" scheme="https://chee5e.space/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>永远的MAYDAY，永远的五月天</title>
    <link href="https://chee5e.space/may_day/"/>
    <id>https://chee5e.space/may_day/</id>
    <published>2020-06-01T13:35:00.000Z</published>
    <updated>2020-12-05T12:07:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>「来到鸟巢花了多久的时间？有人比较快，20分钟。有人比较久一点，两个小时。我也知道有很多人从很远的地方坐火车来，搭了三天。但是，我要告诉你们，五月天踏上鸟巢花了十三年。」</p><a id="more"></a><p>从 1999 年正式组成乐团「五月天」到 2012 年鸟巢十万人演唱会，五月天他们用了十三年。从最开始的阿信、怪兽、石头、玛莎组成的四人乐团「So Band」到冠佑加入后的 「五月天」。从 1999 年正式出道到 2001 年乐团各成员因服兵役休团，2003 年复出到 2020 年，五月天走过了21年。</p><p>而在今年 2020年的5月31号，在每年5月给大家唱歌的日子里，五月天带来了线上演唱会——<strong>MAYDAY 2020 LIVE IN THE SKY 线上演唱会</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/74qPhZ1jdeQBTI6.jpg" alt="MAYDAY 2020 LIVE IN THE SKY 线上演唱会"></p><p>其实，我也是昨晚八点多听到朋友提到这件事，才后知后觉地打开浏览器。然后，听到阿信在唱「突然好想你」，我第一次正儿八经地听五月天的歌是在 DVD 上放 「突然好想你」的 MV ，真是奇妙的感觉。 </p><p>我和大多数人一样，并不是很清楚五月天一路走来的种种，也只是今天才去看了他们的历程；但我为什么一听到线上演唱会就立马去听了呢？大概只是因为他们在纯粹的做音乐、唱歌，我也只是在纯粹的听他们的歌，不需要其他的东西来连接，唯一的连接只是他们的歌。</p><p>「我不是很会唱歌的主唱，不是很会写词的作词人，能有今天，承蒙大家的喜欢。」阿信的这句话可能真不是谦虚，而是当时主唱走了之后，其他四个人给出他做主唱的理由令他无法反驳：“你吉他玩得最差，贝斯弹得最差，鼓也敲得最差，只能当主唱。” 于是阿信就这样做了主唱，时间往前推一点，念高中时参加合唱团的选拔中，他只唱出了三个音节，立马就被老师刷掉了：“你不行啦！” </p><p>一路走来，别的乐团有的因服兵役或者其他原因解散了，有的已不温不火，只有五月天从没有冷场；大概真正纯粹的音乐是永远不会失去魅力的——音乐带给人的影响。</p><iframe id="spkj" src="//player.bilibili.com/player.html?aid=370819192&bvid=BV1dZ4y1p7za&cid=195045170&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=100%> </iframe><script type="text/javascript">  document.getElementById("spkj").style.height=document.getElementById("spkj").scrollWidth*0.76+"px";</script><blockquote><p>无数场演唱会以后，站在鸟巢体育场的舞台中央的五个40多岁的大叔，和当年北京无名高地为30个观众唱歌的青年，和当年在炸鸡店为了免费炸鸡唱歌的少年，和如今从公司拿出500万捐给武汉的五月天，都是一样。我们每个人，也都逃不过岁月与光阴。可有些人始终有少年般纯真的心。他们叫五月天。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/AM6e9N8onaEdSTB.png" alt="最美的愿望，一定最疯狂"></p><p>关于五月天的音乐我只想说这些，了解更多关于五月天的内容，请访问下面的两个参考链接。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://baike.baidu.com/tashuo/browse/content?id=feb217783ae130baa353be03&lemmaId=17011&fromLemmaModule=list">五月天所属公司捐500万：那群快50岁的老男孩，依旧值得爱</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%BA%94%E6%9C%88%E5%A4%A9">五月天wiki</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「来到鸟巢花了多久的时间？有人比较快，20分钟。有人比较久一点，两个小时。我也知道有很多人从很远的地方坐火车来，搭了三天。但是，我要告诉你们，五月天踏上鸟巢花了十三年。」&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱音乐" scheme="https://chee5e.space/categories/%E7%88%B1%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="五月天" scheme="https://chee5e.space/tags/%E4%BA%94%E6%9C%88%E5%A4%A9/"/>
    
  </entry>
  
  <entry>
    <title>Vue + SpringBoot 的几种部署方式</title>
    <link href="https://chee5e.space/vue_develop/"/>
    <id>https://chee5e.space/vue_develop/</id>
    <published>2020-05-22T07:41:00.000Z</published>
    <updated>2020-10-26T06:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端工程化及 React、Angular、Vue 等框架逐渐成为新的前台页面展示的解决方案后，前端页面逐渐摆脱了「套模板」的开发方式，真正的成为了一个工程项目，也引入了构建和编译、打包这些项目步骤。本文将简单阐述 Vue + SpringBoot 项目的几种部署方案。</p><a id="more"></a><h3 id="有哪些部署方案-？"><a href="#有哪些部署方案-？" class="headerlink" title="有哪些部署方案 ？"></a>有哪些部署方案 ？</h3><p>前端项目在经过 webpack 编译 (babel转译) 打包转为浏览器可以识别的  js  代码和  html 、css 等静态资源之后，就可以等待部署发布了。</p><p>结合前段时间写的一个 Vue + SpringBoot 项目，我在部署的时候尝试了以下几种方式：</p><ol><li>Vue + SpringBoot 打成 jar 包进行部署；</li><li>Vue + SpringBoot 打成 war 包进行部署；</li><li>Vue 项目和 SpringBoot 项目都单独部署；</li><li>容器部署 ( 这就涉及到知识盲区了，逃 )</li></ol><p>下面将对以上的前三种部署方式进行简单地阐述。PS：本文仅仅是实验性质的尝试，仅供参考，关于跨域问题已在后端项目配置好，这里不赘述。</p><hr><h3 id="Vue-SpringBoot-以-jar-包部署"><a href="#Vue-SpringBoot-以-jar-包部署" class="headerlink" title="Vue + SpringBoot  以 jar 包部署"></a>Vue + SpringBoot  以 jar 包部署</h3><p>采用 Vue + SpringBoot 打成  jar 包进行部署，我们需要先将 Vue 项目进行编译打包成静态资源，再把这些静态资源复制到 SB 项目的 static 静态资源文件夹下，记住：你需要对这些静态文件的访问权限都放行(前后端分离会采用 token 校验权限)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity(debug = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfigure</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 解决静态资源被拦截的问题</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/fonts/**&quot;</span>, <span class="string">&quot;/images/**&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/favicon.ico&quot;</span>, <span class="string">&quot;/index.html&quot;</span>, <span class="string">&quot;/window.config.js&quot;</span>);</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再执行 <code>mvn package -Dmaven.test.skip = true</code> 把 SB 项目打成  jar  包。因为打成 jar 包后会内嵌 tomcat，所以我们只需再执行 <code>java -jar xxx.jar</code> 即可运行我们的项目，最后输入访问地址：ip:port/index.hmtl 即可访问我们的 Vue 单页应用啦。</p><p>你可能会对上面的放开的 <code>window.config.js</code> js 资源感到疑惑？实际上这个 js 是我们给单页应用注册的全局配置变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.__config = &#123;&#125;</span><br><span class="line"><span class="built_in">window</span>.__config.VUE_APP_BASE_API = <span class="string">&#x27;http://localhost:7777/&#x27;</span></span><br><span class="line"><span class="built_in">window</span>.__config.VUE_APP_OAUTH_userAuthorizationUri = <span class="string">&#x27;http://xxxxx/oauth/authorize&#x27;</span></span><br><span class="line"><span class="built_in">window</span>.__config.VUE_APP_OAUTH_redirect_uri = <span class="string">&#x27;http://xxxxx/ssologin&#x27;</span></span><br><span class="line"><span class="built_in">window</span>.__config.VUE_APP_OAUTH_accessTokenUri = <span class="string">&#x27;http://xxxxx/oauth/token&#x27;</span></span><br><span class="line"><span class="built_in">window</span>.__config.VUE_APP_OAUTH_userInfoUri = <span class="string">&#x27;http://xxxxx/me&#x27;</span></span><br></pre></td></tr></table></figure><p>以下代码是判断是否是开发环境，开发环境直接读取 <code>.env.development</code> 文件中的配置变量，生产环境下我们不把配置变量写到<code>env.production</code>，而是单独写到一个外部 window.config.js 里，记住你需要在 index.html 中手动引入或者自动注入这个 js，以根路径地址的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断一下在开发环境使用vue配置的环境，生产环境要后面可以改的，所以生产环境从外部js取值</span></span><br><span class="line"><span class="keyword">const</span> userAuthorizationUri = process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? process.env.VUE_APP_OAUTH_userAuthorizationUri : <span class="built_in">window</span>.__config.VUE_APP_OAUTH_userAuthorizationUri</span><br><span class="line"><span class="keyword">const</span> redirect_uri = process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? process.env.VUE_APP_OAUTH_redirect_uri : <span class="built_in">window</span>.__config.VUE_APP_OAUTH_redirect_uri</span><br><span class="line"><span class="keyword">const</span> accessTokenUri = process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? process.env.VUE_APP_OAUTH_accessTokenUri : <span class="built_in">window</span>.__config.VUE_APP_OAUTH_accessTokenUri</span><br><span class="line"><span class="keyword">const</span> userInfoUri = process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? process.env.VUE_APP_OAUTH_userInfoUri : <span class="built_in">window</span>.__config.VUE_APP_OAUTH_userInfoUri</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你把这些变量写入 <code>.env.production</code> ，那么一旦你更改了这些变量你又得重新去打个包，我可去他么的吧。实际上，也用不着重新打包 ，你可以去 /dist/js 目录下的 js 文件里来查找所有这些变量然后改回来，但这也非常容易出错。</p><p>当然一些重要的配置变量 ( 比如 secret )，你最好不要写在 window.config.js 里，你应该写到 .env.production 文件里然后使用 process.env.VUE_APP_client_secret 读取变量加密下。</p><p>关于「运行时环境变量 —— window.config.js」请参考：<a href="https://aisensiy.github.io/2017/07/07/runtime-env-for-spa/">为 Single Page App 提供运行时环境变量</a></p><p>关于「.env.production、.env.development  环境变量和模式」请参考：<a href="https://cli.vuejs.org/zh/guide/mode-and-env.html">Vue-CLI 环境变量和模式</a></p><hr><h4 id="干掉-hash"><a href="#干掉-hash" class="headerlink" title="干掉 # hash"></a>干掉 # hash</h4><blockquote><p><code>vue-router</code> 默认 hash 模式 —— 使用 URL 的 hash ( /#/path 模式 ) 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。<br>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。</p></blockquote><p>Vue-CLI 官网给我们提供了另外一种路由模式：history，使用history模式时，浏览器地址栏就不会有很丑的 # 号了。当然官网也说了：玩好这种模式 ，你需要在服务端增加一个覆盖所有情况的 URL 候选资源，匹配不到静态资源就返回我们的 <code>index.html</code>，这个页面就是我们的单页应用页面。</p><p>那么 SB 项目想要配合 Vue 使用 history 模式在浏览器地址栏显示正常的 URL 应该怎么做呢？</p><h5 id="0x01-Vue-Router-配置"><a href="#0x01-Vue-Router-配置" class="headerlink" title="0x01 Vue-Router 配置"></a><strong>0x01 Vue-Router 配置</strong></h5><p>首先，Vue-Router 得开启 history 模式和配置 base 路由基路径：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  base: <span class="string">&#x27;/vue&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">component</span>: NotFoundComponent &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。</p><p><strong>注：</strong>  vue.config.js 里的 <code>publicPath</code> 决定 js、css 等静态资源打包之后的引入路径，如果打包后 dist 目录的 js、css 路径放在后台项目的 <code>static</code> 目录下，则 publicPath 直接写 ‘/’ 根路径即可，不要和 Vue-Router 配置的 base 路径搞混淆了。如果你想和 base 路径  ‘/vue’ 保持一致，你需要将 js、css 等静态资源放到 static/vue/ 目录下。</p><p>‘Uncaught SyntaxError: Unexpected token &lt; ‘ 错误是由于请求的 js、css 等静态资源路径不对，导致返回的内容是  html 页面，浏览器也就无法正确解析了。</p><h5 id="0x02-后端配置"><a href="#0x02-后端配置" class="headerlink" title="0x02 后端配置"></a><strong>0x02 后端配置</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorPageConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringBoot2.0以上版本WebServerFactoryCustomizer代替之前的EmbeddedWebServerFactoryCustomizerAutoConfiguration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt; <span class="title">webServerFactoryCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//java7 常规写法</span></span><br><span class="line">        <span class="comment">//return new WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt;() &#123;</span></span><br><span class="line">        <span class="comment">//    @Override</span></span><br><span class="line">        <span class="comment">//    public void customize(ConfigurableWebServerFactory factory) &#123;</span></span><br><span class="line">        <span class="comment">//        ErrorPage errorPage404 = new ErrorPage(HttpStatus.NOT_FOUND, &quot;/404.html&quot;);</span></span><br><span class="line">        <span class="comment">//        factory.addErrorPages(errorPage404);</span></span><br><span class="line">        <span class="comment">//    &#125;</span></span><br><span class="line">        <span class="comment">//&#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//java8 lambda写法</span></span><br><span class="line">        <span class="keyword">return</span> (factory -&gt; &#123;</span><br><span class="line">            ErrorPage errorPage404 = <span class="keyword">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">            factory.addErrorPages(errorPage404);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你后端使用了带 token 的请求验证 url 的方式，上面的配置可能就无效了，会返回没有权限访问的信息。</p><p>新建一个Controller 匹配 ‘/vue/**&#39; 并都返回 index.html：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorPageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;跳转到index页面&quot;, notes = &quot;跳转到index页面&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/vue/**&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getNeMoInTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后记得放开：’/vue/**&#39; 的访问限制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web.ignoring().antMatchers(<span class="string">&quot;/vue/**&quot;</span>);</span><br></pre></td></tr></table></figure><p>maven 打好 jar 包运行后，浏览器访问：ip:port/vue/index 就大功告成啦。</p><hr><h3 id="Vue-SpringBoot-以-war-包部署"><a href="#Vue-SpringBoot-以-war-包部署" class="headerlink" title="Vue + SpringBoot  以 war 包部署"></a>Vue + SpringBoot  以 war 包部署</h3><h4 id="0x01后端配置"><a href="#0x01后端配置" class="headerlink" title="0x01后端配置"></a><strong>0x01后端配置</strong></h4><p>首先将项目 pom.xml 中更改打包方式为 war 包，将内置 tomcat 配置为 provided 模式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类继承 SpringBootServletInitializer 并重写其 configure方法，做如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> application.sources(MyApplication.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jar 和 war 启动的区别：</p><blockquote><p>jar包: 执行 SpringBootApplication 的 run 方法，启动 IOC 容器，然后创建嵌入式 Servlet 容器<br>war包:  先是启动 Servlet 服务器，服务器启动 Springboot 应用(SpringBootServletInitizer 实例执行 onStartup 方法的时候会通过 createRootApplicationContext 方法来执行 run 方法)，然后启动 IOC 容器</p></blockquote><h4 id="0x02-tomcat-配置"><a href="#0x02-tomcat-配置" class="headerlink" title="0x02 tomcat 配置"></a><strong>0x02 tomcat 配置</strong></h4><p>进入 tomcat/conf 目录下 ，将 server.xml 中的端口号修改为前端配置的后台统一接口路径(相同则跳过)，因为我们部署的是一个项目。</p><p>将 war 解压到 tomcat/webapps/ROOT 目录下 (图省事2333)，然后去tomcat/bin 目录下执行启动脚本启动项目。当然你也可以解压到 webapps 任意目录下，假如是 <code>app</code> 目录，你得将 Vue 项目的 publicPath 配置为 /app，最后的访问地址将是<code>ip:port/app/vue/index</code>，其中 js、css 等静态资源的地址为 ip:port/app/js/xxx.js、ip:port/app/css/xxx.css，而 Vue 管理的路由是 ip:port/app/vue/** 。</p><hr><h3 id="Vue-项目和-SpringBoot-项目各自单独部署"><a href="#Vue-项目和-SpringBoot-项目各自单独部署" class="headerlink" title="Vue 项目和 SpringBoot 项目各自单独部署"></a>Vue 项目和 SpringBoot 项目各自单独部署</h3><p>Vue 项目单独部署，那必然是部署到 Nginx 上了，配合 WSL (Windows Sub Linux) 开发体验上升了一个档次 (WSL + VS Code 真香)。</p><h4 id="0x01-Vue-项目部署到-Nginx"><a href="#0x01-Vue-项目部署到-Nginx" class="headerlink" title="0x01 Vue 项目部署到 Nginx"></a><strong>0x01 Vue 项目部署到 Nginx</strong></h4><p>Vue-Router 采用 history 模式，在 nginx.conf 中加入：<code>include /etc/nginx/conf.d/*.conf;</code> 然后进入 conf.d 目录 vim  app.conf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 9999;</span><br><span class="line">     server_name  localhost;</span><br><span class="line">     error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class="line"></span><br><span class="line">     location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">      root html;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     location &#x2F; &#123;</span><br><span class="line">        root &#x2F;dist;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">        # index index.html index.htm;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     #location &#x2F;app &#123;</span><br><span class="line">     #   alias &#x2F;dist; #注意alias,不能为root</span><br><span class="line">     #   index index.html index.htm;</span><br><span class="line">     #   try_files $uri $uri&#x2F; &#x2F;app&#x2F;index.html;</span><br><span class="line">     #&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如果，Vue-Router 里配置的 base: /，那么做如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    root &#x2F;dist;</span><br><span class="line">    try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">    # index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue-Router 里配置的 base: /app 子路径，那么做如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;app &#123;</span><br><span class="line">    alias &#x2F;dist; #注意alias,不能为root</span><br><span class="line">    # index index.html index.htm;</span><br><span class="line">    try_files $uri $uri&#x2F; &#x2F;app&#x2F;index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是 Vue-Router 采用 HTML5  histroy 模式部署，具体请参考 Vue-CLI 官网：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#html5-history-%E6%A8%A1%E5%BC%8F">html5-history-模式</a> </p><p>当然，如果你不打算用 history 模式你又能接受浏览器地址栏中丑陋的 # 号，那么你就用默认的 hash 模式，就没那么上面那么多屁事了。</p><h4 id="0x02-SpringBoot-项目部署"><a href="#0x02-SpringBoot-项目部署" class="headerlink" title="0x02 SpringBoot 项目部署"></a><strong>0x02 SpringBoot 项目部署</strong></h4><p>SpringBoot 项目部署，以什么方式部署你开心就好，不过记得放开资源哟 ~</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不管以什么方式部署，请记住后端放开静态资源的访问，以及注意  Vue 中的静态资源地址和路由地址的配置。至于哪种方式好，那肯定是分开部署好，Nginx 配置简单多了，而且分开部署的好处也很多(最大的好处当然是方便甩锅了，雾)。</p><p>Vue 路由默认的使用带 # 的 hash 模式来模拟一个完整的 url，如果你想省事那么就采用默认的hash模式；如果你在意浏览器地址栏 url 的美观，就采用 history 模式，不过你需要在后端加一个覆盖所有情况的候选资源然后都返回 index.html ，及前台 Vue 应用里面配置一个路由以覆盖所有的路由情况，然后在给出一个 404 页面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端工程化及 React、Angular、Vue 等框架逐渐成为新的前台页面展示的解决方案后，前端页面逐渐摆脱了「套模板」的开发方式，真正的成为了一个工程项目，也引入了构建和编译、打包这些项目步骤。本文将简单阐述 Vue + SpringBoot 项目的几种部署方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://chee5e.space/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Vue" scheme="https://chee5e.space/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>执着于理想，纯粹于当下</title>
    <link href="https://chee5e.space/three_year/"/>
    <id>https://chee5e.space/three_year/</id>
    <published>2020-05-07T01:05:00.000Z</published>
    <updated>2021-01-14T09:41:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>满打满算，今天刚好是北漂满三年的日子(但我一无所有)，也许应该写一篇博客文章？人生果然是需要点仪式感和回忆来纪念的。那就写一篇吧。</p><a id="more"></a><h3 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h3><p>事情要从大三快要结束大四即将到来那会开始说起，在我们学校大四是基本不上课的，那不是很爽天天摸鱼，到最后答辩就过去了？我当时就是这么想的，结果没过多久听到通知的我发现我大错特错了。辅导员一腔热血地在那告诉我们：”大四没课了，你们有以下几个选择，要么去考研；要么去考事业单位公务员；要么去「校企合作」然后实习工作。“</p><p>有的同学已经做好计划准备好了去考研，也有的同学报了公考培训班准备进入体制内，剩下的就是我这样头铁根本啥都无所谓的人。考研这事我一直觉得不考名校读出来也没啥含金量，顶多就是多带个硕士学位证书的优势，虽说我这样的半吊子大学没挂过科，但受够了考试的折磨自然不会想去考研了。至于公务员一类的我也压根没有想法，我受不了整天都待着，过一种一眼就能看到底的生活。还不如早早出去见识下这个社会，体验下职场的感觉。</p><hr><p>于是就这么做出了去实习找工作的选择。那么「校企合作」实习是怎么一回事呢，简而言之就是学校和培训机构合作这个是有学分的 ( ？, 然后培训完去找实习，大四学费照交但是培训机构不收钱。听起来这就像学校和培训机构合作然后双方获利 (确实如此。培训机构宣讲确实很有一套，忽悠的人一愣一愣的好像是还行哈，可是一了解学校钦点的那几家培训机构没一个是靠谱的，其中还有一家因为不靠谱后面被学校取消资格可想而知这水有多深。而我和隔壁的几个同学也很硬核，没有选择学校钦点的，自己找了一家，当然和学校对着干是没啥好下场的。你得去找各种主任签字同意是自愿去找校外机构的，其中一趟一趟地跑办公室的确令人很心塞，好倒最后都是会同意的，最坑的就是大四学费照交自己找的机构也得掏钱(后面自己默默还掉了2.4W 艹)。看着学校钦点的那些个机构，我还是毅然决然地坚持自己的选择。</p><p>事实上，培训机构就是培训机构，忽悠到一个就赚到一个。但是事情也没有那么糟就是了，至少我们那种学校教出来和没学过的也没差了，经过回炉重造之后还是能写几个像样的网页功能的。当然，每个学校都有努力了很厉害的人和不努力的，很明显我是不努力的那类人但我不会怨天尤人，自己觉得不后悔没白过就行了。</p><hr><p>虽说是经过回炉重造能写几个像样的功能了，但本着遵从自己的内心，我和几个同学都老老实实地去找实习了，并没有包装工作几年几年这样的简历。然后就是凄凄惶惶地投简历等待着一家企业来收留自己，然而简历石投大海还没有激起什么浪花之前，我就因为牙齿牙疼牙龈肿被折磨得痛不欲生，如果你牙疼过你绝对能体会到的绝对会的。在找实习和牙疼这两件事情的混合打击下我差点买票回家了，我这么辛苦地跑到北京来还没真正地静下来看看这座城市，就要离开了吗，不，我怎么能这么简单就回去了呢。</p><p>在和家人沟通之后，我先去医院看牙，由于牙齿咬到硬物导致有裂隙然后感染神经，进而牙龈周围肿了一大圈；后边就是一次一次地去医院，根管治疗，拔牙神经，上牙冠，花了好几千。慢慢地牙齿也渐渐好起来了，然后就是来回几个小时的地铁去实习面试，雪上加霜的是这时候住处因为违建在赶人走和离实习公司太远了，于是在实习的第二天下午离开公司就忙着租房子。在公司附近的地方我一个一个按着墙上贴的小广告打电话联系房东租房，是的这时候你平时能言善辩的同学却派不上一点用处…租是租到了房，就是简陋到只有床和桌子。后面也慢慢地在这公司实习，也就是现在待的这家公司。这一个多月来，看牙医，找实习，租房子，都是亲历亲为一件一件事情解决掉，我算是真正感受到了生活的残酷之处，总有事情会让你突然成长起来，如果没有那就是事情还未发展到这一步。</p><p>在这之后，生活也慢慢趋于平稳，一切都有了希望的曙光。虽然实习待遇就那样，但是先留下来先稳定下来就会有机会的，当时的我只有这一种想法。那时候我才逐渐明白：身体健康、家人平安、工作顺利真的一点都不简单。 </p><h3 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h3><p>关于2018年，你可以看我写的这篇文章–<a href="https://chee5e.space/2019/01/13/2018/#%E6%88%91%E7%9A%842018">迟到的2018总结篇</a>了解2018年的事情。</p><h3 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h3><p>关于2019年，你可以看我写的这篇文章–<a href="https://chee5e.space/2020/01/05/2019/">2019年终总结</a>了解2019年的事情。</p><h3 id="今夕"><a href="#今夕" class="headerlink" title="今夕"></a>今夕</h3><p>今年回家，亲戚又一直在劝我回家考公务员，而我一直都有点排斥这个职业 。想起之前看到过的一段话，很符合我的认知及价值观：</p><p>「我不想考研，也痛恨成为中国的公务员。在我心里，职场上的波谲云诡都比当公务员来得高尚。我厌倦了整个社会争破头地要当公务员，厌倦了听人们谈论公务员的待遇有多好，工作多轻松，厌倦了公务员的孩子大手大脚花钱跟富二代似的，在我心里比富二代还不如，人家花的至少是自己家的钱。这些人在谈论的时候有没有想过这花的是纳税人的钱，有没有想过绝望中的小孩在冬天饿着肚子，趟过一条条河，翻过一座座山去念书。目前这样的环境，一旦接受这样的职业，想要洁身自好太难了吧。任何职业的竞争，卑鄙，险恶都比这可以饶恕。」</p><hr><p>其实，很多年前看完这段话，我就已经决定了不会走向体制内。尽管家里人都劝我考公务员我都是礼貌性的听完后回复说会试试的，我还是坚持着自己的步调坚持自己当初的选择，至少遵从自己的内心会来得心安理得和快乐一些吧，我是挺喜欢这样的自己的。</p><p>最近在工作群里，和一些比较熟悉的同事从工作也聊到了公务员这个话题，大家都认为从大环境下来看，公务员是很好的选择，稳定且收入可以保证，也有一定的社会地位。当然，我也是这么认为的，谁不希望稳定的生活稳定的收入呢？</p><p>不过，当我问到我适合做什么工作时，一位前辈却说到，我适合干程序员。他这么说，我心里是有点开心的，但是很多时候我都是在否定自己，觉得自己只是当初一腔热血地以为自己适合编程和做开发，但其实我可能并没有天赋可能也不能干出什么成就。我只是从小喜欢折腾电脑一类的电子设备，觉得自己必须在相关方面做出成就来，从最开始玩小霸王卡带游戏，到XP上玩流星蝴蝶剑以及开始玩智能手机。事实上，我玩游戏也玩的很烂很不在行没有天赋。</p><hr><p>尽管，很多人说编程入门很简单，很多人都在转行到开发这一行，但我认为，其实入门一点儿也不简单。很多人的入门真的就是只是用不同语言打印出一个’Hello World’，会写几个函数实现一些简单的计算问题。而在我看来真正的入门是：能独立从设计到开发到部署再到维护的一整个简单项目的流程。真正的大项目背后都是有很多不同技术支撑的，往广度上看你得懂前端网页开发、服务器后台开发、计算机网络，往深度上看你得懂系统架构、信息安全、操作系统等。更别说现在比较火的科学计算、机器学习、人工智能、大数据等，要想全面的认识一窥全貌，需要学习相当多的知识。了解的很多大佬，其实都是从小或者很早就开始编程了，日积月累其实就已经超过很多有天赋的人了，而往往很多人都觉得自己很有天赋。以绝大多数人的努力程度之低，根本谈不上拼天赋，一万小时天才理论是真的值得去实践的。</p><p>所以我每次否定自己的时候，就告诫自己需要更加的努力了。虽然北漂有痛苦，有希望，每个人的命运都像那雾霾一样不清不楚的，但是我还是愿意执着于理想，纯粹于当下。人难免根据当前的处境美化过去的回忆，好像之前发生过的种种事情也就那么回事无关紧要，所以此刻的我显得云淡风轻。当别人说你看起来总是那么平静与淡然，只有你自己心里知道，而今的平静与淡然是用多少眼泪学回来的；此时此刻的波澜不惊，又是曾被多少波澜几乎淹没过。生命中所有的挫折与伤痛、所有的经历，都是为了造就你锻炼你。不要总说岁月残忍，它其实温柔了你。</p><p><strong>后续：</strong> 最近看到了一篇文章，深以为然 —— <a href="http://daiyuwen.freeshell.org/gb/misc/21-days-cn.html">十年学会编程</a>，编程就是兴趣+堆时间，没有捷径可走，唯一的捷径就是踏踏实实地走捷径。</p><p>英文原文：<a href="http://www.norvig.com/21-days.html">Teach Yourself Programming in Ten Years</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;满打满算，今天刚好是北漂满三年的日子(但我一无所有)，也许应该写一篇博客文章？人生果然是需要点仪式感和回忆来纪念的。那就写一篇吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://chee5e.space/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="生活" scheme="https://chee5e.space/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>hexo在Node.js v14.0下构建空html的问题</title>
    <link href="https://chee5e.space/a-bug-in-nodejs-v14/"/>
    <id>https://chee5e.space/a-bug-in-nodejs-v14/</id>
    <published>2020-04-23T01:25:00.000Z</published>
    <updated>2020-12-05T12:07:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录下 hexo 在 Node.js v14.0 下构建空 html 的问题。</p><a id="more"></a> <h3 id="Travis-CI-构建出错"><a href="#Travis-CI-构建出错" class="headerlink" title="Travis CI 构建出错"></a>Travis CI 构建出错</h3><p>昨天推特上有推友在问 Travis CI 构建 hexo 博客静态网页时构建空 html 页面的问题，她说遇到了从未见到过的报错信息。于是我就 Bing 搜索了下报错部分的关键词：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Accessing non-existent property <span class="string">&#x27;lineno&#x27;</span> <span class="keyword">of</span> <span class="built_in">module</span> <span class="built_in">exports</span> inside circular dependency</span><br></pre></td></tr></table></figure><p>Bing 还是比较靠谱的，第二个搜索结果就给出了与报错内容问题类似的一个 mongodb 论坛网页。<a href="https://jira.mongodb.org/browse/NODE-2536">https://jira.mongodb.org/browse/NODE-2536</a> 然后我就点进去看了下，他使用的 Node.js 版本是 v14.0-rc，下面有人回复说也在  v14.0 下遇到了同样的问题。好像有点石锤是 Node.js v14.0 的锅，v14.0 是前几天(21号)发布的最新特性版本 (LTS不香吗 。于是我就回复推油说可能是 Node.js v14.0 的锅，后面她指定了下版本就正常了。我就跑去看了下她的 Travis CI 构建历史，配置文件里写的环境是  nodejs ，版本配置的是 stable，也就是最新的稳定版本。然后 log 信息显示安装的 node 环境是 v14.0，看来问题石锤了 ( stable NO! 。所以别用什么最新版本，害，官网不是说得明明白白推荐大多数人使用 LTS 版本吗？</p><h3 id="重现-bug"><a href="#重现-bug" class="headerlink" title="重现 bug"></a>重现 bug</h3><p>真理来源于实践，于是我决定亲自去重现下这个 bug 。由于我用的是 Nodejs v12.14.1，重现 bug 需要 v14.0 但是我后边又不需要这个版本。所以我需要一个可以切换 Nodejs 版本的工具，重现完bug就滚回 v12.14.1。python 下有 Anaconda 管理版本，Nodejs 也有 nvm(Node version manager) 做版本管理。怎么安装 nvm，你去搜呀。下图是我安装 v14.0.0 步骤的截图：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/Ivlx1KRnF5ypm4A.png" alt="nvm 安装 v14.0.0"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 v14.0</span></span><br><span class="line">nvm install v14.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出安装的 nodejs 环境</span></span><br><span class="line">nvm list </span><br><span class="line">  14.0.0</span><br><span class="line">* 12.14.1 (Currently using 64-bit executable)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 v14.0.0</span></span><br><span class="line">nvm use v14.0.0</span><br></pre></td></tr></table></figure><p>然后就是执行 hexo clean &amp;&amp; hexo g 来测试下是否能正常构建了。果然，出现了那个诡异的 bug，石锤了是 Nodejs v14.0 的锅。</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/sEXuSvawA5rLFJl.png" alt="v14.0.0 构建空 html 的 bug"></p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>解决方式当然是别用 v14.0.0 最新版本了，hexo 还没做兼容，吓得我赶紧把 Travis CI 配置文件里的 Nodejs 版本指定下，别再用<code> stable</code>了它会自动使用最新的稳定版本！</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不要轻易切换到最新版本，请使用 LTS 长期支持版本，Travis CI 构建时指定具体的 Nodejs 版本，不要图省事填<code>stable</code>，它会自动安装最新的 Nodejs 版本。</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>后面将此 Bug 提交到了 <a href="https://github.com/hexojs/hexo/issues/4257">hexo#issue-4257</a>，后边也有人重现了同样的错误，见<a href="https://github.com/hexojs/hexo/issues/4260">hexo#issue-4260</a>；以及有人反应在 Nodejs v14 出了同样的问题 <a href="https://github.com/hexojs/hexo/issues/4263">hexo#issue-4263</a>，官方维护团队的建议是用低版本的 Nodejs 以避免此类错误的发生。而上面报的警告(Warning: Accessing non-existent property ‘lineno’ of module exports inside circular dependency)是因为在 Nodejs v14 下引用 <code>stylus</code> 时出了问题。警告的复现在 <a href="https://github.com/hexojs/hexo/issues/4257#issuecomment-618857837">issuecomment-618857837</a> 提出，具体复现情况见下图：</p><p><img src="https://cdn.jsdelivr.net/gh/vensing/static@master/image/lTWGwo59CidzSVM.png" alt="stylus warning 警告"></p><p>而执行 hexo g 构建空 html 的问题则是因为 Nodejs v14 下使用了严格的参数类型检测，从而导致 <code>hexo-fs</code> 的 fs.promises.copyFile 方法在 Nodejs v14 以下版本正常构建，而在 v14 版本上则出现了问题。具体的解释请查看 <a href="https://github.com/hexojs/hexo-fs/pull/59">hexo-fs#pull-59</a>，<code>hexo-fs</code> 涉及到 <code>hexo-cli</code> 及 hexo 构建静态网页从而导致构建出了空的 html，详情见评论 <a href="https://github.com/hexojs/hexo/issues/4260#issuecomment-618815265">issuecomment-618815265</a>。此问题已在 <code>hexo-fs</code> <a href="https://github.com/hexojs/hexo-fs/pull/60">hexo-fs#pull-60</a> 修复。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下 hexo 在 Node.js v14.0 下构建空 html 的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客开发" scheme="https://chee5e.space/categories/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="hexo" scheme="https://chee5e.space/tags/hexo/"/>
    
      <category term="nodejs" scheme="https://chee5e.space/tags/nodejs/"/>
    
  </entry>
  
</feed>
