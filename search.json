[{"title":"近期的一些想法","date":"2021-03-07T14:59:44.000Z","url":"/recent-insights/","tags":[["随笔","/tags/%E9%9A%8F%E7%AC%94/"]],"categories":[["碎碎念","/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"]],"content":"本篇主要用来记录下最近的一些摘录、内心感受与想法，如果你不同意见或者想法，那么以你为准。 我喜欢我的懦弱，痛苦和难堪也喜欢。喜欢夏天的光照，风的气息，蝉的鸣叫，喜欢这些，喜欢得不得了。还有和你喝的啤酒，我说不清啊。 心态和心理承受能力都急剧下滑，然后伴随而来的就是焦虑了。我自省和好好调整学东西。 重要的事情必须要未雨绸缪、做好足够的积累与准备；运气这种概率事件是非常少的，不要抱有任何侥幸心理，要对事情本身有敬畏之心。不要觉得自己很差劲，每个人在挣扎、努力、付出过后都会有收获；如果没有的话，最好认真审视一下自己的所作所为。没有目标和没有时间观念都会让人得过且过的过日子。 心酸、有点生气、又很无可奈何，年龄越大代沟越宽；去做一些填补空虚的事情来告诉自己还有可以信仰的事物并从中得到慰藉，比如阅读、写随笔、追番；偶尔无所事事、打游戏、刷视频也很重要，毕竟太过于认真的生活是很沉重的一件事情。 我最近最开心的一件事大概是：某天晚上和亲戚一起从下午开始打麻将，然后晚上吃家庭火锅，吃完再接着打麻将。我大概是没有输钱也没有赢钱，唯一一个输了一千多的人可能比较难过些，但也是照样快乐的。我其实特羡慕他们的生活，小地方的小人物生活，我大概能够理解那些没事打打麻将的老人了。 我过年之前在家待了一两个月，也基本不出门，在家就玩电脑也不说话，安静的可怕都不知道怎么过来的。过完年之后，见到了许久不见的亲戚朋友，感觉聊聊各自的生活也挺开心的。重要的是我对一些事情改变了自己的看法与偏见，很多事情还是得设身处地的去亲身体会才知道原来是这样。我还是不想一个人。 入殓师貌似今年会引进，到时候一定得去电影院Cinema看一次。「我打算迎来人生最大的转折点，但卖掉大提琴时，很不可思议，觉得很轻松。觉得被一直以来的束缚解放了。自己以前坚信不移的梦想，可能根本不是梦想。」 从小玩到大的朋友，当然也是个学霸，医学硕博连读的那种。今天来问我编程相关的东西(当然我完全不会)，因为发论文要读数据出图，所以想用 R 或者 python 来弄。聊了一个多小时，好久没有这么和人聊过天了，把最近的不愉快都抛诸脑后了，虽然现实中大家都挺不容易的。期待更多交流啦。 三联生活周刊开设的「电影时光」栏目挺不错的，比如最近推送的这篇『人可以选择躺平不工作吗？』就深入到了我内心中的感受。生命逐渐变成一场竞赛，所有人都是假想敌。这句话映射到了太多现实情况。也让我想起了刺猬的优雅中的一句话：『鱼缸中红金鱼理论的典型，一心想避免像她母亲那么神经质，并变得比她父亲更加优秀的年轻女孩，生命对她来说是一场永远的战争，必须要摧毁别人来达到胜利。』一个人的命运啊，当然要靠自我奋斗，但也要考虑到历史的进程。『所谓的天赋或者才华只不过是恰好出生在一个接受并且认可你这种才华的社会和时代而已』。当然有些人可能过了很久才被社会和时代所认可比如梵高。 今天早上吃完早餐忘记扫码付钱就走了，在路上过了三四分钟后想起来没付钱，于是纠结了一两秒之后就折回去了。先说了句不好意思忘记付钱了，然后扫码付钱的时候，老板娘说了句「能回来付钱的就是好人啊」我觉得发生这样的事情，就应该回去付钱，更何况是其他人辛辛苦苦大早上的忙活为了让你填饱肚子呢 "},{"title":"Switch 海外购日志","date":"2021-01-23T02:05:54.000Z","url":"/switch-pickup-log/","tags":[["switch","/tags/switch/"]],"categories":[["揽件日志","/categories/%E6%8F%BD%E4%BB%B6%E6%97%A5%E5%BF%97/"]],"content":"先说好，我不是在给 Switch 或者其他的外设之类写软文打广告噢(永远没人找我打广告)，这是一篇单纯的揽件开箱文。 寻找童年的记忆说起 Switch 可能第一印象就是一台游戏机，而大多数人接触游戏估计都是从很小的时候就开始了。我那一代小时候最开始接触到的游戏大概是「俄罗斯方块」，为什么是俄罗斯方块呢？ 因为这个游戏是真的经典，你如果这么想就错了。事实上是那个时候接触的游戏机里就只有带俄罗斯方块这一个游戏，但也足够好玩了对那个时候的小孩子来说，而且还是朋友之间轮流交换着玩的，那时候几块钱的游戏机搁今天来说也是有点贵的。 看到上面这个图，是不是也想起些什么了呢？后面家里换电视了，就继续在电视上玩俄罗斯方块，是的我的朋友，那个时候电视上也有这个游戏。 时代的眼泪再后来，表哥家里买了“小霸王学习机”，当时是可以用来练习「五笔打字」之类的，美名其曰学习机实际上是一台伪装的货真价实的游戏机。 这个学习机也是可以插卡带的，也有卖卡带的店当然都是卖的游戏啦哈哈哈。坦克大战、钻火圈、打雪球、摩托赛车…， 当时的游戏就算是放今天玩也绝对不会无聊的。 那个时候其实还有游戏厅，摇杆游戏机之类的，时过境迁现在已经渐渐没落了，大城市里现在都不叫游戏厅了叫游戏城但也基本没去过了。 亚马逊海外购说起来，本来也没想过入 Switch 的，但是同学手头有个国行 Switch 就便宜转给我了。我这个同学也很有意思，19 年那会入了日版 Switch，然后又出了日版的，等到腾讯引入国行 Switch 之后就去做国行勇士了。再后来又转给我，转手又入了动森限定版主机。 而我收到国行版 Switch 之后，玩了几回就放着吃了几天灰，谁让国行与世隔绝呢。eShop 商店游戏少得可怜，好友还只能添加国行的或者也用微信绑定了的好友。也不是说国行就不行了，国行价格便宜、卡带和游戏相对来说比其他区是更实惠的，而且没有 online 联机服务订阅，因为都是走腾讯架在国内的服务器，所以下载游戏和联机什么的是很方便的。但很抱歉，做了几天勇士之后，我就在朋友的怂恿下可耻地叛变了。 所以，我就把国行 Switch 和马里奥赛车国行卡带转手给咸鱼出掉了，总得来说低价输入再转手竟然还赚了一波。说到这就再扯一句，马里奥赛车是转给了一个大哥，给他孩子买的怕孩子疫情待在家里无聊。看来现今的家长对于游戏机和游戏还是更加理性和认可的。 然后我就去同学推荐的亚马逊海外购入了红蓝主机 + 动森卡带捆绑套餐，当然也对比了下京东国际和天猫国际，京东和天猫只提供主机就 2.5K 左右了，而亚马逊海外购主机加动森卡带还包含关税也才 2.5K 左右，还是亚马逊这个比较实惠些。 虽说亚马逊海外购是亚马逊日本官方直营的比较靠谱，但是物流还是比较慢，如果你不介意的话还是选择亚马逊海外购吧。我当然是不介意的，所以果断的付了钱，11 号下午付完钱，13 号就从日本千叶县市川市发货了；然后 15 号送到 NRT(不是NTR，你想什么呢？什么不知道 NTR，罚你赶紧搜一下) 成田国际空港转国内 CAN 广州白云国际机场，18 号到达广州，一个多小时就清关放行了还是很快的，所以大概是走的海运。日本到国内走的 APEX(不是游戏啦) 易客满快递，到国内之后就走顺丰快递，20 号上午就收件了。竟然莫名觉得有点快，要知道亚马逊预计的是 28 号… Switch 日版体验收件之后当然是到了开箱环节啦(多图预警⚠)，当然第一件事是喷酒精消毒咯安全第一，来看一下包装纸箱： 亚马逊有点不够意思啊，就塞了几张纸没塞泡沫或者空气袋，动森卡带和 Logo 纤维布就压在 Switch 包装箱下面，不过 Switch 的包装还是很靠谱的。 接着来看 Switch 纸箱： 拆开后，上面是 Joy-Con 红蓝手柄和主机；下面是电源适配器和 HDMI 连接线缆，手柄握把和 Joy-Con 腕带x2，特别大的底座其实本质就是一个大号 type-c 扩展坞(带有 PD 充电接口、HDMI 接口、USB 接口) 产品清单 主机本体*1 Joy-Con手柄*2 Joy-Con腕带*2 Joy-Con普通握把*1 电源适配器*1 HDMI线*1 基座*1 账号和游戏由于是日版的，所以可以选择地区注册多个外区账号和访问外区 eShop 游戏商店。港区 eShop 在线商店是支持信用卡和预付卡的，但是网页版商店提供了多种支付方式，还支持支付宝噢；另外港区游戏也是非常多的，港区真国服！ 关于更多港区 eShop 使用指南参考：港服 eShop 使用指南：每一个中文 Switch 玩家的「必需品」 进入 eShop 商店时可以选择不同的账号，之后会进入刚账号绑定的地区商店；进入游戏时也可以选择不同的账号游玩，而不用管游戏本体是在哪个区下载的，这个时候的账号只是存储游戏数据的不同。 游戏的话，分为数字版软体游戏和实体卡带版游戏；对于我来说，卡带版游戏更加灵活方便，而且游戏本体不占用机器存储空间，还可以转手出去，就是切换游戏得弹出卡带。而数字版的话，就跟随账号走了，占用机器存储容量还需要下载游戏本体，好在 Switch 提供了 microSD 卡插槽可以扩充存储容量。另外，一些游戏本身没有提供卡带版本，就只有去 eShop 商店购买下载游玩了。免费游戏的话还是有挺多的，进入商店点击搜索，以其他条件搜寻：价格范围选择免费下载，商品种类选择软体；或者直接输入 free 搜索出来的就是免费的游戏了。 网络和下载有了游戏之后当然是下载了，这个时候你会发现 Switch 下载和更新游戏数据是多么痛苦的一件事情。好在也是有一些方法可改善下的，我的话就是更改网络设置开代理啦，方法也很简单：去设置里找到互联网更改网络，代理服务器选择启用，并输入你电脑上机器的 ip 地址以及端口，注意将你的代理软件启用 Allow LAN 以允许来自局域网的连接。之后保存重新连接到网络，下载速度是有一定的提升的 (下载就走电脑代理软件了，我这下载速度能到 2M/s)。当然如果不差钱的话，买个 UU 加速器启用 Switch 加速服务，网络设置也是更改网络连接中的代理服务器设置。如果你的路由器已经装了代理插件的话，可以选择一个 NAT 为 A 的网络进行游戏下载。 相册图片分享最近的系统更新里，任天堂加入了将图片分享到智慧型手机上的功能，需要扫码二次。第一次扫码是开启 Switch 热点服务，让手机连接上 Switch 的网络，之后再次扫码浏览器打开 Switch 网页保存图片。 另一种方式就是绑定 SNS 社交网络账号，这里需要网络能够科学上网；可以是路由器装了科学上网的插件或者是电脑代理软件开启 Allow LAN，Switch 网络配置代理服务器(如果你用过Line、Telegram 的代理服务器设置，其实都是一样的配置只不过 ip 绑定的是 127)。第一次科学上网绑定好了 twitter 账号之后，后续就可以不用科学上网也能分享相册图片发推了。 Switch 外设Switch 支持 USB 有线网卡、USB 蓝牙接收器、Type-C 转接底座、HDMI 采集卡直播（没有买外设，以下都是只能云一下） 是的，你没看错，Switch 还有一些奇奇怪怪的折腾方式。 有线网络首先，Switch 是支持有线网络的，可以购买转接器进行转接，USB-A 口的可以在底座模式下接入，type-c 接口的可以直接插入掌机的 type-c 口。 我手头正好有一个 type-c 扩展坞，接上网线连接 Switch type-c 口即可切换为有线网络连接，接上键盘也可以输入文字。 但是并不能连接此扩展坞的 HDMI 口输出视频流至显示器上，即使我使用扩展坞的 C 口供电。 蓝牙接收器Switch 是没有蓝牙功能的，所以无线耳机是派不上用场了，但可以用蓝牙接收器来实现这个功能。然后你就可以使用你的无线耳机来接收声音了。链接： 便携底座如果你嫌 Switch 的基座又大又不方便携带的话，你可以冒着风险试试便携底座，第三方的基座是有使用风险的。其实说到底这东西本质上就是一个带 PD 充电和 HDMI 的 type-c 扩展坞。链接： 视频采集卡有没有想过直播 Switch 游戏？如果你有这个需求的话，你可以试试视频采集卡这个玩意。链接： 其实说到底，这些都是 type-c 接口提供的无限可能性，希望 type-c 早日统一各种接口。 最后最后贴一下国行与海外版机器对比图： "},{"title":"我的小鱼你醒了","date":"2021-01-18T09:35:24.000Z","url":"/my-little-fish-wake-up/","tags":[["我的小鱼","/tags/%E6%88%91%E7%9A%84%E5%B0%8F%E9%B1%BC/"]],"categories":[["万叶集","/categories/%E4%B8%87%E5%8F%B6%E9%9B%86/"]],"content":" 我的小鱼你醒了，还认识早晨吗；昨夜你曾经说，愿夜幕永不开启；你的香腮边轻轻滑落的，是你的泪还是我的泪；初吻吻别的那个季节，不是已经哭过了吗？ 我的指尖还记忆着，你慌乱的心跳；温润的体香里，那一缕长发飘飘。 "},{"title":"安達としまむら","date":"2021-01-07T14:44:57.000Z","url":"/adachi-and-shimamura/","tags":[["安达与岛村","/tags/%E5%AE%89%E8%BE%BE%E4%B8%8E%E5%B2%9B%E6%9D%91/"]],"categories":[["动漫迷","/categories/%E5%8A%A8%E6%BC%AB%E8%BF%B7/"]],"content":" 日野和永藤似乎是从小一起长大的，我是进了高中才认识的；就算是朋友，和她们之间的距离感也很不一样；不过，所谓人之间的距离呢，也不是越近越好；太接近的话就会有排斥，也可能会错过。 与人相处都会伴随着些许痛苦；无法理解的事情，麻烦的事情；以及关系不和时，修复和维持关系需要做出很多的努力；不过，在那样的负面间隙中，藏着幸福。 这么一想，我对待友情，还真是持续不下去；我就是一个不去延续人际关系的冷酷家伙；不过，我是这么想的：强大到可以一直陪伴着你的关系，稀少到屈指可数；要是在命运的长河里陷得太久的话，再深的羁绊也会分崩离析。 "},{"title":"使用 Github Actions 部署 HEXO 博客","date":"2020-12-09T02:05:30.000Z","url":"/hexo-deploy-github-actions/","tags":[["CI","/tags/CI/"]],"categories":[["博客开发","/categories/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/"]],"content":"促成我从 Travis CI 换成 Github Action 的原因找到了：Travis CI 任务排队足足快半小时才启动虚机跑任务。我想慢的原因大概是我没花钱白嫖了这么久😅 所以这篇文章主要来讲一下如何使用 Github Actions 部署 HEXO 博客，好吧虽然是被别人写烂了的文章，但自己上手操作起来还是有些收获的。但凡有想法的事情，以最快的速度行动起来总是没错的，状态也可能是最好的。 前期准备为了和触发 Travis CI 任务的 source 分支独立区分开，我创建了一个新的 source-action 分支用来触发 Github Actions 的工作流。目标是将 hexo 博客源码 push 到 Github 仓库的 source-action 分支后触发 Github Actions 的工作流，启动 OS 实例执行任务，安装 node 环境构建 hexo 网页，然后推送到仓库的 master 分支作为博客备份，同时再推送一份到 VPS 上部署。其实这和 Travis CI 的流程也是一样的，只是涉及到 SSH key、环境变量、配置文件的修改。 生成部署密钥我们需要在指定的目录下生成 ssh key, 打开终端，进入 blog-action-sshkey 目录，执行命令： 然后一路按几次回车就完成生成工作了，最后在目录下会生成 github-deploy-key 私钥 和 github-deploy-key.pub 公钥两个文件。 配置部署密钥配置公钥复制 github-deploy-key.pub 文件里的内容，在博客仓库 Settings -&gt; Deploy keys -&gt; Add deploy key 页面上添加 SSH 公钥： Title 填写 HEXO_DEPLOY_PUB。 Key 填写 github-deploy-key.pub 文件内容。 勾选 Allow write access 选项。 配置私钥复制 github-deploy-key 文件里的内容，在博客仓库 Settings -&gt; Secrets -&gt; Add a new secret 页面上添加 SSH 私钥： Name 填写 HEXO_DEPLOY_PRI。 Value 填写 github-deploy-key 文件内容。 Github Actions拉取远程的 source-action 分支并检出到本地，在 blog 仓库根目录下创建 .github/workflows/deploy.yml 文件，最后的目录结构应该是这样： 编写 deploy.yml又到了编写配置文件的环节了，嘛反正 CI 最后落地下来都是在配置文件的各个步骤中，也有使用界面的 CI 服务，比如 Buddy CI 但是我并没有用过。 点击查看完整deploy.yml 以下是对配置文件中的各个部分做简单解释： 设置触发条件和环境变量 name 是当前 Action 的名字，最后你可以在仓库的 Actions 菜单项中看到它。 on 是此 Action 触发条件，当满足条件时会触发此任务，上面的 on.push.branches.source-action 是指当 source-action 分支收到 push 后会触发 Action 执行任务。 env 为环境变量对象 env.GIT_USER 为 Hexo 编译后使用此 git 用户部署到仓库 env.GIT_EMAIL 为 Hexo 编译后使用此 git 邮箱部署到仓库 env.THEME_REPO 为 Hexo 所使用的主题的仓库，这里为 vensing/Kratos-Rebirth env.THEME_BRANCH 为 Hexo 所使用的主题仓库的版本，可以是：branch、tag 或者 SHA env.DEPLOY_REPO 为 Hexo 编译后要部署的仓库，例如：vensing/vensing.github.io env.DEPLOY_BRANCH 为 Hexo 编译后要部署到的分支，例如：master 指定任务及执行步骤 jobs 为此 Action 下的任务列表 jobs.{job}.name 任务名称 jobs.{job}.runs-on 任务所需容器，可选值：ubuntu-latest、windows-latest、macos-latest。 jobs.{job}.strategy 策略下可以写 array 格式，此 job 会遍历此数组执行。 jobs.{job}.steps 一个步骤数组，可以把所要干的事分步骤放到这里。 jobs.{job}.steps.$.name 步骤名，编译时会会以 LOG 形式输出。 jobs.{job}.steps.$.uses 所要调用的 Action，可以到  查看更多。 jobs.{job}.steps.$.with 一个对象，调用 Action 传的参数，具体可以查看所使用 Action 的说明。 在上面配置文件中的代码段，指定了 Action 依赖的 OS 实例为 ubuntu-latest，以及 node 运行环境版本为 14.x，任务 steps 中引用了一个 版本为 v2 的 Action checkout ，actions/checkout@v2 的作用是 Checkout 一个 git 仓库到当前 ubuntu 容器。 Checkout theme repo step 中从环境变量中拿出 $ 指定本站使用的博客仓库名及分支 hexo5-custom，检出到 themes/Kratos-Rebirth 目录下。 Checkout deploy repo step 中从环境变量中拿出 $ 指定部署备份的博客仓库，及要部署备份生成的静态网页的分支 master，检出到 .deploy_git 目录下。 Use Node.js step 中使用了 actions/setup-node@v1 action 指定了 node 的版本。 配置环境即部署到 Github Pages 检出主题分支和 Github Pages 部署分支之后，接着配置执行环境： 设置容器的时区； 将在 Settings -&gt; Secrets 中的 SSH 私钥写入到 ~/.ssh/id_rsa 文件中； 设置 id_rsa 的文件权限及 know_hosts、git 全局用户信息 接着执行 npm install 安装依赖和 npm run deploy 部署到 Github Pages 进行备份。run: | 可分行连续执行多条命令，需要注意的是使用 hexo 的 deploy 命令需要我们安装 hexo-deployer-git 依赖，所以需要先在本地安装下依赖写入 package.json 中。 Github Actions 部署 hexo 到 VPS在使用 Travis CI 时，如果想要把 Hexo 部署到 VPS 服务器上，需要做的东西就比较多了。先是得对私钥进行加密处理(Windows 下会出现问题，*nix 才正常)，为此我们得在 *nix 环境下安装 ruby、travis ci 等等一系列的东西，然后还得把加密后的私钥上传到仓库，接着写解密脚本最后才能放入容器的 .ssh/id_rsa 文件中。总之一大堆套餐下来，很麻烦，而 Github 直接可以设置私钥至 Secrets 中且无需将加密后的私钥放到仓库里，最后直接可以在容易中拿到。更加简单和安全，大概？ 要将构建好的静态网页推送到 VPS，需要将 SSH 公钥复制到 VPS 的 ~/.ssh/authorized_keys 文件中，如果有多个 SSH 公钥，换行后追加即可。 在 Action 中要想部署到 VPS 上，需要安装一个第三方的 action: webfactory/ssh-agent@v0.4.1，在执行完 npm run build（hexo clean &amp;&amp; hexo g）之后会在 public 目录下生成构建好的静态网页，以便后面推送到 VPS。这里不用 .deploy_git 目录是因为，这是一个 Git 仓库，里面有 .git 目录，时间一久文件会变得很多，况且构建的静态网页目录根本不需要这些文件。 SSH VPS step 中我们从环境变量中拿到 SSH 私钥，并将其指定为 ssh-private-key 的值，最后使用 rsync 命令推送到 VPS 即可。 最后来看一眼，Githun Actions 执行的效果图： 切换到 Github Actions 后，体验很好，速度很快，繁忙的时候也只花两分钟排队。 References 利用 Github Actions 自动部署 Hexo 博客 利用 GitHub Actions 自动部署 Hugo 博客到自建 VPS Github Actions "},{"title":"Hackintosh 尝鲜","date":"2020-12-08T12:14:10.000Z","url":"/dell-hackintosh/","tags":[["黑苹果","/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"]],"categories":[["瞎折腾","/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"]],"content":"话说，最近苹果推出了基于 M1 芯片的 MacBook Air 和 MacBook Pro，以及新的 macOS Big Sur。本文将写写戴尔 G7 如何黑苹果尝鲜 Big Sur Catalina，如果您是忠实的 Windows 粉和 Linux 粉，在看的过程中感觉到任何不适的话，可以随时右上角关闭网页。至于各操作系统之间的圣战，我们就安安静静地吃瓜就好了。 心血来潮突然折腾装黑苹果的契机，大概是因为前几天调试 iOS 浏览器网页时，在 Windows 下实在是无能为力? 然后就突发奇想地折腾安装黑苹果，反正这个世界上最好找的就是借口了。 说回黑苹果，其实早在一两年前看过一些黑苹果教程网页，但在看到无线网卡不能驱动无法上网、死机、卡屏以及其他各种问题时，把我这个小白给吓到劝退了。但谁又能阻挡住一颗脱缰的好奇心呢，说干就干。在拜读了「黑果小兵」博客的安装教程后，我就开始准备备份硬盘、格盘，做 U 盘安装镜像了。 Note: 本文仅供参考，因操作不当造成的后果概不负责。 前期准备 电脑型号 DELL-G7-7588 操作系统 macOS Catalina 10.15.7 处理器 Intel Core i5-8300H @ 2.30GHz 四核 内存 16GB 2667 MHz DDR4 硬盘 HP SSD 1TGB PCIE NVME + HP SSD 500G SATA 显卡 Intel UHD Graphics 630 网卡 Intel AC9560 声卡 ALC256 SMBIOS MacBookPro15,2 (13-inch, 2019 准备安装盘首先，我的机器是戴尔 G7 7588，戴尔的机器很多都可以黑苹果，人傻钱多戴的好处瞬间体现出来了。硬盘我有两块，一块是 m.2 接口 NVME 的 HP 1T SSD，另一块是 SATA 接口的 HP 500G SSD。至于为什么选惠普的盘，因为性价比高啊(虽然它好像是贴牌的)，800 多 1T 的 NVME SSD 已经挺实惠了，隔壁三星能卖到 1000+ (听说三星的盘对黑苹果不友好，但好像修复了)。我的想法是，Windows 就让它待在原来的 NVME SSD 上，500 G 的 SATA SSD 就用来装 macOS，这样总不至于把 Windows 搞崩吧？什么？都上黑苹果了还要 Windows 干啥？小孩子才做选择，大人还要打游戏呢。 由于我压根没考虑在一块硬盘上分出一个区来安装 macOS，所以本文就此略过。 准备 U 盘安装镜像在备份完 SATA SSD 之后，就可以把它格式化了，如果你安装盘的格式是 MBR，请将其改成 GPT 格式，MBR 在最近的 macOS 上并不被支持(后面抹盘的时候也会选择 GUID 分区)。接着从黑果小兵那下载了 macOS 10.15.7 Catalina 的 dmg 镜像，这个镜像包含 macOS、Clover EFI、OC EFI、WEPE EFI 全家桶，总之用它就对了。接下来呢，还得做一个 U 盘安装镜像，我用的是 balenaEtcher 这个工具。具体的操作步骤： 选择 dmg 镜像 选择要烧制的 U 盘 开始制作 当 balenaEtcher 出现绿色的 Complete 字样之后就说明烧制成功了，然后 Windows 会弹窗提示格式化 U 盘，无须理会它直接右上角关闭。 准备机器机型 EFI由于不同的机器硬件差别太大，所以必须要符合机型的 EFI 才能顺利的引导黑苹果，所以还需要去下载对应机型的 EFI。我选择的是最近比较流行的 OpenCore（OC）引导工具，那么去哪里找对应机型的 OC EFI 呢? 答案当然是万能的 Github 了，你也可以去「黑果小兵」博客查找符合你机器机型的 EFI 信息，最后基本都是要去 Github 下载的。 Dell G7 7588 的 EFI 有三个项目在维护，我使用的是 FYQ-Hackintosh 提供的 OC EFI。直接 Clone 仓库或者下载 zip 包，不要下载 Release 页面下的旧包。此仓库包含了 OC EFI 以及声卡修复脚本、雷电3补丁。使用分区工具删除 U 盘中 OC 分区里的文件，将下载的对应机器 OC EFI 复制到 U 盘 OC 分区下。 BIOS设置 UEFI Boot Path Security: Never SATA Operation: AHCI Enabled USB Boot Support: Enabled Enable External USB Port: Enabled Thunderbolt Security: No Security PTT Security: Disabled Secure Boot Enable: Disabled Intel SGX: Disabled VT for Direct I/O: Disabled Auto OS Recovery Threshold: Disabled SupportAssist OS Recovery: Disabled 安装 macOS以下安装步骤参考自 黑果小兵，图片引用的是 Big Sur 的安装过程，但和 Catalina 的安装步骤基本一致。 开机，按 F12 选择 U盘 引导，光标移动到 EFI USB Device Parttion2 选择 OpenCore 分区启动： 进入 OpenCore 主引导界面，选择 Install macOS Catalina，直接回车进入 OpenCore 引导。 出现安装界面，选择磁盘工具，点击继续： 进入磁盘工具，点击下图所示，选择显示所有设备： 选择 HP 500G SSD SATA 这块需要安装 macOS 的磁盘，点击抹掉，在弹出的窗口中输入：名称：Macintosh HD；格式：APFS；方案：GUID分区图。 点击抹除，然后等待操作结束，点击完成，通过菜单选择退出磁盘工具或者按窗口左上角红色按钮离开磁盘工具，返回到安装界面，选择安装 macOS，点击继续： 然后点击同意安装协议，选择将要安装的磁盘卷标 Macintosh HD，点击继续： 它会把USB安装盘上的安装文件预复制到要安装的系统分区里，这个过程通常会持续1-2分钟，之后系统会自动重启，进入第二阶段的安装： 重启后继续安装，在安装期间，通常会自动重启 2-3 遍。最好是把 OC EFI 启动项设置为第一项最先启动，否则重启时可能进入其他引导项，或者重启后手动选择 OC EFI。 之后就是进入设置向导界面了，后面的操作就不细说。 最后，来一张 macOS catalina 截图： 杂项Hackintool 和 OCC下载 Hackintool 和 OpenCore Configuration 软件 挂载 EFI安装完成之后，macOS 安装盘中还需要将 U 盘中 OC 分区的 EFI 复制到安装盘 EFI 分区中。先挂载安装盘 EFI，再将 U 盘 OC EFI 替换过去。 打开 OCC 软件，选择工具菜单项，点击挂载 EFI，选择 macOS 安装盘的 EFI 分区挂载: 也可以使用命令行挂载 EFI 分区： 休眠在 Hackintool 电源项里点击刷新按钮左侧图标，将红色的项修改，之后变成绿色即可。休眠我这里是休眠即醒，貌似要设置 CFG 这些东西，嫌太复杂就直接设置桌面屏幕保护程序，开启后再进入系统需要解锁，感觉和休眠功能差不多。 亮度调节系统偏好设置里的默认亮度调节快捷键是 F14、F15，但我最多只有 F11、F12 是亮度调节，在系统设置快捷键里重新映射为 F11、F12 即可，亮度调节正常。 三码iMessages 和 FaceTime 需要三码才能登录。 打开 OCC 软件，选择工具菜单项，点击挂载 EFI，选择 macOS 安装盘的 EFI 分区挂载，进入 EFI/OC 目录下，右键 config.plist 选择使用 OCC 打开： 进入 OCC 选择机型平台设置，切换到 DataHub-Generic-PlatformNVRAM， 查询序列号有效性右侧下拉框选择机型，最好是选择 CPU 型号接近的机型。此时 SSN、SUUID 码已经生成好，点击 ROM 项右侧来自系统，从 Hack 切换到 Mac，点击生成。 最好在 OCC 菜单栏上选择 文件-&gt; 保持，重启系统，三码生成就完成啦，可以在 Hackintool 系统菜单项中查看三码。对 Config.plist 修改之后要保存文件，建议对 EFI 分区进行备份。 黑苹果开启原生HiDPI一条命令可开启接近原生的 HIDPI 设置，脚本的 Github 项目地址: GitHub - xzhih/one-key-hidpi: Enable macOS HiDPI。 终端下执行: 如果访问Github出现网络超时的情况，可以使用下面国内的脚本命令： 开启后重启生效！ 无线下载对应系统版本的 AirportItlwm.kext ： Supported Intel WI-FI Cards By itlwm: 3xxx: 3160, 3165, 3168 7xxx: 7260, 7265 9xxx：9260,9461, 9462, 9560 22000：ax200 Supported Devices ListAirportItlwm.kext download from , support OS: AirportItlwm-BigSur AirportItlwm-Catalina AirportItlwm-HighSierra AirportItlwm-Mojave 替换掉 EFI/OC/Kexts 中的 AirportItlwm.kext： 重启电脑，即可看到 wifi 功能已可以使用，接力功能可使用；隔空投送和随航等其它功能无法使用；实际测试下来网速和在 Windows 下的速度基本一致。 如果想要体验隔空投送和随航等功能，那么你可能需要更换博通网卡，但是已经被无良商家炒到两三百的价格… 雷电3补丁我的电脑是旧款 G7，将下载好的雷电3补丁目录打开，复制 SSDT-THUNDERBOLT.aml 到 EFI/OC/ACPI 目录下， 复制 IOElectrify.kext 到 EFI/OC/Kexts 目录下，用 OCC 打开 config.plist 文件，将复制好的 SSDT-THUNDERBOLT.aml 拖动到 ACPI设置 添加项中并启用；将复制好的 IOElectrify.kext 拖动到 Kernel-内核 设置添加项中并启用。重启电脑。 经测试，雷电3接口外接 Type-C 扩展坞可以连接 USB LAN 千兆以太网、USB-C PD 快充、HDMI 连接显示器正常输出视频、USB3.0 正常；支持设备热插拔。 可以看到 wi-fi 功能已开启，并且雷电3外接 Type-C 扩展坞可以连接 USB LAN 千兆以太网，USB LAN 的网速测试和在机器自带 RJ45 网络速度基本一致。 问题 休眠功能可能无法使用 自带 HDMI 接口不能输出视频至外接显示器 Intel 网卡驱动下的 2.4G WiFi 若有蓝牙设备(小米小爱音箱)连接，会严重干扰网速 Intel WiFi 隔空投送和随航等功能无效(需更换博通网卡) 关机不断电(具体原因还在找，可能是刷了内核补丁引起的) 关于 1080P 下的 HiDPI ，如果设置成 1920*1080 分辨率，字体和应用就会有点小和糊，启用更低分辨率的 HiDPI 之后，字体和应用 UI 变得硕大但是比较清晰，截图的分辨率会扩大一倍非常清晰。所以，我一般是 1920*1080 这样能看到的东西更多，截图可以调低分辨率这样出来的图分辨率扩大一倍非常清晰。 从最近这些天的体验来说，macOS 已经能够胜任很多日常任务了，无论是浏览网页、看视频还是开发编程体验都比 Windows 要来得更好，且从未有过系统崩溃。如果你能忽略屏幕质量和黑苹果不完美下的各种小问题，且能有足够的时间去折腾，那么黑苹果体验可能会比 Windows 好很多。想要完美体验 macOS 还是得上 MacBook 和 4K 屏，更多关于 HiDPI 的内容请查看：有关 retina 和 HiDPI 那点事。 OTA Big Sur最近试了下从 Catalina 10.15.7 OTA 在线系统更新升级到 Big Sur 11.0.1，用移动固态硬盘和时间机器软件备份了一下 Catalina 系统，方便出问题回滚。 第一次下载完系统升级安装包之后安装时提示软件包缺失损坏，重启再下载就可以直接更新到 Big Sur。使用下来，基本没有任何问题，安装的软件也没有兼容性问题；Safari 14 终于可以加载 webp 格式的图片了。 换成圆角矩形应用图标风格后： macOS 软件   参考 黑果小兵 - Big Sur 安装教程 Dell G7 7588 OC EFI OpenIntelWireless-Factory 有关 retina 和 HiDPI 那点事 "},{"title":"记一次手术","date":"2020-11-27T01:23:44.000Z","url":"/an-operation/","tags":[["生活","/tags/%E7%94%9F%E6%B4%BB/"]],"categories":[["碎碎念","/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"]],"content":"第一次做手术是怎样一种体验呢？也许这篇文章会让你更多地了解「做手术」是怎么一回事。 前言在码字之前，我其实还在纠结在博客中写这样一篇文章，到底有没有值得被看的意义。想了想还是写出来，一方面是我老是想写一些东西，等到想写的时候已经忘记了很多细节，然后就理直气壮地鸽了；另一方面是想分享下做手术是怎么一回事，也许能让大家更多地关注自身的身体健康(希望大家都健健康康~，An apple a day keeps the doctor away)。 背景在八九年之前，那会我大概就左耳听力下降了，具体原因是慢性分泌性中耳炎导致中耳里有积液，阻碍了声音的传播。这里简单说一下慢性分泌性中耳炎：因中耳腔内的负压力引致中耳发炎，使液体(血清)由发炎的黏膜表层流进中耳空间形成积水[1]。 慢性分泌性中耳炎其实挺常见的，前期处理好基本就没问题，而我的情况是拖了很久，觉得也没影响生活就没在意了。18 年国庆那会我姐带我去她工作的医院做了一次 CT 和纯音域测试，然后做了一个鼓膜穿刺和咽鼓管吹张。虽然在耳朵和鼻子里打了局麻，但还是疼得眼泪流出来了，积液用针吸出来之后左耳突然就听到了，而且觉得非常吵(医院人多)。后面过了一周又听力下降了，就不了了之。 直到最近有时间才去医院看一看，两周前又做了一次鼓膜穿刺，好家伙，疼、是真的疼，但真的没啥用🤣。前几天去复查，拍 CT 主要是检查下有没有其他并发症(比如说感染到颅内就很不好了)，医生看了 CT 说住院吧，打全麻做个置管小手术能轻松好几年，今天住院、明天做手术、后天出院。想了会还是做个手术，自己也能舒服些耳鸣会消停些，最重要的当然是听力恢复。 术前可能大多数人都没做过手术，毕竟大家都健健康康的嘛。术前是有很多事情需要做的，先是去办理住院手续，预缴了3000 块。然后问了下能不能同省异地医保；办理住院的工作人员说没激活，得绑定下医院。打电话问家里医保局开通绑定，这医保还是我老妈给我缴的(估计北京那边工作缴的医保也不能在这边用，反正就是坑)。接着护士那边打电话说要去做个核酸检测，住院必须得有核酸检测(也要有陪同的家属)，又跑去门诊那边做核酸。大概 5 分钟就搞定了取号、缴费、咽拭子，花了 68 元算是很便宜了。然后回去护士站那边测血压、打皮下药物过敏针、做心电图、胸片。办理住院签了很多字，以及护士和医生问了两次过往病史、有无药物过敏等等，一阵折腾下来算是办好了入院，但没有床位… 然后又让我十点之后别吃东西，十二点之后别喝水，第二天不能吃东西也不能喝水(这对我这种周末不吃早餐的选手来说不算什么)。 术中第二天一早过去，测血压、抽血，换病号服；过了一会有了床位，护士换好被套之类的就躺着等手术了。看病大概是很多时间都在等，那个主任医生也很累，坐门诊、回来给病人换药、下午和晚上都在做手术，记得有一次等到晚上九点多。等到下午两点多才叫我，于是跟着下去手术楼那层。先是问了些问题，然后给我戴手术帽和鞋套(手术室需维持无菌环境)，上吊针坐着等进手术室。没一会，就来了很多做手术的人，有手术做完推出来的，有推进去手术的。只有我望着角落里一排排的手术车，还在等待着全麻手术的到来。 过了一阵子，我被一个护士扶着进入手术室。手术室里面大概有五六个医生，然后让我自己爬上手术车，医生给我胸口、心脏周围贴了很多东西测心跳以及在手臂上装测血压的。然后把我全身用个毯子似的东西包起来，给我一个呼吸面罩叫我深呼吸，吸了几口人就慢慢睡过去，隐约觉得左手的静脉凉飕飕的进来了麻药，之后就睡着了和这个世界断开了连接。 手术半个小时就结束了。手术中发生的一切我都不知道。全麻苏醒有点痛苦，大概一个小时后五点多，听得见护士医生的对话。然后叫我睁开眼，脑子里有意识的想睁开眼就是睁不开，也说不出话，手脚动不了，什么也做不了。这时候我的意识开始逐渐苏醒但打的肌松剂效果还在，所以怎么也睁不开眼睛、手脚想动也无法动弹、口腔里插着呼吸管也咽不下气，就像濒临死亡的感觉。 术后过了一会手脚也能动，呼吸管也被抽出来了，和这个世界重新连接。护士轻声地说，送你回病房了哈。随后我姐就来接我回病房了，回去就躺着反正那感觉不好受，打着镇痛吊针和吸氧管。术后六小时，每两个小时帮我翻次身，前两个小时每隔半小时叫醒我，虽然想睡但是眯一下又睁开眼了。医生过来看了下说感觉怎么样，我说挺好的。随着时间过去，麻药也在新陈代谢过去。晚上十一点才喝了点粥、吃了几片馒头，但是不怎么饿。一直到第二天，头还有点恍惚，全麻好像会对神经系统有点损坏……但愿没啥事。我之前只以为麻醉医生打麻药就好了，后面自己看了下麻醉医生的东西，全程负责打麻药、监督病人心跳、血压、呼吸这些生理活动，手术完还得叫醒病人，手术多可能得到十一点，真的是很不容易。 术后第二天，医生说打个吊针就可以出院了，之后护士拿着输液袋这些东西给我，让我去输液室打消炎的吊针。吊针滴得很快，40~60 滴每分钟，就很快打完了，然后下午还得打一次吊针。我姐帮完办完出院手续和缴费，总共花了 8000 多，异地医保报了 2900, 社保真的社保啊！虽然鼓膜置管是个小手术，但还是上全麻了，主要是因为接近脑部。之前我还担心，手术中我侧翻身了会不会有危险，直到我体验了全麻苏醒才知道手术中我根本动不了因为打了肌松剂，是我想太多了。由于是微创手术，基本上只有鼓膜被切开、放置了一根管子减轻中耳负压[2]，没有任何其他的创口。当然全麻还是少打，反正这几天脑袋都有点恍惚，全麻也有非常小概率的麻醉觉醒的可能性即「术中知晓」，这是很可怕的会给病人留下很深的阴影。 后续出院后，左耳听力也恢复了很多，非常感谢我姐陪我走完手术全程(家人永远是支持你的)。写这么一篇文章主要是： 想让大家了解手术到底是怎么一回事，一般手术不那么可怕，积极治疗配合医生； 麻醉科和麻醉医生也很重要和很辛苦(有些医院麻醉科是管 ICU 的)； 以及医保相关的一定要用上，能省好多钱。 游泳一定要戴好耳罩等设备；洗澡洗头时别把水灌进耳朵里去；感冒和鼻炎也要警惕引起耳朵感染。当然不舒服得去看医生，配合医生检查，避免久病不医成疾。 希望大家都能身体健康、家人平安~ 参考 [1] :  [2] : 耳鼻喉科 -&gt; 中耳積液 "},{"title":"WSL 发行版迁移记录","date":"2020-10-09T08:58:47.000Z","url":"/WSL-transfer/","tags":[["WSL","/tags/WSL/"]],"categories":[["瞎折腾","/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"]],"content":"使用 WSL2 也有一段时间了，基本上可以告别占用大量资源和操作不便的虚拟机，但是 WSL 发行版和 Docker backend 默认的存储路径在 C 盘就很操蛋，一不小心就给你塞满了，对我这种强迫症患者来说非常难受。 背景C 盘塞满和手机电量不足这事很相似，就像看着手机电量不足就想充满电不然没安全感，所以捣鼓了下 WSL 发行版从 C 盘迁移到其他盘上。 我用 WSL 发行版是 Ubuntu 18.04，另外 Docker Desktop For Windows 的 backend 后端守护进程也是跑在 WSL 上，光这两个就占用十几个 G 的空间了(C 盘危。使用 wsl --list 查看已安装的 WSL 发行版： 可以看到机器上安装的 Ubuntu 发行版和 Docker 的 backend 后端守护进程，目标就是将它们迁移到其他盘。查看 wsl --help 可以看到 wsl 提供了 --export 和 --import 发行版的导入导出功能，更为方便的是 Github 上有一个项目管理 WSL 的全功能实用程序 LxRunOffline ，我选择使用这个更为强大的工具来管理 WSL。 安装 LxRunOffline你可以去 LxRunOffline releases 页面下载软件包安装，也可以使用 Windows 下的包管理器安装： 这里我使用 scoop 安装，使用 scoop list 查看已安装的包： 迁移 WSL 发行版迁移之前，先执行下 wsl --shutdown 立即终止所有正在运行的分发和 WSL 2 轻型工具虚拟机，退出 Docker Desktop。查看已安装的 WSL 发行版： 接着将 Ubuntu 和 Docker backend 迁移到指定盘的目录下，开始迁移： 打开 Windows Terminal 进入 WSL Ubuntu-18.04，成功进入终端。打开 Docker Desktop，执行 Docker 相关的命令查看是否能正常运行： 浏览器访问 localhost 即可看到 Nginx 默认页面，迁移完毕，功能正常！ 使用 LxRunOffline 还可以安装自定义发行版，以及备份/恢复、运行 WSL 发行版等功能，具体请自行探索吧 ~ 参考 想安装更多 Linux 发行版？LxRunOffline 让 WSL 更好用 "},{"date":"2020-09-10T01:17:46.000Z","url":"/prejudice/","tags":[["一言","/tags/%E4%B8%80%E8%A8%80/"]],"categories":[["undefined",""]],"content":" 一个人讨厌你，会找无数理由来讨厌你 一个人喜欢你，也会找无数理由来喜欢你 人痛苦的根源在于，轻易认同他人对自己的偏见。 永远不要因为别人只看到你的一面，就觉得自己不够好。也不要只看到别人的一面，就急于给别人贴标签。 赫拉利在《今日简史》里说，所有人都该负起责任，花些时间和精力找出自己的偏见所在。 沉下心来认识和理解一个人或一件事，谨慎的选择每一段关系。 我们才会在这浮躁得要死的世界里，活得更加平静、幸福、真实。"},{"title":"second anniversary","date":"2020-09-07T01:25:08.000Z","url":"/second-anniversary/","tags":[["两周年","/tags/%E4%B8%A4%E5%91%A8%E5%B9%B4/"]],"categories":[["碎碎念","/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"]],"content":"博客也搭建两年了，回过头看，真的是一件很有意义的事情：既能够记录一点东西，又能交到一些朋友。发的文章很少，内容质量也堪忧，也还是有人愿意与我交换友链。非常的幸运，也很感激能与大家相遇和相互关注。 博客要谈博客对于我的意义，那还得从以前的事情讲起。这也算是认真审视一下自己的过去吧，虽然有点难为情。 在我还在念高中的时候，也就是 11 年那会，那时候我沉迷于各种短篇文章，也看《读者》、《青年文摘》一类的杂志，里面有各种光怪陆离的故事吸引着我。学校也会订一些期刊，当我在《读写月报》上看到「灰度倒走」(⬅点击查看)这篇写高三日记的时候，立刻就记住了它的作者。说不上感同身受毕竟我那会离高考还有一两年的时间，有点儿远，但里面的一些话在当时及以后都让我体会到了一些东西。 『深夜，看书累了，正要爬上床去，好久没见的冬留发来一条的信息：“我不知道你现在过着怎样的生活，我只觉得我现在的日子都过得没有盼头了。每天都是题题题，铺天盖地的卷子无尽无休。我无比想逃脱这样的日子，可又觉得或许这种时日还算是好的，我更害怕的是137天之后的日子，我憎恶事态的结局。或许是我信不过自己吧，眼看着别人一天到晚地念书，我却在这里患得患失，不想学又不能不学，不敢不学，因为每个人都在往前走，一个个忙碌地从我身边超过去，我该怎么办？该如何面对冷冷的学校，可怕的高考！我像是一只禁锢在围城里的鸟，飞出不去了，四周高高的全是城墙。我现在连吃个饭都不敢浪费太多的时间，也许就是一个中午的差距却有可能一个星期也补不回来。这日子真不是人过的！我现在唯一的快乐就只剩下看看SJ(手机)了……”她的话让我有种“哐”的一记打到头的感觉，把我从终日无忧的状态拉回到现实中来。』 后来，我真的体会到了每天都是题题题，铺天盖地的卷子无尽无休的日子，每天都在质疑自己患得患失，看似忙忙碌碌实则碌碌无为。 『前几天学校要求家长给孩子写一封信，封好交给班主任，这会儿典礼上发到我们各人手里。元瞳嘤嘤地哭着，不知是对我还是自言自语地说：“真不想成人呀！”我还笑她感情优裕，然而轮到自己读父母的信时，不禁也进入境况眼泪汪汪了。妈妈说：“或许你的一生都很平淡，不断地摸索，不断地盲目，惘然于内心的途径该通往何处。但一定不要没有梦想，不要甘于平庸！梦想拥有巨大的能量，它会使你感觉到自身的愉悦和健康，使你在孤立的处境中，赢得更多的信任和融合。要快乐。要勇敢。要有爱。做自己喜欢的事，善待自己喜欢的人。』 我也体会到了迷惘，不知道内心那些情绪该怎么排解，以及逐渐认识到自己的生活一直都很平淡，但却怎么也不愿甘于平庸。大概每个人在小的时候都会认为自己是特别的那一个人，随着时间的推移慢慢发现其实自己也不过是芸芸众生中的一员(啊，要是真有凉宫春日在就不会那么无趣了吧)。 之后，我找到了这篇文章作者的新浪博客(是的，那时候很多人还在新浪写博客)，以及看了很多其他人的博客，这种细腻的记录生活的方式算是日记的另一种体现吧。那时候的我，唯一的心灵寄托、排解情绪的方式大概是看博客和一些其他的琐碎文章。因为高中那会，身边没有父母，我也不爱社交，没有多少能交流的朋友；后面也开始在 QQ 空间写日志，从 12 年到 17 年，而后阵营也转移到了博客这种基本很少人关注的地方。 时间回到现在，以前看过的博客文章也大都被作者删除掉或者隐藏起来了，而新浪博客也半死不活着；取而代之的是新浪微博这种 140 字的微博客，信息流的输出也比传统的博客丰富不少，而那种长篇累牍的文章也几乎没多少人愿意写。微信公众号订阅推送机制，倒让我觉得只是单方面的被动接收信息流，无法更多的去了解推送信息的人。也有把公众号当博客平台用来记录生活的人，只是极少而已。 博客也搭建两年了，换了好几个主题，也加入了留言评论，写了两年的年终总结及一些很水的文章等等；加了很多友链，认识了不同的朋友，都是很棒的人。在收到留言评论的时候真的非常开心，因为我是在被关注着。我也会在空闲时间摸摸鱼，看看友链里的站点，了解下大家最近发生的事情和记录下的东西。就像是找回了以前刷新浪博客的那种感觉，我是在真正的认真去了解这个人，以及希望交流。当然，在如今的这个时代，博客已经日渐式微了，微博、短视频等占据了大多数人的大部分时间。互联网越是大众化，信息就越是繁杂，产生的电子垃圾就越多，而且社交环境也是泥沙俱下 ———— 好坏、性质不同的人或者事物混杂在一起。所以那些自建站点、坚持写博客的人就显得更难能可贵了(我当然不是在说自己啦（；´д｀）ゞ)，因为他们是真的在输出自己的看法和理解而且不嫌麻烦。 近况今年，因为新冠病毒，外出得一直戴着口罩，也不知道自己是怎么熬过来的。现在地铁的人流量又恢复到之前的程度，好像给人一种事情就快要完结的感觉，看着每个人都戴着口罩又将我拉回了现实。上周六和朋友约着去电影院看了电影《信条》，放映室里座位分配成一个人隔着一个位置坐着，戴着口罩看电影还是有些不自在，真正放映了一会后就丝毫没有不自在了，电影还是得去电影院刷才能找到那种沉浸其中感觉的吧。看完电影之后就跑到对面的购物中心大楼里去吃羊蝎子了，大口吃肉、大口喝可乐的生活真是太棒了。 回家刷B站，首页推荐《bilibili 星访问》栏目采访《信条》剧组的视频，栏目组提问：如果你能时间逆流，你最想做什么事情呢？在电影里饰演男主的「约翰·大卫·华盛顿」带着坚定的眼神回答：阻止新冠病毒。我多么希望有一个人能够时间逆流回到过去做这件事，不管是谁都行。 再过两个星期，我就要一个人住了，室友都准备离职另谋出路了，而我却没有好好想一想，做任何打算。最近工作很不在状态，工作上的事情也不好细说就此打住。不过工作之余做的一些气象可视化的东西呢倒是全都放 Github 仓库里公开了。有人给我发邮件了解更多的东西我也友好的回复了呢，也有人给项目打星和 fork ，总之能够尽绵薄之力帮助到别人就是很有意义的事情，但也仅限于此我并不打算在气象这方面花时间了，算是脱坑立了一个 flag 吧。 十一假期，会去上海见见同学，然后在那边玩一圈。明年的话，大概也会去上海工作，不过现在还说不准。 计划博客也建站两年了，由于是基于 hexo 也渐渐摸到了前端和 Node 的一些东西，这让我对 Node 也有了一定的兴趣。博客的后续计划是有时间有想法就继续更着，不想写就鸽着，完全看心情。博客托管的阿里云服务器 ECS 明年二月份到期，续期也只有半年优惠，所以后面大概会放到 Github Pages 然后映射到一个新域名上。博客不止会写一些技术上的问题或者分享，也会记录一下平时发生的事情，因为生活也同样值得记录，更新的内容会基于下面四个方面： 日常 阅读 编程 动漫 日常会写一下去过的地方，发生的一些有趣的事情；阅读会写一些看过的书籍，最近在读一些不着边际的书；编程这个看情况更新(我实在太菜了ヽ(*。&gt;Д&lt;)o゜&gt;))，准备看一下 Node、libuv 学一下 C/C++ 了解更多关于操作系统和网络的东西，以及多了解 Java 工程化、微服务那一块；动漫就看下有没有发现有趣的番剧啦。当然，可能会鸽鸽鸽。 最后希望大家都能身体健康、生活开心，欢迎来访 (๑•̀ㅂ•́)و✧"},{"title":"地球ぎ","date":"2020-08-15T03:28:49.000Z","url":"/assugi/","tags":[["saint seiya","/tags/saint-seiya/"]],"categories":[["动漫迷","/categories/%E5%8A%A8%E6%BC%AB%E8%BF%B7/"]],"content":" 涙(なみだ)よりも 優(やさ)しい歌(うた)を与其流泪，不如听优美的歌声 かなしみより そのぬくもりを与其悲伤，不如拥抱那份温暖 世界(せかい)がそんなにも虽然明白这个世界 簡単(かんたん)に変(か)わるとは思(おも)わないけど不是那么简单就能改变的 静(しず)かに 闇(やみ)を 溶(と)かして但还是想着去净化黑暗 歩(ある)いて 歩(ある)いてみようと思(おも)う一步，一步地走下去 ゆっくりでも 近(ちか)づけるかな就算缓慢，也能慢慢靠近 夢(ゆめ)のカケラ 大好(だいす)きな人(ひと)梦镜的碎片和最喜欢的人 思(おも)い描(えが)いた 愛(あい)のカタチは在脑海中描绘出爱的样子 ずっとずっと 探(さが)しつづけて一直在不停地寻找着 あきらめる理由(わけ)を話(はな)すよりも与其诉说放弃的理由 出来(でき)ることを数(かぞ)えるほうがいいよね不如细数能做到的事 つまづくことがあって有过许多挫折 振(ふ)り返(かえ)りそうになって甚至想过回头 それでも それでも もう決(き)めたんだ即便如此，即便如此，我还是决定了 あなたのために 出来(でき)ることなんて为了你，我能做的事 たいしたことないかもしれない或许不值一提 でもそれでも 触(ふ)れていたいよ但是，但是，我还是想去触碰 かなしみより そのぬくもりを与其悲伤，不如拥抱那份温暖 ゆっくりでも 近(ちか)づけるかな就算缓慢，也能慢慢靠近 夢(ゆめ)のカケラ 大好(だいす)きな人(ひと)梦镜的碎片和最喜欢的人 思(おも)い描(えが)いた 愛(あい)のカタチは在脑海中描绘出爱的样子 ずっとずっと 探(さが)しつづけて一直在不停地寻找着 グルグル廻(まわ)る 地球(ちきゅう)ぎ咕噜咕噜旋转的地球仪 クルクル変(か)わる 時間(じかん)咕噜咕噜流动的时间 世界(せかい)の果(は)てに在世界的尽头 愛(あい)を喜(よろこ)びの先(さき)に遇见爱情，在欢乐的地方 夢(ゆめ)を实现梦想 ゆっくりでも 近(ちか)づけるかな就算缓慢，也能慢慢靠近 夢(ゆめ)のカケラ 大好(だいす)きな人(ひと)梦镜的碎片和最喜欢的人 思(おも)い描(えが)いた 愛(あい)のカタチは在脑海中描绘出爱的样子 ずっとずっと 探(さが)しつづけて一直在不停地寻找着 ららら…啦啦啦… 涙(なみだ)よりも 優(やさ)しい歌(うた)を与其流泪，不如听优美的歌声 かなしみより そのぬくもりを与其悲伤，不如拥抱那份温暖"},{"title":"ツキアカリのミチシルベ","date":"2020-08-10T14:09:17.000Z","url":"/tsukiakari/","tags":[["黑之契约者","/tags/%E9%BB%91%E4%B9%8B%E5%A5%91%E7%BA%A6%E8%80%85/"]],"categories":[["动漫迷","/categories/%E5%8A%A8%E6%BC%AB%E8%BF%B7/"]],"content":" 答えのない毎日が ただ過ぎていく時間が得不到答案的日子里 时间依然流逝如斯 これから先どうなるのだろう? わからない此后应当何去何从? 我无从知晓 闇よりも深い夜の孤独に 惑わされてた深邃幽暗的孤独之夜 迷惑不已 だれかに今気づいてほしい此刻希望谁能注意得到 ここから逃げ出したいから想从这里脱逃 窓から見える朝焼け 部屋に鳴り響く音阳光照进窗口 屋内声响回荡 アラームに起こされて 薄暗い中 家飛び出すよ无视黑暗中的危险 冲出这里 カバンの中には 何も変わらない平凡詰め込んで无论如何改变 也不会有变化 そしていつもの場所へ只有去向那地方 だれかが言った言葉が 気になって 惑わされて在意他人言语的话 只会让自己更加迷惑 争いたくなんてないから 何も言えない因为不想争论 所以相对无言 夢や理想はあるけれど 気持ちばかり先に行って虽有梦和理想 却无力实现 現実がずっと後ろから ボクを見てる只剩冰冷的现实 ねぇだれか教えて みんなそうなのかな?谁能告诉我 大家都是这样吗？ 今日が幸せなら それでいいと思えるって今天的幸福 若能维持多好 幼いころには 確かにあったよ童年之时 确实曾经拥有 夢を追いかけてた でもそれも遠い記憶不断追寻梦想 即使那是遥远记忆 答えのない毎日が ただ過ぎていく時間が得不到答案的日子里 时间依然流逝如斯 これから先どうなるのだろう? わからない此后应当何去何从? 我无从知晓 ツキアカリのミチシルベ 雲を越えボクに届け月光的指引 越过云端传达给我 進むべき道を照らしてよ 今日がどんなに壊れそうでも照亮前进的道路 就算今天依然悲伤 何があっても 何があっても 信じてたいから不论发生什么 也想去相信 あの日の遠い記憶 呼び覚ますから那时遥远的记忆 渐渐被唤醒 忘れないでね 胸に刻みつけ不要忘记 铭记心中 答えは自分の中に 必ずあるものだから因为答案必定就在自己心中 あきらめないで 強く生きることをやめないで不能死心 不要放弃生存的信念 悲しすぎて 前に進めない時でも即便是在悲伤的难以前进之时 共に悩み歩んだぼくらに我们共同迎接困苦 携手前行 風は吹く どこまででも无论何时何地 微风无处不在"},{"title":"Win10 Hyper-V 端口保留问题","date":"2020-07-25T02:28:35.000Z","url":"/win10-hyperv-dynamicport/","tags":[["Win10","/tags/Win10/"]],"categories":[["瞎折腾","/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"]],"content":"WSL2 真香，但是由于 WSL2 需要开启 Hyper-V 功能，最近遇到了运行一些软件时，提示端口已被使用或者端口拒绝连接的错误。导致 1024 ~ 13977 间的一部分端口被 Hyper-V 保留，tomcat、IDEA 等程序跑不起来。 端口无法使用 如上图所述，使用 hexo 预览博客网页时指定了 8080 端口，但是被拒绝访问端口了。不止 8080 端口，8005、8009 也都直接挂了，导致 tomcat 默认端口配置启动时，提示这些端口早已被使用，无法启动服务。于是，就去查看 8080 端口占用情况： 可以看到内部地址没有查到 8080 端口的进程，图中显示的 8080 端口是外部地址的端口，并不是本地进程使用的端口。所以情况就是：某些程序提示端口拒绝访问或者端口早已被占用，但是使用命令查询端口占用情况时，却发现端口根本没有程序占用过。 迷茫ヽ(*。&gt;Д&lt;)o゜&gt; 搜索了半天「端口未占用 却无法使用」，返回的结果都是：如何查询端口占用，关闭占用端口的进程。我可去特么的吧。偶然间，看到了一条说 Hyper-V 保留端口的回答，而WSL2 又是基于 Hyper-V ，我意识到了事情并没有这么简单 —— 我特么搜索的关键字不对。于是，使用 「Hyper-V 端口占用」搜索，终于看到了一点曙光。 原来是开启 Hyper-V 后，系统会保留一部分端口给 Hyper-V 使用，而 Windows 默认的动态端口的范围是：[1024 ~ 13977]，所以很有可能 8080 等端口被 Hyper-V 保留了。 可以看到 8080 确实被 Hyper-V 保留了… 关于动态端口动态端口的范围从 1024 到 65535，这些端口号一般不固定分配给某个服务，也就是说许多服务都可以使用这些端口。只要运行的程序向系统提出访问网络的申请，那么系统就可以从这些端口号中分配一个供该程序使用。比如 1024 端口就是分配给第一个向系统发出申请的程序。在关闭程序进程后，就会释放所占用的端口号。 解决办法重启或者重置端口都说重启能解决 99% 的问题，但是在 Hyper-V 保留端口这种情况下，还是得看人品和运气的；重启会重置端口保留范围，像我就重启了几次都还是端口被保留了(悲 使用命令重置端口的情况和重启差不多，都是看人品和运气。 修改动态端口范围 关闭 Hyper-V CMD 管理员下关闭 Hyper-V 控制面板 –&gt; 程序和功能 –&gt; 启动或关闭 Windows 功能 –&gt; 取消勾选 Hyper-V 修改动态端口范围 CMD 管理员下执行如下命令 查看端口情况 开启 Hyper-V CMD 管理员下开启 Hyper-V 控制面板 –&gt; 程序和功能 –&gt; 启动或关闭 Windows 功能 –&gt; 勾选 Hyper-V 之后重启电脑就好了，端口又能正常使用了。 参考 Hyper-V 和 IDEA 运行端口占用问题 Unable to bind ports: Docker-for-Windows &amp; Hyper-V excluding but not using important port ranges #3171 "},{"title":"刺猬的优雅","date":"2020-07-17T13:58:08.000Z","url":"/the-hedgehog/","tags":[["杂文","/tags/%E6%9D%82%E6%96%87/"]],"categories":[["碎碎念","/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"]],"content":"我的父母很富有，家里很有钱，因此我和我姐姐也算是很富有。尽管如此，尽管我是如此幸运和富有。但长久以来，我知道自己人生的终点，便是金鱼缸，一个大人们把时间花费在像苍蝇往同一面窗户上乱撞的世界。 但是可以肯定的是，我是不会到鱼缸里去的。这是一个深思熟虑之后做出的决定，今年学期末，在我12岁生日的那一天，下一个6月16日，165天之后，我将会了结自己的生命。 不能因为有想死的心，往后就要像烂菜帮一样地混日子，重要的不是死，也不是在哪个年龄死，而是在死的那一刻，我们正在做什么。在谷口的漫画书中，主人公在攀登珠穆朗玛峰时死去，而我的珠穆朗玛峰是拍一部电影。一部揭示为什么生活是如此荒诞的电影，别人的生活，还有我的生活，若一切皆无意义，那么至少灵魂需要勇敢面对。 像鱼缸里的金鱼那样度过一生，并终结于塑料尸袋之中。 鱼缸中红金鱼理论的典型，一心想避免像她母亲那么神经质，并变得比她父亲更加优秀的年轻女孩，生命对她来说是一场永远的战争，必须要摧毁别人来达到胜利。 追逐繁星，不像缸中金鱼那样终结一生。 当人们决定放弃生命，那是因为他们觉得，这样做合情合理，就像一次精美的过度，一次向着长眠的轻轻滑动。成年人特别不能接受死亡，然而这却是世间最平常的一件事。当做出的决定几乎不可能被理解时，我们需要做到万无一失。无法想象，某些人可能会用多快的速度，来阻止我们所坚守的计划。 我相信橡树超然独立之美，所以我也相信猫的超然独立之美。 米歇尔女士让我想起刺猬，浑身竖满尖刺，像一座真正的堡垒，但我认为，她和这些表面慵懒的小家伙一样，内心深处其实很细腻。性喜孤独，而且异乎寻常的优雅。 小津阳子，小津格朗的孙女。一个实力雄厚日本家族的唯一继承人，她将会放弃学业，嫁给一个家财万贯的银行家的儿子。进行了3天的戒毒治疗之后，在一成不染的家中，她将把四个孩子抚养成人。小津阳子最终会以离婚收场，变成抑郁成疾饮酒度日的亿万富婆。那我呢，我的命运写在脑门上了吗？我相信命运，所以我才想死去。但如果我们还可能成为我们尚未成为的自己呢？我们能不能无视命运的安排，活出真正的自己呢？ 有人选择从窗户跳下去结束自己的生命，我觉得他们疯了，我讨厌疼痛。如果不能结束痛苦，那死亡又有何用？ 不准猫出去。不准门房进来。 她没认出我。那是因为她从没见过您。 就像这样，一切嘎然而止。这就是死吗？再也见不到您爱的人再也见不到爱您的人。如果这就是死亡的话，那真和人们说的一样是个悲剧。 重要的不是死亡，而是人们死的那一瞬间在做什么。 我们都是孤独的刺猬，只有频率相同的人，才能看见彼此内心深处不为人知的优雅。我相信这世上一定有一个能感受到自己的人，那人未必是恋人，他可能是任何人，就像电影中的忘年之交：荷妮与芭洛玛。在偌大的世界中，我们会因为这份珍贵的懂得而不再孤独。 我们从来都是局限在自己根深蒂固的感知之中，却不能放眼看周遭的世界，而更严重的是，我们放弃认识他人，而认识的仅仅是我们自己，然而却无法在这些永恒的镜子上认清我们自己。如果我们认识到这点，意识到我们在别人眼里只看到了自己，我们是大漠中的孤影，也许我们可能会发疯吧。 像我这样一个一无是处的女孩，在富人的世界里奋斗，既无美貌也无惹人怜爱之处，既无往日辉煌又无雄心抱负，既非八面玲珑又非才华横溢，还没等尝试就败下阵来。我只是渴望一件事情：那就是希望别人能让我平静地度过此生，不要对我太苛刻，此外，我能每天花点时间，能够尽情满足自己的饥渴，足矣。 是否能把对于自己的希望寄托在别人身上？去期待别人不会太过苛刻地对自己。 或许只有拥有足够的力量，绝对的压倒性的力量，才能更… 好些人不能从思考中去了解是什么能让事物拥有内在的生命和气息，而是把一生的时间都花在讨论人和物，人就好像是机械的，而物就好像是没有灵魂的，然后凭借主观灵感去信口雌黄一番。 如果生活的脚步不是那么快，如果能有更多的时间思考，思考生命的意义，思考人与自然的关系，思考价值观的出入，人生会更有趣一些。 渐渐地我发现，周围的许多人不会思考，他们只是不断重复他人的观点来显示自己内心的独立。 人一开始只是求生存，然后又在一天晚上体会到一种享乐的愉悦感，所有因这种欲望而带来的虚荣心随即而至，它使得人类对单纯而高尚的东西不再抱有最初的幻想。 我们无法停住欲望的脚步，它赞美了我们，也谋杀了我们。欲望!它承载了我们，也折磨了我们。 人们相信追逐繁星会有回报，最终却像鱼缸里的金鱼一般了结残生。我思忖着如果从孩童时代就开始教育他们生命是荒诞不经的，那大概会容易些吧，虽然这样做可能会夺走孩童时期的美好时光，但是成人后却能获得大把光阴。至少，我们会免去一种创伤，身处鱼缸之中的创伤。 生命或许便是如此吧：有很多绝望，但也有美的时刻。只不过在美的时刻，时间是不同于以前的。就好比是音符在时间之内永远打了一个圆括弧，一个休止符，而在这外面，则是＂曾经＂之中的＂永远＂。 也许，最令人愤怒和最令人挫败的不是失业，不是贫穷，也不是对未来的不知所措，而是没有文化的感觉，因为当人们加载两种不同的文化，两种不可调和的象征性之间时是多么的无所适从，如果连身处何地都不知晓的话，又如何生存呢？ 聪明头脑能使成功的滋味变得苦涩，而平庸才会让人生充满希望 有时，成年人似乎会花一些时间坐在椅子上，思考着他们悲惨的一生。他们凭空叹息，就像总往同一个窗户上乱撞的苍蝇，他们摇晃、挣扎、虚弱，最终坠落，他们会扪心自问为何生活会让他们去他们不想去的地方。我讨厌这种虚假的自视清醒的“成熟”。 我们何必要在虚无飘渺的苍穹之中去寻找永恒呢? 如果你想拯救自己，还是先拯救别人吧，微笑或哭泣，这是命运180大转变。 伟大的作品是一种直观的形式，而这种形式在我们心中产生了一种超越时间的恰当感。 播种欲望的人必会受到压迫。 面对曾经，该做什么，如果不在隐藏的音符中，追寻永远。 与我家来往甚密的那些人全部走着同一条路：年轻时尝试使用他们的聪明才智得到回报，像榨取柠檬般获取知识、谋得精英职位，然后倾其一生都在愕然中思忖为什么这般费尽心思到头来却只落得毫无意义的人生。人们相信追逐繁星会有收获，而最终却像鱼缸里的金鱼一样了结终生。 寺院青苔上的山茶花，京都山脉上的紫色青花瓷杯，这转瞬即逝的激情中所绽放的纯洁的美丽，不就是我们所渴望的嘛？属于西方文明的我们永远无法触及的嘛？ 在人生的潮起潮落中仰慕永恒。 孤独而优雅，克制而情深。"},{"title":"搭建一个自己的 Gitlab CI Runner","date":"2020-07-04T11:53:00.000Z","url":"/gitlab-runner-in-docker/","tags":[["CI","/tags/CI/"],["docker","/tags/docker/"]],"categories":[["瞎折腾","/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"]],"content":"说起来博客使用 Travis CI 自动持续部署也一年多了，唯一的感受就是 CI 实在太方便了。正好最近工作的项目仓库都转到公司内部的 Gitlab ， 于是就想着能不能利用 CI 跑一些测试。 Gitlab CI/CD 简介 如上图所示，当我们提交代码到 GitLab 仓库后，满足指定条件后就会触发 Pipeline 进行自动化构建、测试、发布等。 Pipeline 可以包含一个或多个 Jobs 任务，一个 Job 里面可以包含多个流程，如下载依赖、运行测试、编译、部署。Pipeline 什么时候触发，分为几个流程，每个流程做什么，是在项目的 .gitlab-ci.yml 文件中定义。 GitLab CI/CD 整体流程GitLab CI/CD 的 Pipeline 具体流程和操作在 .gitlab-ci.yml 文件中申明，触发 pipeline 后，由 GitLab Runner 根据 .gitlab-ci.yml 文件运行，运行结束后将返回至 GitLab 系统。 .gitlab-ci.yml 文件.gitlab-ci.yml 文件是一个申明式配置文件，放在项目的根目录下，用 stages 定义 GitLab CI/CD 流程有哪些阶段，每个阶段分别干什么。如果有更复杂的逻辑，还可以编写脚本文件，并在 .gitlab-ci.yml 文件执行它。 GitLab RunnerGitLab Runner 是 CI 的执行环境，负责执行 gitlab-ci.yml 文件，并将结果返回给 GitLab 系统。Runner 具体可以有多种形式，windows、linux、docker 或 shell等等，在注册 Runner 时需要选定一个具体的 Executor。 🎯最简单的 Gitlab CI Runner经过几天的摸鱼，已经大概摸清了 Gitlab CI Runner 的用法，期间也遇到了很多的坑，所以这篇文章就用来记录踩的坑吧。 由于公司内部的 Gitlab 没有提供公有的 Runner，所以想要把 CI 用起来还得自己动手。于是乎，我就去了解了下如何搭建自己的 Specific Runners 。这里在 gitlab.com 新建一个最简单的项目，只有一个 test.py 打印输出 hello world 的项目。 定位到 Gitlab 项目的 Settings =&gt; CI/CD =&gt; Runners 下，可以看到配置特定的 Runner, 总结下大致有这么几步： Install Gitlab Runner Register Runner Config gitlab-ci.yml Start the Runner Install Gitlab Runner首先，需要安装 Gitlab Runner，可以选择的平台也有很多：Windows、Linux、macOS、Docker 等等；看了下 Windows 下的安装步骤，我果断选择了 WSL 安装。 WSL 我安装的子系统是 Ubuntu 18.04 LTS，下载 gitlib-runner_amd64.deb 安装包。 下载好之后即可执行安装命令： See Install GitLab Runner manually on GNU/Linux:  你也可以添加 Gitlab 官方仓库源，再通过包管理来安装： See Install GitLab Runner using the official GitLab repositories:  Register Runner安装好 Gitlab Runner 之后我们就可以注册 Runner 绑定到我们的仓库，到 Gitlab 项目的 Settings =&gt; CI/CD =&gt; Runners，展开可以看到下图所示的内容： Install GitLab Runner Specify the following URL during the Runner setup:  Use the following registration token during setup: xxxxxx_KVcfgoXH2hAc Start the Runner! 其中，第二三步的 URL 和 token，是在执行 Runner 注册命令中会用到的。执行如下注册命令： Linux注册Runner命令 相信上面的这些都难不倒你，关于 WSL 上的 Docker ，这里我们需要着重提一下。你只需要下载好 Docker Desktop 并安装好，安装好之后我们进入 settings 设置界面，进入到 General =&gt; Use the WSL2 based engine 开启；然后进入到 Resources =&gt; WSL INTEGRATION ，允许 Docker 访问 WSL2 ，并启用安装的发行版。也就是说，我们不用在 WSL 上再安装 Docker 了，只需要安装 Windows Docker 桌面版程序并让其在后台运行着即可。值得注意的是，如果你退出了 Docker 桌面版，WSL2 里也访问不到 Docker 服务了。 See Docker Desktop WSL 2 backend:  上面的 python:alpine 镜像是安装 Docker 后就默认存在的镜像，实际上 Gitlab Runner 默认是去拉 Docker Hub 的镜像创建容器来运行任务的，如何拉取本地自定义镜像运行任务在后面我们会提到，这里我们需要做的是把镜像名书写正确。 注册好了 Runner 之后，我们刷新 Settings 下的 CI/CD 页面，展开 Runners，可以看到我们的 Runner 注册成功了，并且 runner 描述 和 tag 标签也显示出来了： 你可以用 gitlab-runner verify 命令测试注册的 Gitlab-runner 和 gitlab 仓库是否能连通，出现图片上的小绿点就说明连通了。 Start the Runner⚠ 注册完之后，记得运行 Gitlab-runner ，如果你未禁用 gitlab.com 提供的 Shared Runners ，且未运行注册的 gitlab-runner，则会跑 gitlab.com 提供的 Shared Runners；如果禁用了 Shared Runners，且未运行注册的 gitlab-runner ，CI 会一直处于 Pending 状态。 注意：运行注册的 gitlab-runner 后，默认情况下不会运行没有 tag 的 job，也就是没有标记 tag 的代码提交，此时触发 Pipline， CI 会一直处于 Pending 状态，则需要去 Runners 编辑页面将「Run untagged jobs」选项勾选。 Config gitlab-ci.yml接下来，我们用 Gitlab 的 WEB-IDE 给项目增加一个 gitlab-ci.yml 配置文件，它是 gitlab 项目用来和 Runner 交互的一个配置文件，我们添加如下内容： 在 WEB-IED 页面提交更改，这个时候就会自动触发 CI Pipelines， 并执行相应的 Job，Gitlab Runner 监听到之后就会使用 Docker executor，并拉取指定的镜像 (gitlab-ci.yml 中未配置 images时，会拉取注册Runner 时输入的默认镜像) ，接着从 Gitlab 拉取项目的仓库源码代码检出 master 分支，执行 gitlab-ci.yml 中的 “step_script” 作业脚本。 🚀Runner 拉取自定义 Docker 镜像上面的例子过于简单了些，接下来我们来新建一个更复杂的 python opencv 项目，并且在 Docker 里安装 Gitlab Runner，Gitlab Runner 使用 Docker executor 拉取我们自定义的包含 python 运行环境和 opencv 库 的 Ubuntu 自制镜像。 python opencv 项目的结构如下图所示： Docker 安装 Runner Docker 注册 Runner Docker注册Runner命令 自定义 Ubuntu 镜像从 Docker Hub 拉取 Ubuntu 镜像： 拉取的 ubuntu 是最新的版本，大概 73M ，接着我们使用这个镜像来运行一个容器： 由于拉取的 ubuntu 镜像都是最简单的 BASE 镜像，空空如也 73M ，连 vim 都没有我可去你他么的吧，更别提自带些什么环境了。所以，我们需要先安装下 vim (没有 vim 怎么配置源…)，再去配置下 ubuntu 的源为国内的源，最后安装 python 和 python opencv 库。 容器环境安装 配置完这些东西你肯定想骂人了，但还是请忍住，要骂看完了文章再骂吧。 最后我们新建一个 test.py 测试下 opencv 安装情况： 耐心点安装完这些，一个包含 python 运行环境和 opencv 库 的 Ubuntu 容器环境就完成了。接着我们需要停掉容器，导出容器为 ubuntu_v1.tar 文件，再导入 ubuntu_v1.tar 文件为镜像： 最后，我们可以看到 ubuntu-opencv 的镜像了(未指定版本会默认设置为 latest)，这里因为需要测试容器中 opencv 环境是否安装成功，所以干脆把这个测试容器的快照文件中导入为镜像了，这样就能保证不会出现问题。自制镜像推荐使用 Dockerfile 来制作。 gitlab-ci.yml 配置 Girlab Runner 拉取本地镜像如果这个时候，我们去跑 CI，会出现如下错误： ERROR: Job failed: Error response from daemon: pull access denied for ubuntu-ci, repository does not exist or may require 'docker login' (docker.go:119:0s) 这是因为我们在 Docker 里的 gitlab-runner 未运行，项目会默认去找 Gitlab.com 提供的 Shared Runners，默认会去拉取公网上的镜像，公网上没有我们自制的这个 ubuntu-opencv 镜像就出错了。所以这里我们还是把 Gitlab.com 提供的 Shared Runners 禁用 (要想测试自己指定的 Runner 关掉 Shared Runners 吧)；禁用之后，如果我们的 gitlab-runner 未在运行，则 CI 会一直处于 pending 的状态。 所以我们需要在 Docker 里运行我们的 gitlab-runner 容器，由于 gitlab-runenr 默认去拉取公网上的镜像，所以还需要配置下 gitlab-runner 的配置文件，Docker 安装的 gitlab-runner 配置文件在 /srv/gitlab-runner/config/config.toml。设置 pull_policy 指定 Runner 拉取镜像的策略，有三种选项： pull_policy策略 pull_policy = “never” pull_policy = “if-not-present” pull_policy = “always” never 策略完全禁用镜像拉取。如果您将 Runner 的 pull_policy 参数设置为 never，那么用户将只能使用 Runner 所在的 Docker 主机上提取过的本地镜像。当使用 if-not-present 拉取策略时，Runner 将首先检查映像是否在本地存在。如果是，则使用图像的本地版本。否则，Runner 将尝试拉取镜像。always 是默认拉取策略 (未设置 pull_policy 执行默认拉取策略)，将确保始终拉取镜像。当使用 always 时，即使本地副本可用，Runner 也会尝试提取镜像。如果你希望拉取镜像时可以使用缓存就用 always 吧，它的拉取速度很快，因为所有的镜像层都被缓存了。 See Using the if-not-present pull policy:  如果我们对 config.toml 这个配置文件做了修改，则需要重启 Docker 中的 gitlab-runner 来应用修改。 做完了这些并确保 Docker 中的 gitlab-runner 容器在运行，提交下代码或者手动去触发 Piplines，就可以执行 CI，拉取我们在 Docker 中自制的 python 和 opencv 环境的镜像运行 gitlab-ci.yml 中的脚本任务了。 最后最后请享受成功的乐趣吧，看下成功的 CI 任务图： 注册完 Gitlab-runner 之后，记得运行 Gitlab-runner 。如果你未禁用 gitlab.com 提供的 Shared Runners ，且未运行注册的 gitlab-runner，则会跑 gitlab.com 提供的 Shared Runners；如果禁用了 Shared Runners，且未运行注册的 gitlab-runner ，CI 会一直处于 Pending 状态。如果需要拉取本地自定义镜像，则还需要配置 config.toml 文件中的 pull_policy 规则。 注意： Gitlab Runner 默认有效期是 90 天；保证你注册 Runner 的机器的 IP 为一个静态 IP，否则 IP 变了触发 Pipeline 后就找不到 Runner 了。 参考 Install GitLab Runner manually on GNU/Linux Install GitLab Runner using the official GitLab repositories Docker Desktop WSL 2 backend local system volume mounts to start the Runner container To register a Runner using a Docker containe Using the if-not-present pull policy 花椒前端基于 GitLab CI/CD 的自动化构建、发布实践 项目地址：   "},{"title":"网络抓包那些事","date":"2020-06-21T09:46:00.000Z","url":"/network-bag-snatching/","tags":[["抓包","/tags/%E6%8A%93%E5%8C%85/"],["接口","/tags/%E6%8E%A5%E5%8F%A3/"]],"categories":[["博客开发","/categories/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/"]],"content":"最近摸了几天鱼，给博客加了两个菜单页，ONE 每日一图和电影日历。这篇文章我想讲一下如何快乐的摸鱼🐟~ 也曾向往文艺的青年摸鱼之前先来回忆下以前的事情。说起来，我在高中的时候就开始在 QQ 空间上写日志，最开始是看别人写日志，后面觉得光看别人写不过瘾，也就开始了自己写。当然，内容完全没有什么立意也没有主题和深度，当初竟然还能不嫌丢脸光明正大的发出来，以至于我现在将这些日志全部设置为仅个人可以查看。 随着岁月的无情摧残，我也已经从学校里的学生成长为不务正业的社畜摸鱼怪了。写日志的习惯倒是延续到了写博客文章，不过我已经不是那个向往文艺的青年了，我开始变得世俗起来，这又是另一回事了，有时间的话我还真想写写我自己。岁月无情的将一个曾经向往文艺的青年，变成了一个可悲可叹的摸鱼怪。 好了，回忆就先到这了。既然是向往文艺的青年，那肯定会接触一些文艺生活的信息啦。这里我想介绍下的是「ONE·一个」： App「一个」每天只为你准备一张图片、一篇文字和一个问答韩寒主编和监制 原《独唱团》主创成员共同制作复杂世界里, 一个就够了. One is all. 这是官网介绍的 slogan，看得出来确实是有文艺的人会下载的 APP。一个 APP 里，每天都会推送一张图片和一段图文的「每日图文」，有点像一言的感觉。我倒是蛮喜欢这种每日图文的方式，有时候这么一张图和一段文字会让我们从浮躁的生活中脱离出来看到生活其实还有诗和远方，然后再重新融入滚滚红尘。所以，我就想把 ONE 每日图文加到博客里，既方便自己阅读也能让更多的人看到。 ONE 每日图文接口理由就是这么个理由，所以如何把每日图文的信息给抓到呢？ 大概有这么几种方式： 写个爬虫，每天爬 ONE 的每日图文； 谷歌一下，看看电脑网页端有没有暴露 API； 抓一下移动 APP 上的包，找出接口。 由于，我用的是 Hexo 静态博客，没有服务端而我又不愿意花钱买服务器，就为了这么一个小功能就写爬虫太不轻量了，所以爬虫就砍掉吧 (其实是我不会写爬虫ww。 控制台抓取接口地址作为程序员，当然得学会面向搜索引擎编程了，也很快就找到了ONE 网页端暴露的 API 接口。在 ONE 官网移动端就暴露了这么一个每日图文的接口： 调试当然得打开控制台啦，Chrome 也为我们提供了模拟移动设备的环境，点击控制台左上角的【device toolbar】图标就可以切换模拟移动设备访问网页了。很幸运，我们很快就找到了每日图文的网址 API，这是一个 XHR ajax 请求，带了一个_token 参数。在控制台中，找到该请求的 Initiator 栏查看 Request call stack。最后我们会找到该请求的发起位置： 这个 _token 是随着  HTML 页面返回的；在第一次访问这个页面时，有一个 Set-Cookie 返回头，我们的 ajaxlist 请求的请求头需带上 Cookie，值就是刚才的Set-Cookie 返回的值，然后我们还得带上查询参数 _token。 我们可以在 postman 上测试下设置 _token 和 Cookie 后是否能正确访问到 API： 可以看到我们已经能通过接口拿到一组数据了，当天的数据 (最新一条数据) 位于数组索引 0 的位置。 CloudFlare 反向代理接口地址但是，我们还不能直接在我们的网站中发起 Ajax 异步请求调用这个 API，因为存在跨域问题。跨域问题我们可以使用 CloudFlare 的免费 Workers 功能反向代理 ONE 的 API 接口，同时设置下跨域请求头。设置反向代理时，需要发起两个请求，第一个请求的地址是  页面，我们需要拿到第一次访问页面时，响应头的 Set-Cookie 返回值和 HTML 页面脚本中的 _token 值。第二个请求的地址是  ，设置请求头 Cookie 的值为刚刚拿到的Set-Cookie 返回值，以及带上 _token 查询参数。 这样的一通操作下来，我们就能在我们的网站中拿到 ONE 每日图文的数据了。具体的代码参见：OneTodayWorker.js 借鉴和参考了 disqusjs 官方提供的 CF 反代示例， ONE 每日图文使用方法查看 OneToday 仓库的 README 文件。 由于，第二种方式就能实现我所需的功能，所以移动设备抓包获取接口地址就没考虑了ww。 豆瓣电影日历说起来，豆瓣也经历过 14 个年头的站点了，而豆瓣也好像一直没有令人印象深刻的 slogan ，倒是豆瓣电影和书影音档案成为了相关内容的百科全书。豆瓣大约在 2017 年推出了 『豆瓣电影日历』 纸质日历，每天推荐一部高分电影，并且在 IOS 的 Today Widget 上有电子版『豆瓣电影日历』和纸质日历同步，这个功能很多人并不知道。 豆瓣电影日历和 ONE 每日图文的展示形式类似，以一张图一段文字每天推荐一部高分电影。那么能不能像 ONE 每日图文那样抓取接口地址呢？ IOS 上使用抓包软件经过一番折腾，我排除了网页端暴露 API 接口的方式，爬虫也没有办法，因为只有在 IOS 上才有豆瓣电影日历。所以，问题就来到了如何在 IOS 上抓包的问题。IOS 上有很多款抓包软件，其中比较出名的两款是： Stream，免费，功能也完善 Thor，付费且功能完善 这两款软件的安装步骤都基本一致： 安装证书：设置 &gt; 通用 &gt; 描述文件 &gt; 进入描述文件详情 &gt; 安装 信任证书：设置 &gt; 关于本机 &gt; 证书信任设置 注意： 请做好第二步，信任证书，否则使用 Stream 抓取走 https 协议的站点时，会报kCFStreamErrorDomainSSL 错误，Thor 也一样要信任证书。我就是在这边被坑了一阵子 ( 抓包软件的原理如下： HTTPS 解析原理Thor 实现的 HTTPS 解析方式是 MiTM （中间人欺骗）：需要用 Thor SSL CA 根证书针对特定域名生成叶子证书，用此叶子证书跟客户端（请求发起方）通信，并成功解析流量。客户端（请求发起方）如果做了证书本地验证（即验证跟它通信的叶子证书是否是它原来商定好的证书），那么 Thor 生成的叶子证书跟客户端之间的 SSL 连接将会失败，自然就也解不了这类流量。总之 HTTPS MiTM 不是万能的，望知晓。 所以，Thor 和 Stream 都需要设置开启系统 VPN 代理功能，才能进行抓包，这就意味着你无法在手机上一边开启VPN 科学上网一边使用 Thor 或 Stream 来进行抓包。Thor 并非万能，只工作在系统 HTTP 层: 不支持非 HTTP 流量(TCP, UDP)及不经过系统 HTTP 代理的流量。 点此查看 Thor 使用帮助，特别感谢 东方幻梦 同学给我 Apple ID 白嫖 Thor。 抓取电影日历接口抓包这个操作，其实很简单，先把其他软件从后台切出防止不必要的网络请求。然后，进入软件首页点击按钮开启抓包，iPhone 切到 Today Widget 小组件页面(需先开启豆瓣每日电影 Widget )即可，返回抓包软件，即可看到抓到的请求。 最重要的是请求头和请求行，我们可以在 Postman 上，输入上述请求头及请求地址和查询参数： 请求头，按抓取的请求头设置即可，查询参数中我们只需要替换 date 参数即可；_ts 是时间戳和 _sig 签名应该是对应关系所以可以不用管。返回头中 Cookie 的过期时间貌似设置的是不过期，最理想的情况是我们使用抓取到的请求头和查询参数配置我们自己的请求即可，需要替换的只是 date 日期。而 Cookie 和 签名这些是否会随着时间改变这些也无从验证(按道理是不会变的)，没办法别人的接口又没公开，只能这么干啦。 反向代理电影日历接口和 ONE 每日图文一样，我们还不能直接在我们的网站中发起 Ajax 异步请求调用这个 API，因为存在跨域问题。这里同样可以使用 CloudFlare 的免费 Workers 功能反向代理 API 接口，同时设置下跨域请求头和查询参数。 关于代理的配置，比 ONE 每日图文的配置还要简单，因为电影日历可能会涉及到版权问题，所以这里的反向代理代码就不公开了。因为豆瓣的公共 API 都下线了，所以现在都需要加上 apikey，个人使用应该也没啥大碍。 还有一个接口返回的图片 url 在博客网站上出现 403 防盗链的问题，这里我使用了  提供的服务进行反代解决。 最后可以在本站导航栏上的 One 图文 和 电影日历 菜单项查看，放下效果图： 这两个接口都只在个人博客使用，方便查阅每日更新，不用于商业或者其他用途。如有侵权，请联系我删除。 参考 图文 - 「ONE · 一个」 官方API分析 disqusjs CF Workers 反代示例 感谢感谢 cloudflare.com 提供的免费 Worker 服务。"},{"title":"永远的MAYDAY，永远的五月天","date":"2020-06-01T13:35:00.000Z","url":"/may_day/","tags":[["五月天","/tags/%E4%BA%94%E6%9C%88%E5%A4%A9/"]],"categories":[["爱音乐","/categories/%E7%88%B1%E9%9F%B3%E4%B9%90/"]],"content":"「来到鸟巢花了多久的时间？有人比较快，20分钟。有人比较久一点，两个小时。我也知道有很多人从很远的地方坐火车来，搭了三天。但是，我要告诉你们，五月天踏上鸟巢花了十三年。」 从 1999 年正式组成乐团「五月天」到 2012 年鸟巢十万人演唱会，五月天他们用了十三年。从最开始的阿信、怪兽、石头、玛莎组成的四人乐团「So Band」到冠佑加入后的 「五月天」。从 1999 年正式出道到 2001 年乐团各成员因服兵役休团，2003 年复出到 2020 年，五月天走过了21年。 而在今年 2020年的5月31号，在每年5月给大家唱歌的日子里，五月天带来了线上演唱会——MAYDAY 2020 LIVE IN THE SKY 线上演唱会。 其实，我也是昨晚八点多听到朋友提到这件事，才后知后觉地打开浏览器。然后，听到阿信在唱「突然好想你」，我第一次正儿八经地听五月天的歌是在 DVD 上放 「突然好想你」的 MV ，真是奇妙的感觉。 我和大多数人一样，并不是很清楚五月天一路走来的种种，也只是今天才去看了他们的历程；但我为什么一听到线上演唱会就立马去听了呢？大概只是因为他们在纯粹的做音乐、唱歌，我也只是在纯粹的听他们的歌，不需要其他的东西来连接，唯一的连接只是他们的歌。 「我不是很会唱歌的主唱，不是很会写词的作词人，能有今天，承蒙大家的喜欢。」阿信的这句话可能真不是谦虚，而是当时主唱走了之后，其他四个人给出他做主唱的理由令他无法反驳：“你吉他玩得最差，贝斯弹得最差，鼓也敲得最差，只能当主唱。” 于是阿信就这样做了主唱，时间往前推一点，念高中时参加合唱团的选拔中，他只唱出了三个音节，立马就被老师刷掉了：“你不行啦！” 一路走来，别的乐团有的因服兵役或者其他原因解散了，有的已不温不火，只有五月天从没有冷场；大概真正纯粹的音乐是永远不会失去魅力的——音乐带给人的影响。 document.getElementById(\"spkj\").style.height=document.getElementById(\"spkj\").scrollWidth*0.76+\"px\"; 无数场演唱会以后，站在鸟巢体育场的舞台中央的五个40多岁的大叔，和当年北京无名高地为30个观众唱歌的青年，和当年在炸鸡店为了免费炸鸡唱歌的少年，和如今从公司拿出500万捐给武汉的五月天，都是一样。我们每个人，也都逃不过岁月与光阴。可有些人始终有少年般纯真的心。他们叫五月天。 关于五月天的音乐我只想说这些，了解更多关于五月天的内容，请访问下面的两个参考链接。 参考 五月天所属公司捐500万：那群快50岁的老男孩，依旧值得爱 五月天wiki "},{"title":"Vue + SpringBoot 的几种部署方式","date":"2020-05-22T07:41:00.000Z","url":"/vue_develop/","tags":[["Vue","/tags/Vue/"]],"categories":[["瞎折腾","/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"]],"content":"前端工程化及 React、Angular、Vue 等框架逐渐成为新的前台页面展示的解决方案后，前端页面逐渐摆脱了「套模板」的开发方式，真正的成为了一个工程项目，也引入了构建和编译、打包这些项目步骤。本文将简单阐述 Vue + SpringBoot 项目的几种部署方案。 有哪些部署方案 ？前端项目在经过 webpack 编译 (babel转译) 打包转为浏览器可以识别的 js 代码和 html 、css 等静态资源之后，就可以等待部署发布了。 结合前段时间写的一个 Vue + SpringBoot 项目，我在部署的时候尝试了以下几种方式： Vue + SpringBoot 打成 jar 包进行部署； Vue + SpringBoot 打成 war 包进行部署； Vue 项目和 SpringBoot 项目都单独部署； 容器部署 ( 这就涉及到知识盲区了，逃 ) 下面将对以上的前三种部署方式进行简单地阐述。PS：本文仅仅是实验性质的尝试，仅供参考，关于跨域问题已在后端项目配置好，这里不赘述。 Vue + SpringBoot 以 jar 包部署采用 Vue + SpringBoot 打成 jar 包进行部署，我们需要先将 Vue 项目进行编译打包成静态资源，再把这些静态资源复制到 SB 项目的 static 静态资源文件夹下，记住：你需要对这些静态文件的访问权限都放行(前后端分离会采用 token 校验权限)。 最后再执行 mvn package -Dmaven.test.skip = true 把 SB 项目打成 jar 包。因为打成 jar 包后会内嵌 tomcat，所以我们只需再执行 java -jar xxx.jar 即可运行我们的项目，最后输入访问地址：ip:port/index.hmtl 即可访问我们的 Vue 单页应用啦。 你可能会对上面的放开的 window.config.js js 资源感到疑惑？实际上这个 js 是我们给单页应用注册的全局配置变量： 以下代码是判断是否是开发环境，开发环境直接读取 .env.development 文件中的配置变量，生产环境下我们不把配置变量写到env.production，而是单独写到一个外部 window.config.js 里，记住你需要在 index.html 中手动引入或者自动注入这个 js，以根路径地址的方式。 如果你把这些变量写入 .env.production ，那么一旦你更改了这些变量你又得重新去打个包，我可去他么的吧。实际上，也用不着重新打包 ，你可以去 /dist/js 目录下的 js 文件里来查找所有这些变量然后改回来，但这也非常容易出错。 当然一些重要的配置变量 ( 比如 secret )，你最好不要写在 window.config.js 里，你应该写到 .env.production 文件里然后使用 process.env.VUE_APP_client_secret 读取变量加密下。 关于「运行时环境变量 —— window.config.js」请参考：为 Single Page App 提供运行时环境变量 关于「.env.production、.env.development 环境变量和模式」请参考：Vue-CLI 环境变量和模式 干掉 # hash vue-router 默认 hash 模式 —— 使用 URL 的 hash ( /#/path 模式 ) 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。 Vue-CLI 官网给我们提供了另外一种路由模式：history，使用history模式时，浏览器地址栏就不会有很丑的 # 号了。当然官网也说了：玩好这种模式 ，你需要在服务端增加一个覆盖所有情况的 URL 候选资源，匹配不到静态资源就返回我们的 index.html，这个页面就是我们的单页应用页面。 那么 SB 项目想要配合 Vue 使用 history 模式在浏览器地址栏显示正常的 URL 应该怎么做呢？ 0x01 Vue-Router 配置首先，Vue-Router 得开启 history 模式和配置 base 路由基路径： 这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。 注： vue.config.js 里的 publicPath 决定 js、css 等静态资源打包之后的引入路径，如果打包后 dist 目录的 js、css 路径放在后台项目的 static 目录下，则 publicPath 直接写 ‘/’ 根路径即可，不要和 Vue-Router 配置的 base 路径搞混淆了。如果你想和 base 路径 ‘/vue’ 保持一致，你需要将 js、css 等静态资源放到 static/vue/ 目录下。 ‘Uncaught SyntaxError: Unexpected token &lt; ‘ 错误是由于请求的 js、css 等静态资源路径不对，导致返回的内容是 html 页面，浏览器也就无法正确解析了。 0x02 后端配置 如果你后端使用了带 token 的请求验证 url 的方式，上面的配置可能就无效了，会返回没有权限访问的信息。 新建一个Controller 匹配 ‘/vue/**&#39; 并都返回 index.html： 最后记得放开：’/vue/**&#39; 的访问限制： maven 打好 jar 包运行后，浏览器访问：ip:port/vue/index 就大功告成啦。 Vue + SpringBoot 以 war 包部署0x01后端配置首先将项目 pom.xml 中更改打包方式为 war 包，将内置 tomcat 配置为 provided 模式： 启动类继承 SpringBootServletInitializer 并重写其 configure方法，做如下配置： jar 和 war 启动的区别： jar包: 执行 SpringBootApplication 的 run 方法，启动 IOC 容器，然后创建嵌入式 Servlet 容器war包: 先是启动 Servlet 服务器，服务器启动 Springboot 应用(SpringBootServletInitizer 实例执行 onStartup 方法的时候会通过 createRootApplicationContext 方法来执行 run 方法)，然后启动 IOC 容器 0x02 tomcat 配置进入 tomcat/conf 目录下 ，将 server.xml 中的端口号修改为前端配置的后台统一接口路径(相同则跳过)，因为我们部署的是一个项目。 将 war 解压到 tomcat/webapps/ROOT 目录下 (图省事2333)，然后去tomcat/bin 目录下执行启动脚本启动项目。当然你也可以解压到 webapps 任意目录下，假如是 app 目录，你得将 Vue 项目的 publicPath 配置为 /app，最后的访问地址将是ip:port/app/vue/index，其中 js、css 等静态资源的地址为 ip:port/app/js/xxx.js、ip:port/app/css/xxx.css，而 Vue 管理的路由是 ip:port/app/vue/** 。 Vue 项目和 SpringBoot 项目各自单独部署Vue 项目单独部署，那必然是部署到 Nginx 上了，配合 WSL (Windows Sub Linux) 开发体验上升了一个档次 (WSL + VS Code 真香)。 0x01 Vue 项目部署到 NginxVue-Router 采用 history 模式，在 nginx.conf 中加入：include /etc/nginx/conf.d/*.conf; 然后进入 conf.d 目录 vim app.conf： 如果，Vue-Router 里配置的 base: /，那么做如下配置： Vue-Router 里配置的 base: /app 子路径，那么做如下配置： 以上是 Vue-Router 采用 HTML5 histroy 模式部署，具体请参考 Vue-CLI 官网：html5-history-模式 当然，如果你不打算用 history 模式你又能接受浏览器地址栏中丑陋的 # 号，那么你就用默认的 hash 模式，就没那么上面那么多屁事了。 0x02 SpringBoot 项目部署SpringBoot 项目部署，以什么方式部署你开心就好，不过记得放开资源哟 ~ 总结不管以什么方式部署，请记住后端放开静态资源的访问，以及注意 Vue 中的静态资源地址和路由地址的配置。至于哪种方式好，那肯定是分开部署好，Nginx 配置简单多了，而且分开部署的好处也很多(最大的好处当然是方便甩锅了，雾)。 Vue 路由默认的使用带 # 的 hash 模式来模拟一个完整的 url，如果你想省事那么就采用默认的hash模式；如果你在意浏览器地址栏 url 的美观，就采用 history 模式，不过你需要在后端加一个覆盖所有情况的候选资源然后都返回 index.html ，及前台 Vue 应用里面配置一个路由以覆盖所有的路由情况，然后在给出一个 404 页面。"},{"title":"执着于理想，纯粹于当下","date":"2020-05-07T01:05:00.000Z","url":"/three_year/","tags":[["生活","/tags/%E7%94%9F%E6%B4%BB/"]],"categories":[["碎碎念","/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"]],"content":"满打满算，今天刚好是北漂满三年的日子(但我一无所有)，也许应该写一篇博客文章？人生果然是需要点仪式感和回忆来纪念的。那就写一篇吧。 2017事情要从大三快要结束大四即将到来那会开始说起，在我们学校大四是基本不上课的，那不是很爽天天摸鱼，到最后答辩就过去了？我当时就是这么想的，结果没过多久听到通知的我发现我大错特错了。辅导员一腔热血地在那告诉我们：”大四没课了，你们有以下几个选择，要么去考研；要么去考事业单位公务员；要么去「校企合作」然后实习工作。“ 有的同学已经做好计划准备好了去考研，也有的同学报了公考培训班准备进入体制内，剩下的就是我这样头铁根本啥都无所谓的人。考研这事我一直觉得不考名校读出来也没啥含金量，顶多就是多带个硕士学位证书的优势，虽说我这样的半吊子大学没挂过科，但受够了考试的折磨自然不会想去考研了。至于公务员一类的我也压根没有想法，我受不了整天都待着，过一种一眼就能看到底的生活。还不如早早出去见识下这个社会，体验下职场的感觉。 于是就这么做出了去实习找工作的选择。那么「校企合作」实习是怎么一回事呢，简而言之就是学校和培训机构合作这个是有学分的 ( ？, 然后培训完去找实习，大四学费照交但是培训机构不收钱。听起来这就像学校和培训机构合作然后双方获利 (确实如此。培训机构宣讲确实很有一套，忽悠的人一愣一愣的好像是还行哈，可是一了解学校钦点的那几家培训机构没一个是靠谱的，其中还有一家因为不靠谱后面被学校取消资格可想而知这水有多深。而我和隔壁的几个同学也很硬核，没有选择学校钦点的，自己找了一家，当然和学校对着干是没啥好下场的。你得去找各种主任签字同意是自愿去找校外机构的，其中一趟一趟地跑办公室的确令人很心塞，好倒最后都是会同意的，最坑的就是大四学费照交自己找的机构也得掏钱(后面自己默默还掉了2.4W 艹)。看着学校钦点的那些个机构，我还是毅然决然地坚持自己的选择。 事实上，培训机构就是培训机构，忽悠到一个就赚到一个。但是事情也没有那么糟就是了，至少我们那种学校教出来和没学过的也没差了，经过回炉重造之后还是能写几个像样的网页功能的。当然，每个学校都有努力了很厉害的人和不努力的，很明显我是不努力的那类人但我不会怨天尤人，自己觉得不后悔没白过就行了。 虽说是经过回炉重造能写几个像样的功能了，但本着遵从自己的内心，我和几个同学都老老实实地去找实习了，并没有包装工作几年几年这样的简历。然后就是凄凄惶惶地投简历等待着一家企业来收留自己，然而简历石投大海还没有激起什么浪花之前，我就因为牙齿牙疼牙龈肿被折磨得痛不欲生，如果你牙疼过你绝对能体会到的绝对会的。在找实习和牙疼这两件事情的混合打击下我差点买票回家了，我这么辛苦地跑到北京来还没真正地静下来看看这座城市，就要离开了吗，不，我怎么能这么简单就回去了呢。 在和家人沟通之后，我先去医院看牙，由于牙齿咬到硬物导致有裂隙然后感染神经，进而牙龈周围肿了一大圈；后边就是一次一次地去医院，根管治疗，拔牙神经，上牙冠，花了好几千。慢慢地牙齿也渐渐好起来了，然后就是来回几个小时的地铁去实习面试，雪上加霜的是这时候住处因为违建在赶人走和离实习公司太远了，于是在实习的第二天下午离开公司就忙着租房子。在公司附近的地方我一个一个按着墙上贴的小广告打电话联系房东租房，是的这时候你平时能言善辩的同学却派不上一点用处…租是租到了房，就是简陋到只有床和桌子。后面也慢慢地在这公司实习，也就是现在待的这家公司。这一个多月来，看牙医，找实习，租房子，都是亲历亲为一件一件事情解决掉，我算是真正感受到了生活的残酷之处，总有事情会让你突然成长起来，如果没有那就是事情还未发展到这一步。 在这之后，生活也慢慢趋于平稳，一切都有了希望的曙光。虽然实习待遇就那样，但是先留下来先稳定下来就会有机会的，当时的我只有这一种想法。那时候我才逐渐明白：身体健康、家人平安、工作顺利真的一点都不简单。 2018关于2018年，你可以看我写的这篇文章–迟到的2018总结篇了解2018年的事情。 2019关于2019年，你可以看我写的这篇文章–2019年终总结了解2019年的事情。 今夕今年回家，亲戚又一直在劝我回家考公务员，而我一直都有点排斥这个职业 。想起之前看到过的一段话，很符合我的认知及价值观： 「我不想考研，也痛恨成为中国的公务员。在我心里，职场上的波谲云诡都比当公务员来得高尚。我厌倦了整个社会争破头地要当公务员，厌倦了听人们谈论公务员的待遇有多好，工作多轻松，厌倦了公务员的孩子大手大脚花钱跟富二代似的，在我心里比富二代还不如，人家花的至少是自己家的钱。这些人在谈论的时候有没有想过这花的是纳税人的钱，有没有想过绝望中的小孩在冬天饿着肚子，趟过一条条河，翻过一座座山去念书。目前这样的环境，一旦接受这样的职业，想要洁身自好太难了吧。任何职业的竞争，卑鄙，险恶都比这可以饶恕。」 其实，很多年前看完这段话，我就已经决定了不会走向体制内。尽管家里人都劝我考公务员我都是礼貌性的听完后回复说会试试的，我还是坚持着自己的步调坚持自己当初的选择，至少遵从自己的内心会来得心安理得和快乐一些吧，我是挺喜欢这样的自己的。 最近在工作群里，和一些比较熟悉的同事从工作也聊到了公务员这个话题，大家都认为从大环境下来看，公务员是很好的选择，稳定且收入可以保证，也有一定的社会地位。当然，我也是这么认为的，谁不希望稳定的生活稳定的收入呢？ 不过，当我问到我适合做什么工作时，一位前辈却说到，我适合干程序员。他这么说，我心里是有点开心的，但是很多时候我都是在否定自己，觉得自己只是当初一腔热血地以为自己适合编程和做开发，但其实我可能并没有天赋可能也不能干出什么成就。我只是从小喜欢折腾电脑一类的电子设备，觉得自己必须在相关方面做出成就来，从最开始玩小霸王卡带游戏，到XP上玩流星蝴蝶剑以及开始玩智能手机。事实上，我玩游戏也玩的很烂很不在行没有天赋。 尽管，很多人说编程入门很简单，很多人都在转行到开发这一行，但我认为，其实入门一点儿也不简单。很多人的入门真的就是只是用不同语言打印出一个’Hello World’，会写几个函数实现一些简单的计算问题。而在我看来真正的入门是：能独立从设计到开发到部署再到维护的一整个简单项目的流程。真正的大项目背后都是有很多不同技术支撑的，往广度上看你得懂前端网页开发、服务器后台开发、计算机网络，往深度上看你得懂系统架构、信息安全、操作系统等。更别说现在比较火的科学计算、机器学习、人工智能、大数据等，要想全面的认识一窥全貌，需要学习相当多的知识。了解的很多大佬，其实都是从小或者很早就开始编程了，日积月累其实就已经超过很多有天赋的人了，而往往很多人都觉得自己很有天赋。以绝大多数人的努力程度之低，根本谈不上拼天赋，一万小时天才理论是真的值得去实践的。 所以我每次否定自己的时候，就告诫自己需要更加的努力了。虽然北漂有痛苦，有希望，每个人的命运都像那雾霾一样不清不楚的，但是我还是愿意执着于理想，纯粹于当下。人难免根据当前的处境美化过去的回忆，好像之前发生过的种种事情也就那么回事无关紧要，所以此刻的我显得云淡风轻。当别人说你看起来总是那么平静与淡然，只有你自己心里知道，而今的平静与淡然是用多少眼泪学回来的；此时此刻的波澜不惊，又是曾被多少波澜几乎淹没过。生命中所有的挫折与伤痛、所有的经历，都是为了造就你锻炼你。不要总说岁月残忍，它其实温柔了你。 后续： 最近看到了一篇文章，深以为然 —— 十年学会编程，编程就是兴趣+堆时间，没有捷径可走，唯一的捷径就是踏踏实实地走捷径。 英文原文：Teach Yourself Programming in Ten Years"},{"title":"hexo在Node.js v14.0下构建空html的问题","date":"2020-04-23T01:25:00.000Z","url":"/a-bug-in-nodejs-v14/","tags":[["hexo","/tags/hexo/"],["nodejs","/tags/nodejs/"]],"categories":[["博客开发","/categories/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/"]],"content":"记录下 hexo 在 Node.js v14.0 下构建空 html 的问题。 Travis CI 构建出错昨天推特上有推友在问 Travis CI 构建 hexo 博客静态网页时构建空 html 页面的问题，她说遇到了从未见到过的报错信息。于是我就 Bing 搜索了下报错部分的关键词： Bing 还是比较靠谱的，第二个搜索结果就给出了与报错内容问题类似的一个 mongodb 论坛网页。 然后我就点进去看了下，他使用的 Node.js 版本是 v14.0-rc，下面有人回复说也在 v14.0 下遇到了同样的问题。好像有点石锤是 Node.js v14.0 的锅，v14.0 是前几天(21号)发布的最新特性版本 (LTS不香吗 。于是我就回复推油说可能是 Node.js v14.0 的锅，后面她指定了下版本就正常了。我就跑去看了下她的 Travis CI 构建历史，配置文件里写的环境是 nodejs ，版本配置的是 stable，也就是最新的稳定版本。然后 log 信息显示安装的 node 环境是 v14.0，看来问题石锤了 ( stable NO! 。所以别用什么最新版本，害，官网不是说得明明白白推荐大多数人使用 LTS 版本吗？ 重现 bug真理来源于实践，于是我决定亲自去重现下这个 bug 。由于我用的是 Nodejs v12.14.1，重现 bug 需要 v14.0 但是我后边又不需要这个版本。所以我需要一个可以切换 Nodejs 版本的工具，重现完bug就滚回 v12.14.1。python 下有 Anaconda 管理版本，Nodejs 也有 nvm(Node version manager) 做版本管理。怎么安装 nvm，你去搜呀。下图是我安装 v14.0.0 步骤的截图： 然后就是执行 hexo clean &amp;&amp; hexo g 来测试下是否能正常构建了。果然，出现了那个诡异的 bug，石锤了是 Nodejs v14.0 的锅。 解决方式解决方式当然是别用 v14.0.0 最新版本了，hexo 还没做兼容，吓得我赶紧把 Travis CI 配置文件里的 Nodejs 版本指定下，别再用 stable了它会自动使用最新的稳定版本！ 总结不要轻易切换到最新版本，请使用 LTS 长期支持版本，Travis CI 构建时指定具体的 Nodejs 版本，不要图省事填stable，它会自动安装最新的 Nodejs 版本。 后续后面将此 Bug 提交到了 hexo#issue-4257，后边也有人重现了同样的错误，见hexo#issue-4260；以及有人反应在 Nodejs v14 出了同样的问题 hexo#issue-4263，官方维护团队的建议是用低版本的 Nodejs 以避免此类错误的发生。而上面报的警告(Warning: Accessing non-existent property ‘lineno’ of module exports inside circular dependency)是因为在 Nodejs v14 下引用 stylus 时出了问题。警告的复现在 issuecomment-618857837 提出，具体复现情况见下图： 而执行 hexo g 构建空 html 的问题则是因为 Nodejs v14 下使用了严格的参数类型检测，从而导致 hexo-fs 的 fs.promises.copyFile 方法在 Nodejs v14 以下版本正常构建，而在 v14 版本上则出现了问题。具体的解释请查看 hexo-fs#pull-59，hexo-fs 涉及到 hexo-cli 及 hexo 构建静态网页从而导致构建出了空的 html，详情见评论 issuecomment-618815265。此问题已在 hexo-fs hexo-fs#pull-60 修复。"},{"title":"pjax下如何使用fancybox预览图片","date":"2020-04-19T08:31:00.000Z","url":"/fancybox-pjax/","tags":[["fancybox","/tags/fancybox/"],["pjax","/tags/pjax/"]],"categories":[["博客开发","/categories/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/"]],"content":"在 pjax 下使用 fancybox.js 插件预览图片。 pjax熟悉单页应用的朋友都知道，在点击一个链接的时候，是不会做页面跳转的，而是仅仅做页面刷新不会造成整个页面闪一下的感觉。局部刷新的体验肯定是比页面跳转好得多的，pjax 就是为此而出现的。H5 pushState 和 replaceState API 的出现让 url 可以摆脱丑陋的hash # 号做页面刷新，结合 popstate 事件监听浏览器的前进后退，更改内容和页面 title 。 pushState 的功能主要是修改 url 地址却不会跳转页面，该 url 也会存放到浏览器的历史记录中去。 replaceState 和 pushState 的功能类似，但是它不会将 url 放到浏览器历史记录中。popState 监听浏览器的前进后退，且能获取设置的 state。 Kratos-Rebirth 主题采用了pjax 技术做页面刷新而无需页面跳转，它的原理主要如下： 当用户点击 a 标签的时拦截超链接； 拦截后做两步操作，使用 ajax 获取 html 页面代码和做 pushState 操作。 这样就能做到页面刷新而不会闪一下地跳转页面 (ajax 是好文明)。当然这种方式不是最好的，更好的方案是观察者模式，在 state 改变时触发而不是点击 a 标签的超链接时触发，但 hexo 的倾向就是简单化，所以观察者模式的 pjax 就砍掉吧。 Kratos-Rebirth 主题 pjax 的具体 实现： fancyboxfancybox 是一个图片预览插件，能以模态框弹窗的形式更好更方便的缩放查看图片。在给 Kratos-Rebirth 主题加入 fancybox 图片预览插件时，我是按照 landscape 主题的 fancybox 插件来实现。 引入 css 和 js在head.ejs 里引入 jsDelivr 的 jquery.fancybox.min.css 及在 foote.ejs 里引入 jsDelivr 的 jquery.fancybox.min.js (版本需和 landscape 使用的 3.5.7 一致)。 注册 fancybox在主题目录下新建一个scripts文件夹(如果没有)，然后把 fancybox.js 拷贝一份到这个目录下。 最后在页面就绪加载函数里加入初始化代码： 注：上述的 .kratos-hentry 选择器是 hexo 文章部分 article 标签上的 class 样式名，请务必对应起来。 开始食用到这应该就差不多能食用 fancybox 预览图片了，好耶。如果你这么想，就大错特错了我的朋友。当你正准备打开浏览器页面测试下 fancybox 图片时，你不知道摆在你前面的是一个大坑。 嗯？咋没有模态框弹出来？咋跳到图片原始链接的页面了？你是否有很多问号？？？控制台说 pjax 不能解析 PNG，然后下面是一堆乱码 (其实就是图片)。你可能会想 fancybox 服务没用，关 pjax 毛事，但确实是 pjax 的锅。 pjax 过滤 fancybox 请求看看上面的代码，fancybox 给文章 DOM 节点下的 img 包裹上了一层 a 标签，然后当你点击它时 pjax 就起作用了。既然出了 bug 那就硬着头皮修呗，那 pjax 拦截时，判断下 url 是图片的后缀是不是有效呢？理论上是可以的，但这样你得去判断图片类型这未免有点复杂，我只是想用个插件啊。更好的方式是，过滤 fancybox 包裹在 img 上的 a 标签，那就给 a 标签加个 rel 属性过滤。最后的代码是这样的： 其实，也可以用 $(this).data(‘fancybox’) 获取 fancybox 给 img 包裹的 a 标签的 data-fancybox 属性值，然后判断等于gallery 的话就跳出回调函数返回 false 。但很明显，过滤器的方法更优雅一些。 总结fancybox 会对 markdown 文件里的 ![](imgurl) 做超链接包裹，&lt;img&gt; 也同意会被处理。但是，如果你用 js 编程的方式添加图片的话，fancybox 是不会对图片做处理的即不会被超链接包裹。 Kratos-Rebirth 采用 jsDelivr CDN 引入各种 css、js 依赖，在选择 npm 源时，直接搜 fancybox 最新版本在 3.0.1；然后就打算用 github 的源，这里记录下如何用 jsDelivr 链接到 GitHub 的源： 你的用户名/你的仓库名@发布的版本号/文件路径 最后发现，npm 源下搜 fancyapps 关键词才能找到最新版，有点搞 (雾 。你可以去 查看我提交的 fancybox 插件 PullRequest。 后续因为 fancybox 默认是采用 hash 模式，即在 url 后边加 # 号弹窗预览图片；这会导致该 url 被添加到地址栏及浏览器历史记录中去，当 popstate 事件监听时会出现图片弹窗在其他页面的错误以及重复的历史记录。因此，在Kratos-Rebirth#commit-ddf0417 我们禁止了hash模式 $.fancybox.defaults.hash = false;，fancybox 给图片包裹的 a 链接不再出现在地址栏和浏览器历史记录中，fancybox 应该是使用了 replaceState 方法实现这一特性。至此 fancybox 弹窗预览图片的功能已基本完善。"},{"title":"你从未见过的全新版本","date":"2020-04-18T02:31:00.000Z","url":"/kratos/","tags":[["Kratos","/tags/Kratos/"]],"categories":[["博客开发","/categories/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/"]],"content":"你从未见过的全新版本，这一次重新定义本站 (划掉 在挂着基于 icarus 魔改的主题一年之后，我终于下定决心换下一个主题 Kratos-Rebirth；静态博客的本质就是换主题 (雾 。在这里非常感谢 @糖喵🍭同学 在无数个月黑风高的晚上积极地维护和更新 Kratos-Rebirth，如果你也觉得这个主题很赞，你应该去  点一个⭐，不要嫌麻烦，这可能是最好的支持方式。 那么，就来看看本次如何重新定义本站的吧 x 全新的面貌 必须得吹一下，Kratos-Rebirth 主题渲染后的页面真的很好看，而且全站采用 pjax 技术做到了类似 vue 单页应用的页面渲染效果，提高了用户访问页面时的体验。 移动端的颜值和体验也是非常棒 (๑•̀ㅂ•́)و✧，阅读体验也很赞。是不是感觉跃跃欲试了 (搓手.jpg disqusjs 基础评论模式 Hexo 等静态博客由于没有后端程序，其留言评论是真的让人很纠结很头大，总结下有以下几种主流方式： valine 结合 LeanCloud gitTalk 配合 github disqus 和 disqusjs 基础评论模式 以上三种方式都可以 (不做比较)，我比较偏爱 disqus 的评论服务，但难受的就是不开代理评论服务就嗝屁了。对于那些没有代理手段的用户是看不到已有的留言评论的，这一点劝退了很多访客，体验真的不好 ( 我完全没有访客 ) 。好在上有政策，下有对策，disqusjs 提出了反向代理的解决方案。 现在，没有开代理的访客也能看到留言评论了，如果第一次加载评论基础模式失败，您需要点击重载才能加载出来；如果您想留下一个评论，您还是需要开代理，因为 disqusjs 仅仅只是拿到评论列表进行展示 (没错，如果你真的想留下评论，开代理吧，我的朋友。这里，着重讲一下，如何利用 CloudFlare 提供的免费 Worker 来代理 disqus 的 API 地址 (白嫖真爽啊。 CF Workers 反向代理首先，你需要登录到 CloudFlare， 然后找到 Workers ，选择 Free 计划 (土豪请随意选择)；然后你可能需要填一个 xxxx.workers.dev 的域名地址，填好之后点击 创建 Worker，worker 名字随意但这里建议填 disqusjs-api。进入编辑页面，把官方示例 CF Workers 反代项目 里的内容复制到左侧脚本框中，弄好之后再点击右侧发起 HTTP GET 请求测试，如果出现 200 OK，那就说明成功了。 disqusjs 配置我的 disqusjs 配置如下： api 这里得注意下，不是填  而是  ，请在后边加上 /api/ ，因为我们需要代理的是 disqus.com/api/ 。apikey 在 页面中可以找到 ，请使用 Public Key !!! 更合理的托管方式由于 Kratos-Rebirth 主题在维护和更新，后续会有新的功能加入所以我们必须得同步更新；直接把主题 Clone 到 Blog 项目的 themes 文件夹下，Github 并不会提交嵌套仓库的文件夹。别问我为啥不用 submodule，我完全不会那东西也不想用 (理直气壮 。所以这次我打算把主题也托管在 github 仓库得了，然后 Travis CI build 在执行 install 时 clone 下主题放到 themes 文件夹下即可。 主题托管主题我托管在 vensing/Kratos-Rebirth仓库，有两个分支： master 同步 Candinya/Kratos-Rebirth 的源码 custom 放我博客用到的主题代码，包含一些自定义修改和私人配置等 你需要将 Candinya/Kratos-Rebirth 添加为远程源以便同步其更新： 这样，Candinya/Kratos-Rebirth 库更新了，master 分支同步下，最后在 merge 到 custom 分支即可。由于主题托管在 Github，因此博客根目录下的 themes 文件夹便可以删除了，你需要在 .gitignore 添加配置，忽略该文件夹。最后的主题仓库的分支图大概长这样⬇： Travis CI 配置由于主题放到了 github 仓库，所以 Travis CI 的配置还得修改下，具体就是在执行 install 时 clone 下 vensing/Kratos-Rebirth 库的 custom 分支(这个分支才包含了主题的私人配置项)。只要能保证在执行 hexo clean &amp;&amp; hexo g 之前把主题 clone 下来即可。 以下是我的Travis CI 配置文件： 详细的配置文件在 Gist 上： 一些其他事情在更换主题时，也遇到了很多问题，比如说：Kratos-Rebirth #issues-4；糖喵🍭同学很有耐心的都修复了。当然，咱也不能完全白嫖，于是提了一个简单的 Pull Request：Kratos-Rebirth #PR-3，新增 RSS Feed 和修复了表格无样式的问题。 开源确实不是一件容易的事情，所以你应该马不停蹄地给那些好项目点个⭐，或者积极地去参与贡献；而不是一味地要求创作者们解决问题。 最后，庆祝下本站终于换了新面貌。好耶(๑•̀ㅂ•́)و✧"},{"title":"你离真实的自己有多远","date":"2020-04-05T14:16:00.000Z","url":"/thought/","tags":[["2020","/tags/2020/"]],"categories":[["碎碎念","/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"]],"content":"虽然 2020 年才走完四分之一，但是对于所有人来说，这都是特别的一年。时间走到今天，也就是「2020-04-05」，我们也依然参与并见证了很多历史： 全球大流行病，新型冠状病毒席卷全球，全球停摆； 全球金融危机，美股数次熔断，各国股市暴跌； 东京奥运会延期； 全国高考推迟一个月。 所有的这一切都是起因于「冠状病毒」，而这一切并没有停止的迹象，还在继续发生，像一场持久战一样难打。这篇文章可能会像流水账一样，又臭又长，但有些东西思前想后还是记录下来。 一月份，17号回家前一天，我还在和同事聚着餐，期间也听到了不明肺炎这个词，我有点不明所以毫不在意，根本不知道一切都在潜移默化的发生着。17号晚上托着行李箱从北京西坐上火车回长沙，18号早上8点经停武昌站，11点到长沙。 回到家待了一两天，看见朋友圈有人转发丁香园的疫情实时动态，我才后知后觉地去网上看各种信息。也在家人群里第一个开始提醒出门戴口罩，不过大家都重视起来且都戴着口罩的时候是正月初一那天。后面大家都老老实实地窝在家里，停止走亲访友。也劝了好几次父母不要出门，但也有劝不住的时候，大多数时候都在家陪着他们。 一月底前后，微博上也早已经炸开了锅，物资拦截和疾控中心不作为、红十等各种上热榜、热搜，及撤热搜轮番上演。各种谣言和辟谣，事情在发生各种戏剧性的转变、反转，整个把人搞懵了。说起来作为从事有关互联网方面的社畜，我获取消息的速度竟然有一种打游戏延迟卡顿的感觉，真是让人羞愧。不过我还是会整点活看看外面丰富多彩的世界的。 也差不多那几天开始，我开始更多地关注推特上的信息和电报上的疫情播报频道，推特上的信息比起微博来至少更加理智一些。但两个我都在看，难的是甄别和过滤信息。国内深入报道且评论比较中肯的媒体当属「三联生活周刊」，微博上看的@子陵在听歌，他分享的多数是专业性的疫情医学信息。 人总是活在情境中的，当我看到一个个医院竟然向社会请求捐赠、医生因缺乏防护设施发生感染的时候，我在想这个世界到底怎么了？当我看到犹如人间炼狱的疫区、情绪失控的一线医务人员、求诊无门的患者，我也有点愤青这是什么人间疾苦啊？以及看到各种家庭遭遇的各种不幸，我也差点崩溃，艹，这都过的什么日子啊？ 「你要记住今天你的悲伤你的愤怒你的耻辱你的痛苦，你要记清楚了。等到他们踩在尸骨上唱起那些虚无的赞歌时，你要回想起你此刻的感受，你绝对，绝对不要加入他们」 也是这时候，我开始想，平时一片祥和的赞美评论，等到出了这事却忙着撤热搜和删帖；一昧的赞歌没有甚至不允许异议的国度，难道是真的乌托邦吗? 爱祖国——这是壮丽的事情，然而还有更壮丽的事情，那就是爱真理……我并不想学会带着闭上的眼睛、崇拜的大脑、封上的嘴巴去爱祖国。 当然上面这话可能有点言过其实，我其实并不是信仰真理的教徒；抱歉，我信仰孤独。 关于是否爱国及所谓的标准这事我也懒得和别人去争辩，也不想去发表什么键政评论(我博客还想要呢¬_¬)；也不会去过多的在意键盘侠的言论，拙劣的语言攻击在理智的人面前显得如此无知且苍白无力。我慢慢地发现，你是不需要向别人解释什么的，即使是真理，因为不相信的人总不相信，相信的人不需要解释。而且我们有的时候确实要抱着感恩之心去对待乌合之众，因为有了它们，才显得我们出淤泥而不染。 「Lots of the existential risks-the worst possible things that could happen to humanity, such as nuclear war, global pandemics or rogue artificial intelligence, are human-made.」 人类总是会从历史中学到一些教训的，世界也会变得更好，一切都会回归正轨，而这一切都是那些平凡的英雄换来的。 在如今这个喧闹嘈杂的大环境下，大多数人都人云亦云；但总是会有少部分人会自己去甄别思考的，希望大家都能独立思考，心存质疑，保留异议。最后祝大家：身体健康、家人平安、工作顺利；虽然这十二个字很简单，但是真的一点都不简单 。"},{"title":"To You","date":"2020-02-17T02:50:02.000Z","url":"/To_You/","tags":[["可塑性记忆","/tags/%E5%8F%AF%E5%A1%91%E6%80%A7%E8%AE%B0%E5%BF%86/"]],"categories":[["动漫迷","/categories/%E5%8A%A8%E6%BC%AB%E8%BF%B7/"]],"content":"To You —— 雨宫天 あなたと初めて会った日のことは与你初次邂逅的那天よく覚えている直到现在也还历历在目 ショピングモールのエレベーター在购物中心的观光电梯里その窓から見た透过窗户遠くにきらめく観覧车の光远远地看到摩天轮闪烁着的灯光キラキラと輝いていて一闪一闪地在绽放出光芒とても綺麗だった非常的美丽 きっと あの光の下には我想 在那光芒下たくさんの人たちの笑顔があって一定会有很多人在绽放着笑容吧でも私には ちょっと眩しすぎたの但是这对我来说 却有些太过耀眼了眺めているうちに在眺望的同时涙が溢れていた泪水不经意间溢出了眼眶 思い出は私を臆病にする回忆让我变得胆怯楽しければ楽しいほど越是开心的时候それを思い返すのも辛くなるので在回想的时候就越越会让我痛苦自分の弱さを思い知らされるので会让我回忆起自己的弱小みんなに迷惑をかけちゃうので会给大家增添麻烦だから 三年前に所以 在三年前「もう 思い出を作らないよにしよう」で「再也不去创造回忆了」私は决めた我这样下定了决心 「これまでの記憶をなくしてしまいたい」って「能够失去至今为止所有的记忆」私は祈った我这样向上天祈祷「プログラムだけで自動的に生きる存在になりたい」って「能够成为一个只靠程序来自动运行的存在」私は願った我这样许下了愿望そんなの どれも叶わないで哪怕我明明知道自分で分かっていたのに这种事没有一个能够实现 あの日 エレベーターの中で私は那天 在电梯里的我思い出にをし潰されそうで 立ち尽くしていたの被回忆折磨得几近崩溃 只能一直傻傻地站着何度も何度も上下するエレベーターから电梯无数次升起降落降りることもできずに而我却并没能走出去ずっと 観覧车を眺めていた一直 看着远处的摩天轮 あなたと目が合ったのはね その時なんだよ和你四目相对就正是在那个时候哦まさか そのあなたと 後にこうしてパートナーになるなんで没想到的是思うでもみなかった后来会和当时的你成为了搭档 私の今があるのは我现在拥有的一切あの日 あの场所で あなたが私を見つけてくれたからかもしれない也许就是因为那一天 在那个地方 你发现了我吧 とても不思議で とても幸運で那是一场多么不可思议的 多么幸运的とても運命できな 巡り合わせ命中注定一般的邂逅 この出会いを 私は忘れることはない这场邂逅 我绝对不会忘记あなたとパートナーになれて よかった能够和你成为搭档 真的是太好了 "},{"title":"2019 年终总结","date":"2020-01-05T11:58:53.000Z","url":"/2019/","tags":[["日常","/tags/%E6%97%A5%E5%B8%B8/"]],"categories":[["年终总结","/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"]],"content":"时光荏苒，白驹过隙。 2019 最后的几天里，刷微博的时候偶然间看到了一位关注好友分享的网易云音乐年度报告的微博动态，内容是：呐呐呐呐呐，我也是老二次元了 X)。 原来又到了年度报告的日子，仔细看了下他的微博附图，二次元占比 51%，TOP10 大都是日语歌曲。真二次元 (无误)。 于是，后知后觉的我，打开了网易云音乐，查看我的 《年度报告》 ： 2015.04.11，我们第一次相遇，一转眼都 1729 天了 233 小时里，一共听了 3964 首歌 流行 53%，二次元 25%，原声 6%，偏爱流行音乐，但二次元和原声也是我的菜 08 月 17 日，03 点 18 分，夜深了，我还在听着梁静茹的 《勇气》 (是谁给我熬夜的勇气，原来是梁静茹，那没事了) ステレオポニー 是我今年最爱的歌手，TA 的歌，我今年 听了 234 次 … 真只有机器才能将时间和数字记录的这么准确，要我肯定记不清哪天开始使用的网易云音乐，哪天凌晨3点还在听歌等等，人的脑容量确实很大，却记不住这些个事情。 有一说一，网易云音乐的 《年度总结》 策划的挺不错，每一帧的图片都突出了重点(重点也就那么几个字2333)，时间和数据记录也让人感叹自己彷佛是被全面“监控”了。虽说是被“监控”着，但日推还是蛮不错的，也没推什么其他乱七八糟的东西。 现在的应用大都有自家的「用户画像」，分析用户各个维度之后准确推送相关内容。说实在的我其实很不喜欢这种方式，在你看完一个东西之后 ，能一口气能给你推十个，之后你看到的内容就基本上是与之高度相关的内容。猜你喜欢，相关推荐等等这看起来是挺不错的给你看你感兴趣的，但大多数应用都有些在“自作聪明”，经常是一股脑的推荐之后，就让人不可耐烦甚至想注销再见。这种推荐估计正是那些不用思考用户的菜，看完一个接着下一个省了不少时间，相关推送它不香吗。相比之下 RSS 自主订阅倒是能很好的针对主观意愿进行筛选，所以我一直都很喜欢这种自我掌控信息的方式而不是被信息来左右，等一场 RSS 的文艺复兴。 好啦，咱们不是介绍网易云的年度报告和研究用户画像的，说回年终总结正题。 普通的生活今年呢，年初搬了个家，租了自如的房子，也离公司更远了，成功的体验到了北漂的感觉 —— 挤地铁。早上七八点和晚上六七点的地铁是人流量最高的时候，所以我一般是7点左右出门，下午五点四十多开溜。虽然能稍微错开通勤高峰期，但还是前后左右都是人，不过朝九晚五一来一去也就习惯了这种节奏。 因为是整租的房子，所以有一个小厨房和一个小客厅，刚住进去的时候去超市买了锅碗瓢盆、油盐酱料等等，之后就开始自己下厨做饭烧菜。在自己亲手下厨后发现，洗菜切菜是很耗费时间，烧完菜后满脸油烟，以及很感谢咱妈默默地给家里做了那么多年的饭菜，自己却没怎么帮个忙打下手。 味道、卖相算不上很好，但自己做的总得自己吃下去吧 (真自食其果)。所以，今年基本上都在自己做饭吃，随着猪肉从十几块涨到四五十块甚至更贵之后就很少买猪肉吃了，真吃不起。买猪肉的钱，用来买其他肉它不香吗？ 因为厨房窗子得开的原因，天气十分热或者天气十分冷的时候也就不自己做了，厨房虽然有抽油烟机但根本顶不住啊。也学到了某些远传式燃气表电池没电之后阀门就会关闭，燃气就打不开火了(乖乖买电池备用)。 普通的工作今年上半年的时候，996 ICU 项目火了，首当其冲的就是互联网大厂，和我没啥关系貌似。不过单单靠一个项目就能改变这种情况么，结果是显而易见的并不能，所以也就是各种媒体号、公众号在那瞎带节奏蹭蹭热度分析这分析那没得出个所以然来。 下半年9月份开始，因为项目工期和验收的原因，也加了好几个月的班，深深体会到了没有空闲时间的无力感。说 996 加班是幸福福祉的就是瞎扯，除非你真的对你的工作爱的深沉，愿意为爱发电那就当我啥都没说。虽然加班时间也会划划水，但一周六天朝九晚九令人身心俱疲。不论什么工作，都总会有加班这样的情况，主要的还是看你如何高效的划水了哈哈哈。 工作做的内容也是杂七杂八的，但本质上还是网页地图和可视化这块，以我自己的视角看大概算是入门。就是简简单单地使用 API 加载数据显示，外加自己调样式布局之类，至于投影换算、空间分析这种专业级别的还任重道远。 比较有成就感的就是绘制风场动画了： 扒了某个网站的 js 源代码，移植到了 Cesium 平台上，放到了 cesium-wind 仓库里，期间也学习了开源协议的一些东西，收获还是挺大的。 番剧网易云音乐的 《年度报告》 二次元 25% 还是分析的蛮准确，今年听了很多番剧的 OP、ED，所以后边日推基本上都推的是日语。自从这几年开始，我听得很少新生代歌手的歌曲，风格转向怀旧、粤语、日语这些上边，这很大程度上是受番剧的影响。电视剧一类看的很少，时间长剧情也不愿意花时间去消化，综艺天生不爱看，所以自然就和二十多分钟一集的番剧达成交易 py : )，缺点也很明显啦，一周一集能给你鸽个 6 天。 今年的年度游戏是 《只狼》，如果要评今年我看过的年度番剧，那必定是非 芳文社 的 《ゆるキャン△》 ——摇曳露营 莫属了。 芳文社？？？思考了0.01秒之后我点击了追番。不用我多说大家都懂得吧，猛男必看它家的番。这里还是简单地 ( 科普) 介绍下芳文社： 芳文社是一家位于东京都文京区的出版社，以日本首家发行周刊、漫画杂志和四格漫画的出版社而驰名，并一直在出版漫画杂志。总部位于水道桥站和东京巨蛋城市之间。企业口号标语是百合漫画的殿堂。百合控, 萝莉控的天堂！这世界欠了芳文社一个诺贝尔和平奖 虽然在漫画领域创造了多个第一，但是在三大出版集团围攻下于90年代末期陷入危机。 在2000年后成功凭借萌系漫画重新崛起。 当今百合, 空气系和萌系漫画王道出版商(无误)芳文社出品必有百合，真业界良心就对了。 芳文社三大番： 向阳素描 请问您今天要来点兔子吗? 轻音少女 《向阳素描》、《轻音少女》、以及《请问您今天要来点兔子吗》，这三部作品无论是从原作、动画销量、以及各种其他因素来看，在芳文社旗下的所有漫改作品中影响力都是数一数二的，因此得名“芳文社三大番”（或“芳文三大番”）。 《向阳素描》作为芳文社首部漫改动画，凭借着在当时很高的反响为后续的其他漫改作品打下了基础；《轻音少女》凭借着超高的动画销量以及广泛的社会效应，提高了芳文社的形象，其地位至今无人能及；《请问您今天要来点兔子吗》作为如今一直保持着超高人气的门面担当，带领着其他作品共同将芳文社在业界的地位巩固至今。 引自萌娘百科()，文字内容默认使用《知识共享 署名-非商业性使用-相同方式共享 3.0》协议。 说了这么多芳文社，接下来就是划重点了： 《ゆるキャン△》 ——「摇曳露营」自2018年TV动画播出以来人气一路高涨，引起的社会反响不亚于，甚至一度超过了芳文社三大番 ——《向阳素描》、《轻音少女》、以及《请问您今天要来点兔子吗》，有比肩三大番之势。 这是一部日常番，很多日常生活场景，属于那种有时间可以看看，没时间更得看不能错过的类型。大致讲述的是： 这是，某个冬日的故事。女高中生抚子刚从静冈搬家到山梨，为了观赏“绘制在千元纸币上的”富士山，骑着自行车来到本栖湖。但不巧天气是阴天，没能看到富士山，抚子累得当场躺下睡着了。当她醒过来的时候，时间已是深夜。在第一次到达的地方，早已忘记了回家的路途。一个爱好露营的女孩子凛，向不安胆怯的抚子伸出了援手。为了温暖冻僵的身体，两人点燃了篝火。噼啪噼啪的柴火爆音，在静寂的湖畔显得沁人心脾。围着篝火，抚子和凛一边捧着咖喱面一边对话。终于，两人期盼已久的瞬间到来了。“看到了……富士山……”抚子与凛，由两人的相遇而衍生的户外系girls story开始了。 比较让人欣慰的是，动画没有按照一贯的加社团的剧情开展下去，而是抚子加入露营社团后邀请凛加入，凛拒绝了，但最后凛还是和社团的人一起去露营了。具体剧情不剧透啦，目前在爱奇艺 VIP、Acfun 免费可看。 当代萌豚文化主要是建立在人与人的关系或者说“羁绊”上，但是摇曳露营给出的答案是，人可以享受恰切的孤独与距离，从人以外的事物得到快乐，同时也不排斥与人交往的乐趣。志摩凛是我见过的，最成熟的动画角色。大家都在谈论“相遇之后翻天覆地的变化”，但是摇曳露营说“相遇之后不改变什么也可以”。 最后今年其实还学了点日语，也仅限于五十音图，平假名，片假名，长音，促音和一些日常用语，总之是有了一个开始。加班鸽了很多次课，这里就不多 说了，明年会继续努力的。 总结下就是一句话：做了几个月饭，写了些项目，看了几部番剧，学了点日语。 来年也请继续努力~"},{"title":"山川与湖海","date":"2019-11-13T12:00:53.000Z","url":"/Mountain-and-lake-sea/","tags":[["生活","/tags/%E7%94%9F%E6%B4%BB/"]],"categories":[["碎碎念","/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"]],"content":"我在凌晨的时候想象过明早的太阳 我在下雨的时候想象过彩虹的亮光 我时常仰望星空看着星星拥抱月亮 也会在天上俯视陆地和海洋 相触惆怅天空和海面本来就要足够遥远才能在一条线上 不要思量平原之上有山川山川里面有湖海"},{"title":"Tomcat 开启 gzip 压缩","date":"2019-08-24T02:26:23.000Z","url":"/gzip/","tags":[["gzip","/tags/gzip/"]],"categories":[["瞎折腾","/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"]],"content":"背景最近公司让做了一个示例项目，部署到阿里云后，客户反馈第一次进入登录页面非常慢，有多慢呢？说出来你可能不信，2M 的 js、css、png 等静态资源加载出来竟然需要15多秒？ 然后我赶紧打开Chrome控制台看一看到底是不是真的那么慢，一看卧槽这慢的简直想让人砸电脑了。 砸电脑是不可能砸的，那还是乖乖想办法定位问题，排除优化下。但是我那些 js，css，等静态文件都已经压缩过一遍了，没理由两三百k的 js 加载八九秒的啊？嗯，不是客户端网速慢，也不可能是我首页登录代码有问题(首页我就跳转个界面)。 然后我就想啊想，后知后觉的发现，不对啊这特么完全是服务器带宽的锅。2Mbps 的带宽，算下来也就是 256kb/s (2048/8) 不到，难怪登录页直接嗝屁了。 gzip压缩明确了带宽的问题，那就好办了。花钱提高带宽呗，嗯领导貌似不会同意。那能不能服务器传输静态资源给客户端时压缩下呢？ 答案是有的，比如 gzip。 但是不是每个浏览器都支持 gzip 的，如果知道客户端（即浏览器）是否支持gzip呢，请求头中有个 Accept-Encoding来标识对压缩的支持。客户端http请求头声明浏览器支持的压缩方式，服务端配置启用压缩，压缩的文件类型，压缩方式。 当客户端请求到服务端的时候，服务器解析请求头，如果客户端支持gzip压缩，服务器响应时对请求的资源进行压缩并返回给客户端，浏览器按照自己的方式解析，在http响应头，我们可以看到 content-encoding:gzip，这是指服务端使用了gzip 的压缩方式。 那么怎么看有没有用 gzip 压缩的文件呢，打开 f12，查看 network，按照下面的方式过滤： content-encoding 是 gzip 的话就说明返回的是 gzip。 tomcat 如何启用gzip由于项目采用 Java 作为后台开发语言，所以本文只针对 tomcat 服务器。有关于 node 端、Nginx 端开启 gzip，参考：前端性能优化之gzip 找到 tomcat 的 server.xml 文件，找到其中 Connector 节点然后进行配置修改，具体配置如下： 参数说明： 参数项 释义 compression=”on” 打开压缩功能 compressionMinSize=”2048” 启用压缩的输出内容大小，当被压缩对象的大小&gt;=该值时才会被压缩,默认为2KB(即2048) noCompressionUserAgents=”gozilla” 对于以下的浏览器，不启用压缩 compressableMimeType=text/css… 压缩类型 useSendfile=”false” 让大文件也能进行gzip压缩，否则gzip只会压缩 2k~50k左右的文件 (useSendfile=”false” 请 参考：tomcat gzip compression not working for large js files) 注意： tomcat7以后，js文件的mimetype类型变为了application/javascript，而在tomcat7以下则为text/javascript，具体的tomcat7定义的类型可以在：conf/web.xml文件中找到。 可以在web.xml下搜索，会找到如下代码： 或者，查看开发人员控制台可以看到 js 请求的响应头是：Content-Type: application/javascript。 总结在 tomcat 开启gzip压缩之后，由原来的十几秒直接缩短到了2~3秒。 开启 gzip 压缩能够大幅度压缩js、css等文件的大小，大约能压缩40%~50%压缩，效率惊人，从而提高页面加载响应速度，这对于带宽很小的服务器提升非常明显。但开启gzip压缩之后可能会不利于搜索引擎检索。 参考 前端性能优化之gzip Tomcat 6.0 GZIP Compression not working for large js files tomcat gzip compression not working for large js files "},{"title":"魔物与王子","date":"2019-05-14T00:58:30.000Z","url":"/ditf/","tags":[["绘本","/tags/%E7%BB%98%E6%9C%AC/"],["2","/tags/2/"]],"categories":[["动漫迷","/categories/%E5%8A%A8%E6%BC%AB%E8%BF%B7/"]],"content":"魔物与王子（まものと王子様）是由TRIGGER和A-1 Pictures共同制作的原创动画《DARLING in the FRANXX》的作中绘本。 最初于动画《DARLING in the FRANXX》第13话中发表的绘本。 实体书收录于2018年8月29日发售的《DARLING in the FRANXX》Blu-ray&amp;DVD第5卷 完全生产限定版特典。 Ⅰ在某个国家的漆黑森林的深处有一个种族默默的生活着 背上长有巨大翅膀的他们十分美丽但却是被称为魔物的存在 在那里生活的魔物公主背上也长着巨大的灰色翅膀 他们一旦到了16岁，就能用那对翅膀飞到森林的外面 Ⅱ于是，在她生日那天公主第一次飞到了森林的外面 越过险峻的高山，越过小溪她到达的地方是不同种族的人类之国月亮在天空中露出了脸 她落在一座大城堡的庭院里那里有一个正在望着月亮的青年 公主躲在树丛后面看着青年这是她第一次萌生的爱恋但是他们和自己很明显是不同的种族魔物是不可能和人类结合的 Ⅲ公主去拜访了住在森林里的魔女「我想作为人类生活，想和那个人结合。」 于是魔女说了「可以，要拿你的翅膀作为交换。但是记住，无论如何伪装外表，作为魔物的你总有一天会吞噬掉王子的生命吧。 」 背上的巨大翅膀被夺去了，从未体会过的痛楚向公主袭来再也无法在空中飞翔了 即便如此公主还是高兴着、流着眼泪笑了「人类！人类！我和那个人变得一样了！」 Ⅳ公主再一次用自己的双脚走向人类之国，她在沙漠里看到了人影 「不好了！有没有人可以救救这位大人！」 在那里的是一位脚被毒蛇咬伤的青年。公主慌张地用嘴把毒从伤口里吸了出来 「谢谢你，多么勇敢的人啊，我是这个国家的王子」王子就是公主在城堡里遇到的那个青年 「你是我的救命恩人，请和我结婚吧！」 Ⅴ婚礼马上就举行了对着全身被纯白婚纱包覆着的公主，神父问道 「你愿意发誓，无论健康或是病痛，直到死亡将两人分开，都能够互相扶持吗？」 「是的，我发誓。」 交换了结婚戒指，在神父的指示下，两人许下了誓约之吻(キス) 「为救了王子性命的勇敢少女献上祝福！」伴随着响亮的欢呼声，整个国家都洋溢着喜悦 Ⅵ「人类、人类！没有能飞上天空的强壮的翅膀，没有锐利的尖牙和利爪。弱小、脆弱又短暂的生物。但是却十分温暖，人类真是太好了。 」 在那之后，她作为人类之国的公主过着幸福快乐的日子。 一边扶持着日理万机的王子偶尔也去各式各样的地方旅行像镶嵌着蓝宝石的大海，光辉熠熠的草原，如烈火燃烧般摇摆着的极光公主握着王子的手，微笑着「不要离开我唷，DARLING」 Ⅶ然而，公主的快乐并没有持续很久如同身体燃烧似的痛楚，让她睁开了眼 她看到的是变成丑陋怪物的自己尖锐的爪子一边发出声音一边快速地长着 「为什么？我应该请求了把我变成人类的」 从背上长出的丑陋的漆黑的翅膀冲破肉体、冲破皮肤不断长出 「使用魔法是有代价的，作为一个人类，你所获得的幸福已经十分足够了吧。从今以后你只会失去自我，变成丑陋的怪物吧。 」 森林的魔女的话在公主耳边低语着 「不过，如果你能亲手杀死你最爱的人，你的诅咒就能解除，你也能变回原本魔物的样子。 」 Ⅷ公主望着自己深爱的王子向王子的头伸去了长长的爪子明明比谁都还要爱他，如今却涌上一股想要切开他的喉咙的冲动 死命地抑制着的双手渗出了血 「只要杀了王子，诅咒就会解除……」公主流着泪，吻了王子的脸颊 Ⅸ王子醒来之后，已经找不到身边的公主了取而代之的是，散落在床上的大量的漆黑羽毛 王子悲伤的生活着，在整个国家里寻找公主却再也没有人见过公主了 绘本内容是来自动画《DARLING in the FRANXX》13话，有兴趣的小伙伴可以去看下这部番，虽然后面有些烂尾，但总体来说还是不错的。 注：以上内容选自 萌娘百科-魔物与王子"},{"title":"一些电子产品的开箱","date":"2019-05-04T01:10:19.000Z","url":"/unpack/","tags":[["电子产品","/tags/%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/"]],"categories":[["瞎折腾","/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"]],"content":"2019 年已经过去了四分之一，也买了不少电子产品，都是与手机、电脑有关的必需品。虽然包装盒子都被我丢的差不多了，但还是来说说最近的一些 开箱 。 1月份，买了一台手机，手机这种必需品总得换吧。 2月份，搬了一次家，自如整租的房子，主卧有一个书桌，刚好可以用来放显示器、键盘、笔记本这些东西。显示器和键盘其实都是去年 11 月份购入的。 3月份，买了一台电脑，次时代中等配置。 4月份，入手了一个罗技的无线鼠标。 一、惠普（HP）24F 23.8英寸 IPS 电脑显示器购入渠道：京东价格：949 元链接：惠普（HP）24F 23.8英寸 IPS 纤薄微边框 75Hz FreeSync技术 低蓝光 电脑显示器 这其实是去年11月入的，这款显示器中规中规，使用下来基本是无坏点，无亮点，无漏光，不闪屏。分辨率是1080P，自带一个 VGA 和 HDMI 接口。没有 USB 接口和音频输出接口，更别说 DP接口了。 要说我当初为什么入手了它，可能我就是看中了它的窄边框和简洁的底座，和一点点的滤蓝光。滤蓝光模式我基本没开启（那模式下的颜色我欣赏不来），所以我一般都开的是中性色。 至于色彩啊，对比度啥的我根本就不懂，也没花时间去了解。反正我这种够用党和颜值党对显示器真没那么多要求，就是拿来敲敲代码、码码字、看看视频的。 二、雷柏（Rapoo） V500L 104键升级版混光机械键盘购入渠道：京东价格：169 元链接：雷柏（Rapoo） V500L 104键升级版混光机械键盘 游戏键盘 黑色 黑轴 键盘手感只能说一般，一分钱一分货。黑轴的适合用来打游戏，需要较强的指力才能按动，长时间码字会很累。声音不算很大，有背景光然而并没有什么实际用处。缺点很明显了，没有驱动还很重（貌似机械键盘都很重），不适合携带。 买了显示器，然后突然发现得配个键盘就随便挑了一个，也没问客服有没有键盘驱动，谁让我买东西基本不问客服就入手了呢。键盘我也不是很了解这东西，略过。 PS: 后边咱又换了个 ikbc C87 白色红轴的机械键盘啦，用着敲代码很舒服，声音也不是很大不会吵到别人(๑•̀ㅂ•́)و✧。 三、Apple iPhone XR (A2108) 128GB 白色购入渠道：京东价格：5799 元链接： Apple iPhone XR (A2108) 128GB 白色 移动联通电信4G手机 双卡双待 真香机，不解释。早买早享受，晚买有折扣，12期免息入的，虽然价格一直在跌。XR性价比挺高的，FaceID、全面屏、双卡，缺点是太厚了，6 之后最厚的一款，边框也很大，信号不是很好（英特尔基带的锅）。 如果你想体验FaceID 又想双卡双待还不想多花几千块上 XS Max ，那么不妨考虑下 XR 。当然你舍得花钱或者完全不差钱那另说了。 当初入手也是因为双卡双待，一张办公用，一张私人用。一直舍不得扔掉我那张移动卡，到现在也 6 个年头了。 四、戴尔DELL G7 15.6英寸游戏笔记本电脑 黑购入渠道：京东价格：5999 元链接：戴尔DELL G7 15.6英寸游戏笔记本电脑(i5-8300H 8G 128G PCleSSD 1T GTX1050Ti 4G 背光键盘 IPS)黑 戴尔 G 系列游戏币，G7 也基本上是和 G3 一个模具出来的外观。我这款是配置最低的入门款，1050Ti这块显卡都卖两年了。由于我不玩 3A 游戏，平时也不怎么玩游戏，只是用来办公、码码字所以头一热就入了这款电脑。 噢，不。这货他娘的足足 2.8kg 重，也就是差不多 5.6 斤重。这还不算完，还得算上电源适配器吧，好啊电源适配器也足足 1 斤多重。基本上就是背着个差不多 7 斤重的电脑上下班这样一个情况，所以我一般周一背公司去，周五下班背回来。 重归重，其他方面我倒是挺满意的。外观比较商务风格，虽然边框是大了点（窄边框容易挤压IPS屏造成漏光，之前退货了一个Y7000P就是因为漏光严重），但在我看来比起其他游戏本的外观真是颜值高太多了。屏幕也不漏光，二级键盘蓝色背光，全 USB 3.1 接口。虽然是最低配版，但还是给了一个雷电3接口，并没有偷工减料。雷电3双倍带宽达到40 Gbit/s (5 GB/s)，物理接口改用更主流的 USB Type-C，雷电3将成为未来笔记本主流连接器标准。 五、金士顿(Kingston) DDR4 2666 8GB 笔记本内存 骇客神条 Impact系列购入渠道：京东价格：389 元链接：金士顿(Kingston) DDR4 2666 8GB 笔记本内存 骇客神条 Impact系列 入了一条金士顿 DDR4 2666 8G 的内存条和 G7 上自带的海力士 8G 组成双通道，大概因为金士顿内存条的颗粒也是海力士的，所以 16G 双通道并没有降频一次点亮。戴尔的后盖是出了名的好拆，基本上把后盖上的一颗固定的螺丝拧开，再用类似银行卡这样的东西划一圈就把后盖拆开了。 19年开始，固态和内存条的价格基本上都是在一降再降，这个时候入手真是再合适不过。这里有个关于内存条的故事，感兴趣的朋友可以翻一翻。 PS: 金士顿的这个条和自带的海力士颗粒都一样，一开始没降频但是后边用着用着就降频勒(2666MHz-&gt;2400MHz, 还没有找到啥原因)。 六、七彩虹(Colorful) CN600S系列 480GB M.2接口(NVMe协议) SSD固态硬盘购入渠道：京东价格：439 元链接：七彩虹(Colorful) CN600S系列 480GB M.2接口(NVMe协议) SSD固态硬盘 因为戴尔 G7 自带的东芝 128G Nvme 协议的固态（PCI-e 2通道）实在是太辣鸡了而且容量只有128G ，让我把软件装机械盘？有没有搞错，这读写得多慢。所以，我自己挑了一块七彩虹的 480G 基于 Nvme 协议 PCI-e 4 通道的固态硬盘。机械盘拆下把之前的 SATA3 固态硬盘加上去了，全固态硬盘随我怎么玩。 系统备份我比较硬核的直接用 微PE 里的 CGI 备份，直接备份了整个 C 盘，避免系统的其他分区没有备份到。装上七彩虹的固态后再进 PE 还原 C 盘备份就好了。戴尔的电脑默认磁盘模式是 Raid on ，得换成 AHCI才能读出固态硬盘，还原后再换回 Raid on 才能开机正常进系统。 PS: 不愧是凄惨红/(ㄒoㄒ)/~~，用了一段时间后老是掉盘找不到 Windows 引导，后来换了一块 HP EX950 1T 后就不掉盘了。 七、罗技（Logitech）Pebble 鹅卵石轻薄型静音鼠标 蓝牙无线双模 静音 便携 时尚鼠标 石墨黑购入渠道：京东价格：129 元链接：罗技（Logitech）Pebble 鹅卵石轻薄型静音鼠标 蓝牙无线双模 静音 便携 时尚鼠标 石墨黑 罗技的这款无线鼠标非常精致，前盖可以很方便的拆下来和安装回去，螺丝不是固定的而是磁吸的，更换电池很方便。支持接收器和蓝牙模式，蓝牙模式太鸡肋了操作起来延迟高有点卡顿的感觉，接收器就没这毛病操作起来很顺畅。声音基本上很小，远一点你就基本上听不到鼠标点击的声音了。同时重量也比较轻，整体尺寸较小，非常适合携带。 PS: 这款鼠标太扁了，不适合长期握着(虽然静音效果很棒)，我还是换了LOGI G304，既能敲代码也能打游戏( •̀ ω •́ )y。 八、绿联苹果PD快充线type-c转lighting数据线 + PD 充电头购入渠道：淘宝价格：88 元链接：绿联苹果PD快充线type-c转lighting数据线 + PD 充电头 从 iPhone 8 开始，其实就已经支持 USB Power Delivery 功率传输协议，现在 type-c 已慢慢成为主流接口， USB-PD 代表未来的充电新标准已经是大势所需。绿联这款充电头价格比较实惠适合我这样的穷屌，苹果官网的 PD 充电头和 type-c 转 lighting 数据线得四百多，让我这样的穷屌望而却步。充电基本半小时充到 50%，一小时能快速充满 ，发热只有一点点。 到这已经结束了。好了，我去还白条了（；´д｀）ゞ。"},{"title":"使用 Travis CI 自动部署到 Github Pages 和 VPS","date":"2019-04-07T05:30:00.000Z","url":"/tavisci-vps/","tags":[["自动部署","/tags/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"],["Travis CI","/tags/Travis-CI/"]],"categories":[["博客开发","/categories/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/"]],"content":"是的，都 2019 年了我还在写自动部署这样的文章。 基于之前的文章 使用Travis CI持续部署Hexo博客 做一个补充。本次除了自动部署到 Github Pages 上还部署到 VPS 服务器上。 原因说简单点就是：我不想每次本地写完点东西后，还得手动生成静态页面，然后再利用 xshell 这样的工具把静态页面上传到我的 VPS 服务器上。这简直不要太麻烦，我想写完东西之后通过 Git push 到仓库之后，自动去部署到 Github Pages 也好还是 VPS 也好。总之不用我瞎操作一顿了，我的原则是博客越轻量越简洁好。 基于这样的原则，花了点时间搞了下自动部署到 VPS 上。 之前用 Travis CI 自动部署用的是 GitHub 的 Personal access tokens，配合 Travis 的环境变量配置就可以 push 操作了。这个 token 是可以拿到你 github 上所有仓库操作权限的，所以这次我打算不用这个 token 了，直接搞个部署密钥更加安全。 生成部署密钥首先是先生成 ssh 密钥，在你电脑上随便哪个文件夹都行： 把生成的 travis.key.pub 公钥里的内容粘到你 Github 仓库的 Deploy Keys 以及 VPS 上的 ~/.ssh/authorized_keys 里。这样 Travis CI 结合私钥就能对 Github 和 VPS 进行访问了。 加密私钥Travis CI 自动部署时，我们必须从仓库拿到上面生成的私钥。直接把私钥放仓库下肯定是不安全的，Travis 提供了私钥加密解密的方法。 首先，在 Linux 环境下安装 Travis 命令行工具 ，需先安装 ruby 环境： 加密私钥文件： .travis.yml 配置解密私钥文件：将 travis.key.enc 放到仓库下，哪个位置随你喜欢，确保解密命令能访问到就成。$encrypted_383bc2ea2d21_key及$encrypted_383bc2ea2d21_iv 请去travis ci仓库设置环境变量里找(Travis 会自动生成这两个环境变量)。在 .travis.yml 下添加如下命令： 为了防止出现 ssh 登录要输入连接确认（总不至于在 travis ci 自动部署时去travis命令行确认下？），需在 .travis.yml 添加一个 ssh 信任列表（怎么简单怎么来）： 那么，Travis CI 自动构建成功后怎么部署到 VPS 上呢？在 .travis.yml 中添加如下命令（这种方式暴露了端口号…但好像没别的好办法）： 配置文件放 Gist 上，仅供参考。 Logo换了个 Logo，自己用 PS 做的，有点借鉴（抄袭 ）PRIN 的灵感。 参考链接主要是参考第一篇文章 (PRIN 原创) 折腾的 ┏ (゜ω゜)=☞。 使用 Travis CI 自动部署 Hexo 博客 使用 Travis 自动部署 Hexo 到 Github 与 自己的服务器 "},{"title":"使用 Travis CI 自动部署 Hexo 博客","date":"2019-01-25T14:37:06.000Z","url":"/Travis-CI/","tags":[["自动部署","/tags/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"],["Travis CI","/tags/Travis-CI/"]],"categories":[["博客开发","/categories/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/"]],"content":"是时候使用 Travis CI 自动部署 Hexo 博客啦。 没有 Travis CI 之前在没有 Travis CI 之前，写一篇 Hexo 博客文章再推送到 GitHub Pages 上的流程是： 1.本地新建一篇文章： 2.用markdown语法编辑文章 3.本地生成 public 文件： 4.在本地启动服务器测试： 5.浏览器打开，查看效果并调试 6.调试好之后，执行部署命令部署到 Github Pages 上： 使用 Travis CI 持续部署后Travis CI 一款很好用的持续集成测试工具。它可以自动关联Github上的项目并且clone下来编译测试，就是利用它这一特性来实现hexo博客自动编译、部署。 在使用 Travis CI 之后，就只需要写好博客文章之后将 Hexo 博客项目通过 以下 Git 命令推送到 Github Pages 的源码分支 (source分支) 即可。 而后 Travis CI 监听到 push 操作即会根据 travis.yml 执行自动部署，原理简单说来就是先 git clone 线上 GitHub Pages 项目的源码分支 (source分支) ，再执行自动部署后将 Hexo 博客的静态页面推送到 GitHub Pages 项目的 master 分支。 Why we need Travis CI?使用Travis CI 自动部署的好处有人可能会有疑问: 在本地写完博客，直接一个命令hexo d，不就搞定了么， 为啥要费力搞 CI ？ 的确，想用 TravisCI 来自动部署Hexo博客程序，需要不少设置（瞎折腾），但其还是有很多实用之处，列举一些优点： 优点1：直接在线编辑文件，立即生效假设你已经发表了一篇文章，过了几天你在朋友机器上浏览发现有几个明显的错别字，对于有强迫症的，这是不能容忍的。 但你手头又没有完整的hexo+nodejs+git的开发环境，重新下载git，node，hexo配置会花费不少时间，特别不划算。 如果按照这篇完整折腾完，你可以直接用浏览器访问github个人项目仓库，直接编辑那篇post的原md文件，前后2分钟改完。 稍等片刻，你的博客就自动更新了。 优点2：自动部署，同时部署到多个地方在gitcafe是被收购之前，很多同学（包括我）都是托管在上面的，国内访问速度比Github快很多。 配合DNS根据IP位置可以自动选择导到gitcafe, 还是github，甚至你还可以部署到七牛云的静态网站。 利用Travis CI可同时更新多个仓库。 优点3：部署快捷方便手动deploy需要推送public整个folder到github上，当后期网站文章、图片较多时候，对于天朝的网络，有时候连接github 就是不顺畅，经常要傻等不少上传时间。 有了CI，你可以只提交post文件里单独的md文件即可，很快很爽，谁用谁知道。 优点4：bigger than bigger你的项目Readme里面可以显示 CI build 图标: 另外通过设置，可以在当build失败时自动发邮件提醒你。 上面的图标，如果登陆后你在Github项目里，直接点击图标，会跳转到你当前项目build的log界面，很方便。 当然有了CI，你可以做很多事情，如自动运行单元测试，成功后再deploy等等。很多项目里的持续集成基本也是这个道理。 How to use Travis CI to deploy hexo blog?一个仓库两个分支在 Github Pages 项目下新建一个 source 分支用来存放 Hexo 博客的源码，master 分支则是部署之后生成的静态页面文件。 设置 Github Pages 的默认分支仓库的 settings 中开启 Github Pages ，选择 master 为默认分支。其实默认的就是 master 分支了。 自定义域名域名注册有很多种服务商供你选择。在 Github Pages 项目的 Setting 页面设置 Custom domain 为你购买的域名。Hexo 项目的主题文件夹的 source 文件夹下添加名为CNAME 的文件，注意全部大写，里面内容就写你的自定义域名。如果没有这个文件，每次推送自定义域名都会回到初始的 username.github.io。 Travis在官网使用github账号授权登录，hexo添加配置文件就可以了。 获取 Personal access tokens，Github Pages setting –&gt; Developern settings –&gt; Personal access tokens ，点击 Generate new token 选择仓库权限就可以，新生成一个Token，Travis 环境配置里会用到这个Token。生成之后一定要保存好，因为只会出现一次，丢失了就只能再重新生成了。 登录官网，使用github账号登录。 添加 Github Pages 博客仓库。 设置选项，这里我只设置 push 代码到 GitHub Pages 时自动部署。右上角 More options 调出Setting页面。 在 Travis 的 Settoiing 页面设置环境变量，Name 为“GH_Token”，value 为刚才复制的Token ，然后点击右边的 Add 按钮添加即可。 在hexo博客源码中添加配置文件.travis.yml需要修改的是git的配置信息。 要使用https协议的仓库地址，使用ssh仓库地址会失败。注意这一行git push --force --quiet &quot;https://$&#123;GH_Token&#125;@$&#123;GH_REF&#125;&quot; 中的GH_Token即为上面Travis设置的环境变量的 Name 。 下面是我的 travis.yml 和 travis.sh 脚本： 点击查看 注： notifications 可以设置部署成功和失败时自动给你发送邮件，这个功能真的很 nice 。 因为用到了gulp压缩，Travis 自动部署时总是在执行 gulp 命令报错 “less version 3.9.0 is not currently supported”，谷歌一下将 less 版本设置低一点即可，在 install 下加入- npm install less@2.7.3 --save-dev。 branches 是你Github Pages 项目中存放博客源码的分支，这里是 source 分支，对应上即可。 env 下设置 GH_REF ，即设置 Github Pages 的仓库地址，记得是以 .git 结尾的地址。 点击查看 注： travis.sh 中的 “GH_Token” 也是 travis 环境变量中设置的 Name 。 travis.sh 中的 “GH_REF” 为 travis.yml 中设置的仓库地址。 测试配置完成后，写好博客文章之后将 Hexo 博客项目通过 以下 Git 命令推送到 Github Pages 的源码分支 (source分支) 即可。 然后 ，在登录的 Travis 官网上就能看到自动部署时生成的日志信息了。 参考本文部分内容参考自：karlzhou的博文 – 用Travis CI自动部署Hexo博客，感谢作者提供的教程和参考。"},{"title":"迟到的2018总结篇","date":"2019-01-13T08:04:39.000Z","url":"/2018/","tags":[["日常","/tags/%E6%97%A5%E5%B8%B8/"]],"categories":[["年终总结","/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"]],"content":"关于2018的那些事说来惭愧，我的2018真的是不值一提，好像根本没几件有意义的事情 q(≧▽≦q)。 虽然是没什么拿得出手的，但是也照例来个总结，不管是记录生活还是纪念正式工作，写成博客文章真是怎样都好的理由（我可能比较喜欢回忆吧）。 2018 年那些重要的事2018 年发生很多事情，滴滴顺风车整改，《创造101》捧红了杨超越，抖音火的一塌糊涂，Acfun一度处于关闭状态，支付宝“中国锦鲤”一夜爆红，武侠小说大师金庸逝世，IG终于拿下了中国第一个S赛冠军，ofo人去楼空。 不好意思，上面这些我好像都没怎么关注。 在过去一年里打开微博的次数少了很多（实际上是少得可怜），但我知道上面的每一件事情都能引爆微博评论，有人的地方就有互联网，有人的地方就是江湖。 不好意思，在下已退出江湖多年（笑）。 我的2018按照惯例先总结一下年度大事件，emmm上面扯远了点。然后就是总结我那毫无亮点的2018年。 2018 年终于如愿以偿的毕业了，也正式踏入职场开始工作。为什么用如愿以偿来形容我的毕业心情呢，大概是因为我的大学生活真的是“看似忙忙碌碌，实则碌碌无为”这么一个丝毫没有拿得出手的摸鱼状态，还不如早点毕业工作打拼。说是这么说，实则还是有点留恋大学生活，毕竟那是一个摸鱼的好环境啊。 四月，大概时间都花在弄毕业设计那破事上了，仿照“下厨房”做的一个美食网站。当时还纠结了挺久，本来是想做个旅游网站，怕拿不到样本数据还是算了。最后灵光一闪，决定了做一个美食网站，样本数据写个爬虫入个库就完事了，原型界面也按照下厨房官网弄一弄也就成了。至于后台，随便写写就行，毕竟论文审批的老师也不会去看代码结构，虽说是随便搞搞，但是从前端到后台都真的是实打实自己写的。因为我不想敷衍了事，想给自己的大学生活一个好的交代，画上完美的句号。 五月，和曾经的室友、大学同学穿梭在炎热的校园里，等待着最后的答辩。答辩这东西嘛，在我学校有时候挺看重运气的。遇上那些不死磕的老师就会很轻易的放你通过，而有些同学就比较惨了，我答辩那天有一个老师连着挂了好几个人，说是挂其实改下文档二辩态度好点就给过了。挂了的同学，究其原因大概是毕设项目根本就没花心思去做，所以我的心态就比较趋于平淡了，因为从头到尾都是我自己做的根本没什么好怕的啊。 才怪嘞，虽说是有点底气的，但是说来说去都是一个很low的网站，也有点担心到底能不能给通过。后面发现是自己想多了，答辩的过程其实挺水的，先简单介绍下项目然后回答几个问题就完了，完了。水是水了点，但答辩组的老师都挺认真负责的，大概我们这种不入流的大学里的软件工程专业老师，教导很多学生都是心有余而力不足吧。 一切尘埃落定后，吃完最后一顿饭之后各自告别，山南水北天涯海角，不知道何时才能再次见面，怀念那时候坐街边小巷深夜吃夜宵喝酒的日子。 七月，和其他应届生一起入职培训和户外拓展，拓展活动很考验团队合作和个人毅力。这里简单说下【穿越电网】和【高空断桥】这两个比较具有代表性的户外拓展项目，感兴趣的朋友可自行去搜索下。 穿越电网很考验团队合作，规则也很简单，就是团队成员都必须做到不触碰到电网圈，一旦触到了一切重新开始也就是之前成员的努力基本是白费了。说是电网圈其实就是拿绳子绑出来的大小高低不一的圈，并不是真正带了电的（带电那还得了😂）。穿越电网是两个小组一起进行的，相向通过。这个项目有些人必须扛着通过（最下面的圈比较小就那么几个），这就比较耗体力了因为可能之前成员的努力白费了。最后是两个小组互相帮助和教练放了点水才通过的，这里很重要的一个点是，两个小组互相协作，也就是暂时不计较输赢了。 高空断桥是考验个人毅力，不如说是心态吧，我这种心态好不在乎高度的选手基本上就是不拖沓的迈过去也就完成了。但是，在木板上面还是有一点心慌的，毕竟他娘的真有四五层楼那么高了，不慌是假的。大概心态好，所以没什么好慌的吧，安全设施也不是闹着玩的。 完成各种团体活动之后就是正式入职，回到自己的岗位开始划水了。 九月，基于Hexo搭建了这个博客。写了几篇不知所云的文章，也基本没人看的。我的态度是多记录下自己的生活，平淡也好精彩也罢，我就是一个喜欢回忆的人。 十月，回家参加堂哥的婚礼，在南昌看了耳鸣的左耳有了一些效果，在家安静地待了几天，回南昌复诊治疗效果并不理想，然后就回去北京继续工作。 十二月底，和在北京工作的大学同学约着一起跨年，看完电影和吃完火锅后回去休息，等待着2019年的到来。 九月份之后就是工作了，没什么好拿出来提的了。 2019年期望2019年，没什么大目标，比2018年过的充实点就行了，我一直都是得过且过型的。期望也就是下面列出的这些了： 工作是一回事，生活是一回事，平衡好工作和生活。 尽可能的远离屏幕，少玩手机，少看电脑。 代码质量要提高，做好项目的协调工作，研究新技术。 多看纸质书，留一些个人时间思考、总结。 最后2018年2月那会，Acfun网站访问不了的那几天心里很难受，觉得是交往了很久的朋友突然就要说再见了，可能再也找不回来了的那种。 还好它没凉，活的好好的，就安安静静地回到原来的地方待着，没什么会比这种失而复得的事情更让人开心的。 消逝的事物存在于歌里、照片里、日记里、旧物件里，以及记忆里，是一触及就能回忆起的记忆。这些美好的事物有些可能已经无法挽回，有些会以歌声、影片等载体不经意间显现，让你有一种“回到过去”身临其境的错觉。 唯一遗憾的是时间从来都是往前走，不会倒退，所以啊，一定要好好珍惜那些美好的事物。 不要在“绿洲”里迷失自我，回归到真实的生活中。 Reality is the only thing that is real ——《头号玩家》。"},{"title":"最近几年的编程总结","date":"2018-09-19T14:01:06.000Z","url":"/topics/","tags":[["编程","/tags/%E7%BC%96%E7%A8%8B/"]],"categories":[["编程札记","/categories/%E7%BC%96%E7%A8%8B%E6%9C%AD%E8%AE%B0/"]],"content":"优秀的人，人人都能看到他们的光芒，走近了，才看得到，他们值得拥有光芒。每次看到这位前辈的总结都会有新的感触，说不上深有体会，却总是会有意识的提醒自己。 虽然是关于Android的开发总结，但是我觉得同样适用于从事各种编程开发工作的人，以下为这位前辈的开发总结： 最近几年的编程总结1。 客户端的功能逻辑不难，UI 界面也不难，但写 UI 花的时间是写功能逻辑的两倍。 2。 写代码前的思考过程非常重要，即使在简单的功能，也需要在本子上把该功能的运行过程写出来。 3。 要有自己的知识库，可以是一个工具类，把写过的，看过的好的代码放进去，也可以是一个笔记本软件。因为只有放在知识库里的东西，才是你最重要的财富。 4。 如果你想做自由职业者，你需要学英语，因为在国外的盈利比国内多很多。如果你想进大公司，好公司，你需要学英语。你想深入学习 android，但中文的 android 文章太少了，你查查百度，到处都是 copy 来 copy 去的 hellword，所以，你需要学英语。如果你想出国，你需要学英语。 5。 Http 协议要研究透彻。http 的信息头有什么信息，分别代表什么，信息体有什么信息，代表什么，都要搞的明明白白。scoket 也是一样。 6。 在 eclipse 里的 layout 文件都有 graphical Layout。这个好好的把 UI 调整好。 7。 Android 里的 junit 每次运行都会打包新的 apk 到设备上跑，效率非常慢。是跟 android 无关的测试，最好自己建立一个单纯的 java 项目做测试。 8。 面试的时候不要觉得自己提的薪水太高，物以稀为贵明白吗?不管你的期望薪资多少，都有可能实现，这只是时间问题。 9。 如果一家小公司通过猎头找到。不要觉得公司不行，担心会倒闭。放心吧，至少活 1 年是没问题的。 10。 不要把自己绑在 android 上，有空也研究下 IOS (最近小弟就准备研究 ios，刚买了 6 本书。)。 11。 移动互联网最少还有 10 年的快速增长。android 最少还有两年的快速增长，走 android 这条路是不会错的。 12。 有空多学点开放平台的 SDK。比如新浪微博，腾讯微博，淘宝平台，支付宝移动支付平台，快钱移动支付平台等等。这些都是不愁没市场的。 13。 即使技术再差，也要发布一个应用到 market 上去，因为这样你才了解做一个应用的逻辑。 14。 每个月拿到薪水省 500-1000 元出来。这些钱投在买学习资料，去培训班上课。在培训班，花再多的钱也是值得的。 15。 你真正的价值在项目经验和对底层的认识上，不要忽略基础知识。 16。 如果有空把 Android 的源代码看一下。底层的东西很枯燥，但这些很值得学。 17。 程序员其实是艺术家。代码重构和设计模式，是非常非常重要的东西，必须要学。 18。 不要去维护一个项目，要去做一个项目。 19。 一开始不要轻易去大公司，虽然大公司是可以让你呆一辈子的。但你的起点低，以后成就也低。 20。 每天早上提前 20 分钟上班，5 分钟把今天的工作计划写好，15 分钟用来看各大 IT 论坛的新闻。 21。 如果以前没做过 java，那就把 SSH 看下，自己搭建一个小服务器。这是为了接私活用。 22。 PS 一定要学，接私活用。 23。 多下载市面上好的应用，每天都用，只有这样你才能了解市场。现在所有的APK都可以反编译，看源代码麻烦，但看 layout 和图片很容易，所以。你懂的。 24。 要有羞耻心。 25。 老板仅仅要求你把东西做完，需求完成。但你必须对自己要更严格一点。写一段代码，从网上复制一份代码，并不是可以用就行了，你还必须明白他的原理，为什么这样就可以？这才是对你最有用的地方，这也是你今后薪资增长的保证。 26。 要懂得舍得。移动领域发展太快，必要时必须要用钱换时间，不然你会远远落后别人(我之前花了 4000 大洋去培训班学 IOS 三天)。 27。 要明白自己想要什么，什么才能最大性价比提高你的能力。对我来说，能让我提高最大的，就是 Android 和 IOS 同时会，并且自己可以做架构设计。 28。 看 android 技术书籍最快的学习方法，先通读一次。然后把书本上的 demo 一个一个写出来。不要觉得太容易不去写。很多东西都是这样，看起来简单，但做起来难。最后再对照自己写出来的程序代码去理解书本的意思。 29。 应用和游戏是 2 个方向，没有一个公司会同时做游戏又做应用，即使是外包公司，大多也只做一块。专精一个就可以了。 30。 每次做完一个项目，要强迫自己做总结，通过这个项目，我学到了什么新技术?犯了哪些 SB 错误? 31。 去中小公司面试的时候，要问两个问题，第一有没有财务部，如果有正式财务部，那肯定是正规的，不要担心欠薪问题。如果没有，就说不准了。第二，有没有测试人员，如果没有说明不规范。对项目来说，测试人员是非常重要的，是项目质量的保证。 32。 大家拿到 offer 后都希望能看看是否还有更好的机会，这没错，但是要注意 offer 的有效期。一般中小公司的耐心只有一周。 33。 自学的效率总是低于做项目的学习效率。这是因为没有驱动，所以如果工作很闲，那自己就去接私活，或者自己做一个应用发布出去。利益的驱动会让你进步更快。 34。 Android 的 api 涉及到很多方面。很多知识只要不用，不复习就会慢慢消失。所以每隔一段时间的总结和复习是非常必要的，建议每个月必须进行一次不短与 1 小时的复习。 35。 如果 2-3 年以后你还是一线程序员，那对你来说最重要的不是技术的提高，而是身体健康的提高。建议工作 2 年后，有点余钱要投到健身上。 36。 人的关注力总是会起伏不定。一个项目，或者一个学习目标，在坚持一段时间以后总是会松懈，偷懒。避免这种情况的最好的办法，就是隔一段时间内做总结。比如三天，或一周。 37。 有 1 年以上的工作经验，大家都可以成为架构师。即使是小型的移动 app，如果事先写好简单的架构设计，会让你轻松很多。这种效率等同于我之前所说的”写代码前思考过程很重要”。 38。 要养成正规的编码习惯，如果公司没有编码规范，那最好写一个自己用的 Android 编码规范。 39。 代码复用和重构是非常必要的习惯。但这只是针对非业务逻辑，如果是业务逻辑，那就尽量少复用。 40。 周末没事就去参加一些免费的沙龙，讲座，一来拓展下知识面，二来认识更多的人，程序员每天一直呆在公司，仅仅透过网络你无法深刻感触外在世界的变化。顺便说一下，貌似很多老板都是在这里找到优秀员工的。你所要付出的仅仅是路费。 41。 每两个月啃掉一本书并不是很难的事情。 42。 如果工作很轻松很闲，那你要加紧把握现在这个机会，每天给你钱让自己去学习的机会很少很少。 43。 如果把程序员比做工地建筑工人，技术领头人比作包工头，架构师比作建筑师。那么当你写代码前不做任何思考的时候，那你就是建筑工人。当你有意识的把代码规范，设计模式这些东西运用到项目中，并严格遵守游戏规则，那你就是包工头。当你开始制定游戏规则，开始考虑到产品使用者，产品生产者等各种涉众的利益的时候，那你就是建筑师。 44。 人的信心是非常强大的力量。自不量力的人比量力而行的人成就更高。 45。 代码是否优美，是否整洁是难定义的。我的一个简单的量化标准是，一个类代码在 600 行以下就可以了。 46。 你要有这样的觉悟，项目出了任何问题，都是你的责任!没判断null?那是你的错。切错了?那是你的错。产品上线不了?那是你的问题。产品销售不给力?那是你的问题。你必须学会要用一种积极向上的思维方式来看待这个世界。任何问题，都是你的错。 47。 很多人都说程序员聪明，其实我们自己知道，我们只是单线程生物，我们习惯把复杂的事情拆分成许许多多零碎简单的任务，然后再一个一个处理。 48。 多个项目同时进行的时候，你必须要有一套自己的时间管理(可以写在本子上，写在日记里)，同时最重要的就是控制好你的情绪，只有这样，你才能在你预期时间内完成任务。 49。 尽可能的早起，让你有一段不受打扰的珍贵时间。 50。 你可以抱怨工作中用的技术太杂太陈旧，但不能消极对待。在任何项目中你都可以学到东西，就看你是否主动。 51。 不管你今后的方向是技术还是产品，工作中你都要站在客户的角度上编写代码。你刚掌握或了解到的新技术，并不是马上用到工作中。 52。 任何你花费 3 天还是没有头绪的问题，你都要放弃目前的思路。 53。 掌握更多的语言是非常非常好的想法。每种编程语言都有自己的独特之处(除了语法，更多体现在设计模式上)，只要你掌握了你就可以运用在任何地方。 54。 本人一开始是做 J2ee 的，然后转 android，接着又学了 ios，再然后又开始学了 PHP。我觉得技术上分两种：1 种专精一门，然后多看看别的语言，取其精华，丰富自己。第 2 种多攻多种语言，通过不同语言的领悟让自己能在每个领域里逐步提高。这两种路应该都是没有错的。 55。 第一种以后可以在大公司里获得非常不错的职位和薪水，随着工作时间的增加，待遇上也会有很大的提升，以后可以成为该领域的权威人物。第二种可以在小公司里或创业公司里成为技术 Leader，也有可能在大公司里负责一个技术部门（可能性非常小）。我不知道有多少人在这个问题上迷茫过，但我确实是迷茫了很久。我现在的结论里，要不精到底，要不杂到底。只要坚持下来，不要经常变来变去，总是会得到自己想要的的。 56。 我发现很多入门级的 Android 程序员或 IOS 程序员，因为现在移动开发的火热，薪资上比其他领域的程序员高很多，但事实上技术上却贫乏很多，这是目前的一个怪圈。因为之前没做过其他开发，或刚毕业就开始做移动开发了，非常缺少架构，代码规范等方面的知识。我建议 Android 的程序员可以多看看 J2ee 方面的知识，特别是 SSH 框架，会给你在思路上带来非常大的提升。 57。 学习最快的方法就是读文档，读官方代码，读别人的项目。有人可能问我手头上没有什么项目源代码怎办？答案是淘宝，在淘宝上你可以花几块钱或几十块钱就可以买到大量的代码，这是目前我认为性价比最高的学习方法。 58。 如果有空可以参与到一些开源项目的研发中。如何参与可以百度下。不要以为开源项目很难，大部分跟我们的区别只是代码非常规范而已。 59。 做开发最有意思的就是每天都可以学到新东西，保持学习的状态会让你每天都很亢奋。培养自己不断学习的习惯。 60。 多培养自己业余兴趣，比如下棋，听歌，旅游等等，通过这些会让你平时工作和学习更有效率。 61。 不要羡慕别人的技术或能力，这世界没有谁比谁更聪明，只有谁比谁更有效率的努力而已。以绝大数人的努力程度之低，根本谈不上拼天赋。 62。 如何衡量一个程序员的技术水平？如果把程序员当成某个游戏里的角色。你的级别代表着你真正的技术水平。你每次的学习和工作相当于你在打怪做任务获取经验值。有些人群刷比自己高 2，3 级的怪，有些人单挑比自己高 2-3 级的怪，有些人刷比自己低 5 级的灰色怪。也许大家花的时间都差不多，但最后级别是不一样。所以不要以为工作经验高的人技术肯定比自己强，还有效率问题。反过来说，如果你现在打怪效率不高，是否应该思考换个方式刷经验？（有兴趣的同学可以看看《一万小时天才理论》） 63。 强迫自己总结经验并写下来。每次写总结就相当于重新复习一次，并且也做一个存档，方便日后回顾。千万不要相信大脑随着时间变得模糊的记忆，只有写下来的东西，才是唯一答案。 64。 定一个高不可攀的目标会让你进步更快。比如研究 android 源代码，研究 linux 源代码，把公司里某个大神的代码全部吃透等等。也许目标并不能完成，但比没有目标好。有个故事是这样的：A 同学和 B 同学考试都得了 50 分。A 下定决心下个月考 100 分，B 只希望考到 60 分就足够了。最后 A 考了 90 分，B 考 58 分。 65。 不要总把时间不够挂在嘴上。达芬奇除了是画家，他还是雕刻家、建筑师、音乐家、数学家、工程师、发明家、解剖学家、地质学家、制图师，植物学家和作家。而他只活了 68 岁。 66。 只专精一种语言的人在未来肯定会成为多余的人。在时间管理里有句话叫：“离开舒适区”。只有离开了舒适区你才会因对环境的不适应而强迫自己更专心学习。 67。 迫使自己不停的获得社会的认可。我从开始转行做程序员到现在，所经历过的目标有：1)写出 hello world。2)加入一家公司，成为一名 Java 程序员。3)成为一名合格的 Android 程序员 4)薪资加倍 5)成为项目技术领头人 6)薪资加倍。下一个计划：准备出书。 68。 有人说 30 岁以后不能做程序员。我不太同意这个观点。30岁以后确实不能做一名纯粹的一线程序员，因为你有家庭负担，对一个公司来说你的性价比比不上其他年轻的一线程序员。但 30 岁以后你可以作为技术领头人或架构师或项目主管存在。还有很多职业都需要很大比重技术的人才。所以不要担心。 希望，每个人都能找到自己努力的目标、方向，有一个美好的未来。以匠心，致初心。以上，共勉。"},{"title":"某个不知名的小站","date":"2018-09-08T15:33:16.000Z","url":"/the-start/","tags":[["日常","/tags/%E6%97%A5%E5%B8%B8/"]],"categories":[["博客记录","/categories/%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"]],"content":"想搭一个自己的博客其实很久了，但一直都没开始的念头。最近算是逐渐地下定决心要做一个有始有终的事——搭这个博客。 其实，人都是单线程的生物，只不过我们喜欢把复杂的事情细化成一件件小事来完成。博客搭建需要Node.js和Git相关的技术，好在之前自己弄过一些node.js的搬运项目加上HEXO官网的介绍，因此搭起来不是很费劲。还是遇到了两个问题： 第一个是在运行 hexo d 部署到github上的时候出错了，百度都是copy来copy去的答案，最后想了下决定用git@替换https的github.io地址，部署到github上已经成功了。（这个问题其实有点莫名奇妙） 第二个是访问博客地址，引入的是gooleapi的jquery.mim.js，网页一直在pending转圈，强迫症实在受不了20多秒的请求最后还加载失败。百度了下说替换掉主题目录下googleapi引入jquery.min.js的地址，但没说在哪替换。只能自己一个个找，最后终于在HEXO\\themes\\landscape\\layout\\_partial\\after-footer.ejs下替换成了bootcss的CDN地址，问题完美解决。 你能从这里收获什么？本博客主要是本人记录一些技术使用方法和其他有关开发项目的内容，由于最近主要在做GIS相关的开发，计划是写一些GIS开发的文章和Java相关的技术。 搭建博客可能是一时兴起，但是既然开始了就应该有一个好的姿态去对待它。很多事情其实都是在有意识的去做的情况下完成的，而且当你有意识的去做一些事情的时候，往往事情就水到渠成了。所以，有意识的去做一些事情，无论成功与否。 后期计划博客暂时放Github上，等后面买了线上服务器和域名之后再考虑做迁移。目前打算有时间就写点东西放上来，打败一个人的往往不是困难而是安逸，走出自己的舒适区。 关于我一个强迫症患者，Chromer、Githuber、Coder、GISer。"},{"title":"Hello World","date":"2018-09-08T12:33:16.000Z","url":"/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]